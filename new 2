CLASS zclsrm2_rep_base_amdp DEFINITION
  PUBLIC
  FINAL
  CREATE PUBLIC .

  PUBLIC SECTION.

    TYPES
          :BEGIN OF ts_ksm_data
            ,class          TYPE klah-class
            ,ksmk           TYPE kssk-clint
            ,kschl          TYPE swor-kschl
            ,ksmk2          TYPE kssk-clint
            ,kschl2         TYPE swor-kschl
            ,
           END OF ts_ksm_data
          ,tt_ksm_data      TYPE STANDARD TABLE OF ts_ksm_data
            WITH EMPTY KEY
          ,tt_pdhcf TYPE STANDARD TABLE OF zvsrm2_i_pdhcf
            WITH EMPTY KEY

          ,BEGIN OF ts_pdhcf_rpz
            ,src_guid             TYPE bbp_guid
            ,con_guid             TYPE bbp_guid
            ,guid                 TYPE bbp_guid
            ,zzsrm2_bitem_guid    TYPE zvsrm2_i_pdhcf-zzsrm2_bitem_guid
            ,zzsrm2_qitem_guid    TYPE zvsrm2_i_pdhcf-zzsrm2_qitem_guid
            ,created_at           TYPE bbp_pds_header-created_at
            ,table_type           TYPE zvsrm2_i_pdhcf-table_type
            ,zzsrm2_reng          TYPE bbp_pds_header-zzsrm2_reng
            ,guid_hi              TYPE zvsrm2_i_pdhcf-guid_hi
            ,zzsrm2_rang          TYPE zvsrm2_i_pdhcf-zzsrm2_rang
            ,zzsrm2_bidi_free_reason_id TYPE zvsrm2_i_pdhcf-zzsrm2_bidi_free_reason_id
            ,zzsrm2_prot_date     TYPE bbp_pds_header-zzsrm2_prot_date
            ,zzsrm2_zomeet_date   TYPE bbp_pds_header-zzsrm2_zomeet_date
            ,zzsrm2_prot_id       TYPE bbp_pds_header-zzsrm2_prot_id
            ,zmpp_guid            TYPE bbp_guid
            ,zmpp_subtype         TYPE bbp_pds_header-subtype
            ,zzsrm2_nd_eoc        TYPE bbp_pds_header-zzsrm2_nd_eoc
            ,final                TYPE char1
            ,nottp                TYPE bbp_pds_header-zzsrm2_nottp
            ,zzsrm2_acc_quantity  TYPE zvsrm2_i_pdhcf-zzsrm2_acc_quantity
            ,zzsrm2_bid_unit      TYPE zvsrm2_i_pdhcf-zzsrm2_bid_unit
            ,zzsrm2_appr_value    TYPE zvsrm2_i_pdhcf-zzsrm2_appr_value
            ,zzsrm2_bidi_decision_free TYPE zvsrm2_i_pdhcf-zzsrm2_bidi_decision_free
            ,zzsrm2_quot_guid     TYPE bbp_pdhcf-zzsrm2_quot_guid
            ,zzsrm2_qualif_sel    TYPE bbp_pdhcf-zzsrm2_qualif_sel
            ,zzsrm2_tech_sel      TYPE bbp_pdhcf-zzsrm2_tech_sel
            ,zzsrm2_comm_sel      TYPE bbp_pdhcf-zzsrm2_comm_sel
            ,zzsrm2_rej_req_reason  TYPE bbp_pdhcf-zzsrm2_rej_req_reason
            ,zzsrm2_rezerv        TYPE bbp_pdhcf-zzsrm2_rezerv
            ,zzsrm2_rej           TYPE bbp_pdhcf-zzsrm2_rej
            ,zzsrm2_q_cp_guid     TYPE bbp_pdhcf-zzsrm2_q_cp_guid
            ,zzsrm2_src_hpur      TYPE bbp_pds_header-zzsrm2_src_hpur
*>KGBoyko 29-01-2020
            ,zzsrm2_handle_item   TYPE bbp_pdhcf-zzsrm2_handle_item
            ,zzsrm2_parent_item   TYPE bbp_pdhcf-zzsrm2_parent_item
*<KGBoyko 29-01-2020
            ,zzsrm2_parent_node   TYPE bbp_pdhcf-zzsrm2_parent_node
            ,zzsrm2_notreas       TYPE bbp_pds_header-zzsrm2_notreas
            ,zzsrm2_eu            TYPE bbp_pds_header-zzsrm2_eu
            ,rpz_i_guid           TYPE bbp_guid
            ,rpz_header           TYPE bbp_guid
            ,ilot_i_guid          TYPE bbp_guid
            ,rank_last            TYPE i      "RPZ items
            ,rank_first           TYPE i      "RPZ items
            ,rank_src_last          TYPE i    "LOTS
            ,rank_src_first         TYPE i    "LOTS
            ,slpp_agr_guid        TYPE bbp_guid
            ,
           END OF ts_pdhcf_rpz
          ,tt_pdhcf_rpz   TYPE STANDARD TABLE OF ts_pdhcf_rpz
            WITH EMPTY KEY
           .

    TYPES:BEGIN OF ts_key_guid
          ,hpur_guid TYPE bbp_guid
          ,ilot_guid TYPE bbp_guid
          ,
          END OF ts_key_guid
          .
    TYPES:tt_key_guid TYPE STANDARD TABLE OF ts_key_guid
              WITH EMPTY KEY.
    TYPES:
          BEGIN OF ts_quan
          ,src_guid TYPE bbp_guid
          ,count TYPE i
          ,
          END OF ts_quan
          .
    TYPES: tt_quan TYPE SORTED TABLE OF ts_quan WITH NON-UNIQUE KEY src_guid.

    TYPES
          :BEGIN OF ts_protocol_stage
             ,rpz_i_guid            TYPE bbp_guid
             ,src_guid              TYPE guid
             ,zzsrm2_zomeet_date    TYPE sy-datum
             ,zzsrm2_prot_date      TYPE sy-datum
             ,zzsrm2_prot_id        TYPE string
             ,zmpp_guid             TYPE bbp_guid
             ,rank                  TYPE i
             ,created_at            TYPE bbp_pds_header-created_at
             ,
           END OF ts_protocol_stage
          ,tt_protocol_stage TYPE STANDARD TABLE OF ts_protocol_stage
            WITH EMPTY KEY .

    TYPES:BEGIN OF ts_sz_subtypes
            ,rpz_i_guid     TYPE bbp_guid
            ,subtype        TYPE bbp_pdhgp-subtype
            ,zzsrm2_nd_boc  TYPE bbp_pds_header-zzsrm2_nd_boc
            ,zzsrm2_nd_eoc  TYPE bbp_pds_header-zzsrm2_nd_eoc
            ,created_at     TYPE bbp_pds_header-created_at
            ,rank           TYPE i
            ,sz_guid        TYPE bbp_guid
            ,
          END OF ts_sz_subtypes
         ,tt_sz_subtypes TYPE STANDARD TABLE OF ts_sz_subtypes
            WITH EMPTY KEY
            .
*          sz_rpz_i.rpz_i_guid, pdhgp.subtype, zzsrm2_nd_boc,
*               created_at,
*               rank( ) over (partition BY rpz_i_guid order by created_at desc ) as rank,
*               sz_guid
*
*
    TYPES:BEGIN OF ts_eval_stage
            ,eval_stage      TYPE ztsrm2_erqevt_c-eval_stage
            ,
          END OF ts_eval_stage.
    TYPES:tt_eval_stage TYPE STANDARD TABLE OF ts_eval_stage
            WITH EMPTY KEY.

    TYPES:BEGIN OF ts_guid_date
              ,guid TYPE bbp_guid
              ,date TYPE datum
              ,
          END OF ts_guid_date
          .
    TYPES:tt_guid_date TYPE STANDARD TABLE OF ts_guid_date
              WITH EMPTY KEY.

    TYPES:BEGIN OF ts_eval_guid_date
            ,guid   TYPE bbp_pds_header-eval_guid
            ,date   TYPE datum
            ,zzsrm2_z010_bukrs  TYPE bukrs
            ,
          END OF ts_eval_guid_date.
    TYPES:tt_eval_guid_date TYPE STANDARD TABLE OF ts_eval_guid_date
            WITH EMPTY KEY.

    TYPES:BEGIN OF ts_closed_hpur_sz
            ,hpur_guid   TYPE bbp_guid
            ,sz_guid     TYPE bbp_guid
            ,zzsrm2_zomeet_date TYPE bbp_pds_header-zzsrm2_zomeet_date
            ,zzsrm2_prot_date TYPE bbp_pds_header-zzsrm2_prot_date
            ,
          END OF ts_closed_hpur_sz.
    TYPES:tt_closed_hpur_sz TYPE SORTED TABLE OF ts_closed_hpur_sz
            WITH UNIQUE KEY  hpur_guid.

    INTERFACES if_amdp_marker_hdb.
    INTERFACES zifsrm2_rep_base_amdp.
    ALIASES: get_krspz_udate FOR zifsrm2_rep_base_amdp~get_krspz_udate,
             get_resolvers FOR zifsrm2_rep_base_amdp~get_resolvers,
             get_rpz_data FOR zifsrm2_rep_base_amdp~get_rpz_data,
             get_zp_data FOR zifsrm2_rep_base_amdp~get_zp_data,
             get_zpmm_data FOR zifsrm2_rep_base_amdp~get_zpmm_data,
             get_rpz_data_from_hpur FOR zifsrm2_rep_base_amdp~get_rpz_data_from_hpur
             .


    TYPES: BEGIN OF ts_zmpp_links
            ,rpz_header     TYPE bbp_pds_header-guid
            ,rpz_i_guid     TYPE bbp_pds_header-guid
            ,ilot_guid      TYPE bbp_pds_header-guid
            ,ilot_i_guid    TYPE bbp_pds_header-guid
            ,slpp_agr_guid  TYPE bbp_pds_header-guid
            ,zzsrm2_bitem_guid TYPE bbp_pds_header-guid
            ,zmpp_guid      TYPE bbp_pds_header-guid
            ,hpur_guid      TYPE bbp_pds_header-guid
            ,
           END OF ts_zmpp_links
           .
    TYPES:tt_zmpp_links TYPE SORTED TABLE OF ts_zmpp_links
            WITH NON-UNIQUE KEY rpz_header
            WITH NON-UNIQUE SORTED KEY hpur_guid COMPONENTS hpur_guid
             .

    TYPES:BEGIN OF ts_doc_hierachy
            ,guid           TYPE bbp_pds_header-guid
            ,p_guid         TYPE bbp_pds_header-guid
            ,process_type   TYPE bbp_pds_header-process_type
            ,object_type    TYPE bbp_pds_header-object_type
            ,header         TYPE bbp_pds_header-guid
            ,p_process_type TYPE bbp_pds_header-process_type
            ,tree_size      TYPE i
            ,parent_rank    TYPE i
            ,
          END OF ts_doc_hierachy.

    TYPES tt_doc_hierachy  TYPE STANDARD TABLE OF ts_doc_hierachy
        WITH EMPTY KEY.

    TYPES: BEGIN OF ts_quot_data_o
          ,ilot_i_guid          TYPE guid
          ,zzsrm2_com_submit_dt TYPE bbp_pdhsc-zzsrm2_com_submit_dt "Дата и время подачи коммерческой части заявки участника
          ,zzsrm2_qual_submit_dt TYPE bbp_pdhsc-zzsrm2_qual_submit_dt
          ,zzsrm2_tech_submit_dt TYPE bbp_pdhsc-zzsrm2_tech_submit_dt
          ,partner_no_18        TYPE crmd_partner-partner_no
          ,
         END OF ts_quot_data_o.
    TYPES
        :tt_quot_data_o TYPE SORTED TABLE OF ts_quot_data_o
          WITH NON-UNIQUE KEY ilot_i_guid
          .
    TYPES:BEGIN OF ts_docpropval
            ,object_id      TYPE zsgldocpropval-object_id
            ,doc_id         TYPE zsgldocpropval-doc_id
            ,
          END OF ts_docpropval.
    TYPES tt_docpropval TYPE HASHED TABLE OF ts_docpropval
        WITH UNIQUE KEY object_id doc_id.

    TYPES:BEGIN OF ts_sgldoc
            ,object_id          TYPE zsgldoc-object_id
            ,doc_id             TYPE zsgldoc-doc_id
            ,parent_doc_id      TYPE zsgldoc-parent_doc_id
            ,
          END OF ts_sgldoc.
    TYPES:tt_sgldoc     TYPE SORTED TABLE OF ts_sgldoc
            WITH UNIQUE KEY object_id doc_id.

    CLASS-METHODS get_winner_data FOR TABLE FUNCTION zddl_f_rep_base_winner_data.

    CLASS-METHODS get_rpz_row FOR TABLE FUNCTION zddl_f_rep_base_get_rpz_row.

    CLASS-METHODS get_rpz_rows_fr_src_guids
      IMPORTING VALUE(it_guids)       TYPE bbpt_guid
                VALUE(iv_client)      TYPE mandt
                VALUE(iv_skip_aggr)   TYPE abap_bool DEFAULT abap_true
                VALUE(it_rpz_i_links) TYPE zifsrm2_rep_base_amdp=>tt_rpz_links
      EXPORTING VALUE(et_guids)       TYPE zifsrm2_rep_base_amdp=>tt_rpz_links
      .

    CLASS-METHODS get_quan_sup
      IMPORTING VALUE(iv_client)   TYPE mandt
                VALUE(it_key_guid) TYPE tt_key_guid
      EXPORTING VALUE(et_quan)     TYPE tt_quan.

    CLASS-METHODS fill_zmpp_data
      IMPORTING VALUE(iv_client)    TYPE mandt
                VALUE(it_links)     TYPE zifsrm2_rep_base_amdp=>tt_links
      EXPORTING VALUE(et_zmpp_data) TYPE zifsrm2_rep_base_amdp=>tt_zmpp_data.

    "! retrieve information from pdhcf connecting with rpz rows for zmpp docs
    "! @parameter iv_client |
    "! @parameter it_zmpp_data |
    "! @parameter et_zmpp |
    CLASS-METHODS get_zmpp_pdhcf_rpz
      IMPORTING VALUE(iv_client)      TYPE sy-mandt
                VALUE(it_zmpp_data)   TYPE zifsrm2_rep_base_amdp=>tt_zmpp_data
                VALUE(it_rpz_i_links) TYPE zifsrm2_rep_base_amdp=>tt_rpz_links
      EXPORTING VALUE(et_pdhcf_rpz)   TYPE tt_pdhcf_rpz
      .

    CLASS-METHODS get_zmpp_links
      IMPORTING VALUE(iv_client)      TYPE sy-mandt
                VALUE(it_zmpp_data)   TYPE zifsrm2_rep_base_amdp=>tt_zmpp_data
                VALUE(it_rpz_i_links) TYPE zifsrm2_rep_base_amdp=>tt_rpz_links
      EXPORTING VALUE(et_zmpp_links)  TYPE tt_zmpp_links
      .

    CLASS-METHODS fill_from_final_zmpp
      IMPORTING VALUE(iv_client)        TYPE mandt
                VALUE(it_pdhcf_rpz)     TYPE tt_pdhcf_rpz
                VALUE(iv_rep_type)      TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
      EXPORTING VALUE(et_final_sz_data) TYPE zifsrm2_rep_base_amdp=>tt_final_sz_data
      .
    CLASS-METHODS fill_from_final_zmpp_o
      IMPORTING VALUE(iv_client)        TYPE mandt
                VALUE(it_zmpp_links)    TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
                VALUE(it_zmpp_guids)    TYPE bbpt_guid
      EXPORTING VALUE(et_final_sz_data) TYPE zifsrm2_rep_base_amdp=>tt_final_sz_data
      .

    TYPES
       :BEGIN OF ts_final_sz_data
         ,src_guid             TYPE text100   "it's lot
         ,rpz_i_guid           TYPE text100
         ,rpz_header           TYPE text100
         ,zmpp_guid            TYPE text100
         ,zzsrm2_prot_date     TYPE text100
         ,zzsrm2_date_meet_zo_ito TYPE text100
         ,zzsrm2_prot_id       TYPE text100
         ,created_at           TYPE text100
         ,
        END OF ts_final_sz_data
       ,tt_final_sz_data TYPE STANDARD TABLE OF ts_final_sz_data
         WITH EMPTY KEY
         WITH NON-UNIQUE SORTED KEY src_guid COMPONENTS src_guid
         WITH NON-UNIQUE SORTED KEY rpz_i_guid COMPONENTS rpz_i_guid
         WITH NON-UNIQUE SORTED KEY rpz_header COMPONENTS rpz_header
        .

    CLASS-METHODS fill_from_final_zmpp_o1
      IMPORTING VALUE(iv_client)        TYPE mandt
                VALUE(it_zmpp_links)    TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
                VALUE(it_zmpp_guids)    TYPE bbpt_guid
      EXPORTING VALUE(et_final_sz_data) TYPE tt_final_sz_data
      .

    CLASS-METHODS get_reng_ind_yes_rpz_pos
      IMPORTING VALUE(iv_client)        TYPE sy-mandt
                VALUE(it_zmpp_data)     TYPE zifsrm2_rep_base_amdp=>tt_zmpp_data
                VALUE(it_pdhcf_rpz)     TYPE tt_pdhcf_rpz
                VALUE(it_links)         TYPE zifsrm2_rep_base_amdp=>tt_links
                VALUE(it_final_sz_data) TYPE zifsrm2_rep_base_amdp=>tt_final_sz_data
      EXPORTING VALUE(et_reng_ind)      TYPE zifsrm2_rep_base_amdp=>tt_reng_ind_pos_yes
      .

    CLASS-METHODS get_reng_ind_yes_rpz_pos_o
      IMPORTING VALUE(iv_client)         TYPE mandt
                VALUE(it_zmpp_links)     TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
                VALUE(it_final_sz_guids) TYPE bbpt_guid
      EXPORTING VALUE(et_reng_ind)       TYPE zifsrm2_rep_base_amdp=>tt_reng_ind_pos_yes
      .

    CLASS-METHODS get_data_sing_pp_o
      IMPORTING VALUE(iv_client)       TYPE mandt
                VALUE(it_zmpp_links)   TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
                VALUE(it_reng_ind)     TYPE zifsrm2_rep_base_amdp=>tt_reng_ind_pos_yes
      EXPORTING VALUE(et_data_sing_pp) TYPE zifsrm2_rep_base_amdp=>tt_data_sing_pp.

    CLASS-METHODS get_data_sing_pp
      IMPORTING VALUE(iv_client)       TYPE sy-mandt
                VALUE(it_reng_ind)     TYPE zifsrm2_rep_base_amdp=>tt_reng_ind_pos_yes
                VALUE(it_pdhcf_rpz)    TYPE tt_pdhcf_rpz
      EXPORTING VALUE(et_data_sing_pp) TYPE zifsrm2_rep_base_amdp=>tt_data_sing_pp.

    CLASS-METHODS get_reng_ind_no
      IMPORTING VALUE(iv_client)    TYPE sy-mandt
                VALUE(it_zmpp_data) TYPE zifsrm2_rep_base_amdp=>tt_zmpp_data
                VALUE(it_pdhcf_rpz) TYPE tt_pdhcf_rpz
      EXPORTING VALUE(et_reng_ind)  TYPE zifsrm2_rep_base_amdp=>tt_reng_ind_no
                VALUE(et_last_zmpp) TYPE zifsrm2_rep_base_amdp=>tt_last_zmpp
      .

    CLASS-METHODS get_reng_ind_no_o
      IMPORTING VALUE(iv_client)     TYPE sy-mandt
                VALUE(it_zmpp_links) TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
      EXPORTING VALUE(et_reng_ind)   TYPE zifsrm2_rep_base_amdp=>tt_reng_ind_no
                VALUE(et_last_zmpp)  TYPE zifsrm2_rep_base_amdp=>tt_last_zmpp
      .

    CLASS-METHODS get_rrs_contr_txt
      IMPORTING VALUE(iv_client)        TYPE sy-mandt
                VALUE(it_zmpp_data)     TYPE zifsrm2_rep_base_amdp=>tt_zmpp_data
                VALUE(it_rpz_i_links)   TYPE zifsrm2_rep_base_amdp=>tt_rpz_links
      EXPORTING VALUE(et_rrs_contr_txt) TYPE zifsrm2_rep_base_amdp=>tt_rrs_contr_txt
      .

    CLASS-METHODS get_rrs_contr_txt_o
      IMPORTING VALUE(iv_client)        TYPE sy-mandt
                VALUE(it_zmpp_links)    TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
      EXPORTING VALUE(et_rrs_contr_txt) TYPE zifsrm2_rep_base_amdp=>tt_rrs_contr_txt
      .

    CLASS-METHODS get_reng_retr_data
      IMPORTING VALUE(iv_client)      TYPE sy-mandt
                VALUE(it_links)       TYPE zifsrm2_rep_base_amdp=>tt_links
                VALUE(iv_rep_type)    TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
                VALUE(it_rpz_i_links) TYPE zifsrm2_rep_base_amdp=>tt_rpz_links
      EXPORTING VALUE(et_data)        TYPE zifsrm2_rep_base_amdp=>tt_retr_count.

    CLASS-METHODS get_zmpp_protocol_o
      IMPORTING VALUE(iv_client)     TYPE sy-mandt
                VALUE(it_zmpp_links) TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
      EXPORTING VALUE(et_protocol)   TYPE zifsrm2_rep_base_amdp=>tt_zmpp_protocol
      .

    CLASS-METHODS get_zmpp_protocol
      IMPORTING VALUE(iv_client)    TYPE sy-mandt
                VALUE(it_pdhcf_rpz) TYPE tt_pdhcf_rpz
      EXPORTING VALUE(et_protocol)  TYPE zifsrm2_rep_base_amdp=>tt_zmpp_protocol
      .

    CLASS-METHODS fill_from_last_zmpp_o
      IMPORTING VALUE(iv_client)     TYPE sy-mandt
                VALUE(it_zmpp_links) TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
                VALUE(iv_rep_type)   TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
      EXPORTING VALUE(et_last_zmpp)  TYPE zifsrm2_rep_base_amdp=>tt_zmpp_rpz_inform
      .

    CLASS-METHODS fill_from_last_zmpp
      IMPORTING VALUE(iv_client)    TYPE mandt
                VALUE(it_pdhcf_rpz) TYPE tt_pdhcf_rpz
                VALUE(iv_rep_type)  TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
      EXPORTING VALUE(et_last_zmpp) TYPE zifsrm2_rep_base_amdp=>tt_zmpp_rpz_inform
      .

    CLASS-METHODS fill_rpf_reason_txt_o
      IMPORTING VALUE(iv_client)     TYPE sy-mandt
                VALUE(it_zmpp_links) TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
                VALUE(iv_rep_type)   TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
      EXPORTING VALUE(et_rpf_reason) TYPE zifsrm2_rep_base_amdp=>tt_rpf_reason
      .

    CLASS-METHODS fill_rpf_reason_txt
      IMPORTING VALUE(iv_client)     TYPE mandt
                VALUE(it_pdhcf_rpz)  TYPE tt_pdhcf_rpz
                VALUE(iv_rep_type)   TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
      EXPORTING VALUE(et_rpf_reason) TYPE zifsrm2_rep_base_amdp=>tt_rpf_reason
      .

    CLASS-METHODS get_final_sz_o
      IMPORTING VALUE(iv_client)     TYPE sy-mandt
                VALUE(it_zmpp_links) TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
                VALUE(iv_rep_type)   TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
      EXPORTING VALUE(et_final_sz)   TYPE zifsrm2_rep_base_amdp=>tt_final_sz
      .

    CLASS-METHODS get_final_sz
      IMPORTING VALUE(iv_client)    TYPE mandt
                VALUE(it_pdhcf_rpz) TYPE tt_pdhcf_rpz
                VALUE(iv_rep_type)  TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
      EXPORTING VALUE(et_final_sz)  TYPE zifsrm2_rep_base_amdp=>tt_final_sz
      .

    CLASS-METHODS get_rpz_pos_sz_o
      IMPORTING VALUE(iv_client)     TYPE sy-mandt
                VALUE(it_zmpp_links) TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
      EXPORTING VALUE(et_rpz_pos_sz) TYPE zifsrm2_rep_base_amdp=>tt_rpz_pos_sz
      .

    CLASS-METHODS get_rpz_pos_sz
      IMPORTING VALUE(iv_client)     TYPE mandt
                VALUE(it_pdhcf_rpz)  TYPE tt_pdhcf_rpz
      EXPORTING VALUE(et_rpz_pos_sz) TYPE zifsrm2_rep_base_amdp=>tt_rpz_pos_sz
      .


    CLASS-METHODS get_sz_stages_o
      IMPORTING VALUE(iv_client)     TYPE sy-mandt
                VALUE(it_zmpp_links) TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
      EXPORTING VALUE(et_sz_stages)  TYPE zifsrm2_rep_base_amdp=>tt_sz_stages
      .

    CLASS-METHODS get_sz_stages
      IMPORTING VALUE(iv_client)    TYPE mandt
                VALUE(it_pdhcf_rpz) TYPE tt_pdhcf_rpz
      EXPORTING VALUE(et_sz_stages) TYPE zifsrm2_rep_base_amdp=>tt_sz_stages
      .

    CLASS-METHODS get_last_fin_sz_o
      IMPORTING VALUE(iv_client)      TYPE sy-mandt
                VALUE(it_zmpp_links)  TYPE zclsrm2_rep_base_amdp=>tt_zmpp_links
      EXPORTING VALUE(et_last_fin_sz) TYPE zifsrm2_rep_base_amdp=>tt_last_fin_sz
      .

    CLASS-METHODS get_last_fin_sz
      IMPORTING VALUE(iv_client)      TYPE mandt
                VALUE(it_pdhcf_rpz)   TYPE tt_pdhcf_rpz
      EXPORTING VALUE(et_last_fin_sz) TYPE zifsrm2_rep_base_amdp=>tt_last_fin_sz
      .

    CLASS-METHODS get_hpur_sz_data
      IMPORTING VALUE(iv_client)         TYPE mandt
                VALUE(it_hpur_guids)     TYPE bbpt_guid
      EXPORTING VALUE(et_closed_hpur_sz) TYPE tt_closed_hpur_sz.

    CLASS-METHODS get_doc_i_hierachy
      IMPORTING VALUE(iv_client) TYPE mandt
                VALUE(it_guids)  TYPE bbpt_guid
      EXPORTING VALUE(et_result) TYPE tt_doc_hierachy
      .

    CLASS-METHODS get_quot_data_o
      IMPORTING VALUE(iv_client)       TYPE mandt
                VALUE(it_ilot_i_links) TYPE zifsrm2_rep_base_alt=>tt_ilot_i_links
      EXPORTING VALUE(et_result)       TYPE tt_quot_data_o
      .

    CLASS-METHODS get_sgldoc
      IMPORTING VALUE(iv_client)     TYPE mandt
                VALUE(it_docpropval) TYPE zclsrm2_rep_base_amdp=>tt_docpropval
      EXPORTING VALUE(et_result)     TYPE tt_sgldoc
      .

  PRIVATE SECTION.
    CLASS-METHODS: get_ksm
      IMPORTING VALUE(iv_client) TYPE sy-mandt
                VALUE(it_rpz)    TYPE zttsrm2_c_rbrpz
                VALUE(iv_langu)  TYPE sy-langu
      EXPORTING VALUE(et_ksm)    TYPE tt_ksm_data
      .
    CLASS-METHODS :get_zp_ilot_links
      IMPORTING VALUE(iv_client) TYPE sy-mandt
                VALUE(it_rpz)    TYPE zttsrm2_c_rbrpz
      EXPORTING VALUE(et_links)  TYPE zifsrm2_rep_base_amdp=>tt_rpz_zp_ilot
      .
    CLASS-METHODS: get_zp_wf_dates
      IMPORTING VALUE(iv_client)   TYPE sy-mandt
                VALUE(it_zp)       TYPE zifsrm2_rep_base_amdp=>tt_zp_data
      EXPORTING VALUE(et_wf_dates) TYPE zifsrm2_rep_base_amdp=>tt_zp_wf
      .
    CLASS-METHODS: get_zp_act_regdata
      IMPORTING VALUE(iv_client)      TYPE sy-mandt
                VALUE(it_zp)          TYPE zifsrm2_rep_base_amdp=>tt_zp_data
      EXPORTING VALUE(et_act_regdata) TYPE zifsrm2_rep_base_amdp=>tt_hpur_act_regdata
      .

    CLASS-METHODS: get_zp_pl_regdata
      IMPORTING VALUE(iv_client)     TYPE sy-mandt
                VALUE(it_zp)         TYPE zifsrm2_rep_base_amdp=>tt_zp_data
      EXPORTING VALUE(et_pl_regdata) TYPE zifsrm2_rep_base_amdp=>tt_hpur_pl_regdata
      .



    CLASS-METHODS select_rpz_data
      IMPORTING VALUE(iv_filter)     TYPE string
                VALUE(iv_client)     TYPE mandt
                VALUE(iv_langu)      TYPE sy-langu
                VALUE(iv_date)       TYPE sy-datum
                VALUE(it_rpz_guids)  TYPE bbpt_guid
                VALUE(it_rpz_links)  TYPE zifsrm2_rep_base_amdp=>tt_rpz_zp_ilot
                VALUE(iv_max_rows)   TYPE i
                VALUE(iv_rep_type)   TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
                VALUE(it_auth_guids) TYPE bbpt_guid
      EXPORTING VALUE(et_base)       TYPE zirm2_rep_base_rpz_data
      .

    CLASS-METHODS filter_max_rows
      IMPORTING VALUE(iv_max_rows) TYPE i
                VALUE(iv_rep_type) TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
                VALUE(it_rpz)      TYPE zttsrm2_c_rbrpz
      EXPORTING VALUE(et_rpz)      TYPE zttsrm2_c_rbrpz
      .


    CLASS-METHODS determine_protocol
      IMPORTING VALUE(it_stage) TYPE tt_protocol_stage
      EXPORTING VALUE(et_stage) TYPE tt_protocol_stage
      .


    CLASS-METHODS: get_eish
      IMPORTING VALUE(iv_client) TYPE sy-mandt
                VALUE(it_zp)     TYPE zifsrm2_rep_base_amdp=>tt_zp_data
      EXPORTING VALUE(et_eish)   TYPE zifsrm2_rep_base_amdp=>tt_eish
      .

    CLASS-METHODS: get_rsnh
      IMPORTING VALUE(iv_client) TYPE sy-mandt
                VALUE(it_zp)     TYPE zifsrm2_rep_base_amdp=>tt_zp_data
      EXPORTING VALUE(et_eish)   TYPE zifsrm2_rep_base_amdp=>tt_rsnh
      .

    CLASS-METHODS select_zo_dates
      IMPORTING VALUE(iv_client)      TYPE mandt
                VALUE(it_links)       TYPE zifsrm2_rep_base_amdp=>tt_links
                VALUE(iv_rep_type)    TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
                VALUE(it_zp_guid)     TYPE bbpt_guid
                VALUE(it_stage)       TYPE zifsrm2_rep_base_amdp=>tt_stages
                VALUE(it_subtype)     TYPE zclsrm2_andev_model_amdp=>tt_subtype
                VALUE(it_hpur_rpz_i)  TYPE zifsrm2_rep_base_amdp=>tt_hpur_rpz_i
                VALUE(it_sz_subtypes) TYPE tt_sz_subtypes
      EXPORTING VALUE(et_dates)       TYPE zifsrm2_rep_base_amdp=>tt_rpz_i_guid_date
      .
    CLASS-METHODS get_date_prot_zo
      IMPORTING VALUE(iv_client)      TYPE mandt
                VALUE(it_sz_subtypes) TYPE tt_sz_subtypes
                VALUE(it_hpur_rpz_i)  TYPE zifsrm2_rep_base_amdp=>tt_hpur_rpz_i
                VALUE(it_zp_guid)     TYPE bbpt_guid
      EXPORTING VALUE(et_dates)       TYPE zifsrm2_rep_base_amdp=>tt_rpz_i_guid_date
      .
    CLASS-METHODS get_date_dir_est_p
      IMPORTING VALUE(iv_client)       TYPE mandt
                VALUE(it_bukrs_guid)   TYPE zifsrm2_rep_base_amdp=>tt_bukrs_guid
      EXPORTING VALUE(et_date_dir_est) TYPE zifsrm2_rep_base_amdp=>tt_date_dir_est.
    CLASS-METHODS get_date_dir_est_p_ind
      IMPORTING VALUE(iv_client)     TYPE mandt
                VALUE(it_bukrs_guid) TYPE zifsrm2_rep_base_amdp=>tt_bukrs_guid
                VALUE(it_eval_stage) TYPE tt_eval_stage
      EXPORTING VALUE(et_result)     TYPE tt_eval_guid_date.
    CLASS-METHODS get_date_zo_o
      IMPORTING VALUE(iv_client)      TYPE mandt
                VALUE(it_links)       TYPE zifsrm2_rep_base_amdp=>tt_links
                VALUE(iv_rep_type)    TYPE zzsrm2_rep_base_settings-rep_type DEFAULT '01' "rpz
                VALUE(it_hpur_rpz_i)  TYPE zifsrm2_rep_base_amdp=>tt_hpur_rpz_i
                VALUE(it_rpz_i_links) TYPE zifsrm2_rep_base_amdp=>tt_rpz_links
      EXPORTING VALUE(rt_date_zo)     TYPE zifsrm2_rep_base_amdp=>tt_date_zo
      .

ENDCLASS.



CLASS zclsrm2_rep_base_amdp IMPLEMENTATION.

  METHOD get_quan_sup
       BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
       USING bbp_pdhgp tvarvc bbp_pdhsc crm_jest crmd_orderadm_h .

    it_key_guid = select links.hpur_guid, links.ilot_guid
              from bbp_pdhgp as pdhgp
              inner join
                  ( select distinct hpur_guid, ilot_guid
                      from :it_key_guid ) as links
                  on pdhgp.guid = links.hpur_guid
              inner join crmd_orderadm_h as orderadm_h
                  on links.hpur_guid = orderadm_h.guid and
                     orderadm_h.client = :iv_client
              WHERE pdhgp.client = :iv_client AND
                    pdhgp.subtype not in (
                      select low
                          from tvarvc
                          where name = 'ZSRM2_SUBTYPE_UNCOMP' and
                                mandt = :iv_client
                    )
                    ;

    if is_empty(:it_key_guid) THEN
    return;
    END if;

    lt_quan = SELECT pdhgp.guid, pdhgp.src_guid
                from bbp_pdhgp as pdhgp
                inner join
                ( select ilot_guid
                from :it_key_guid) AS ilot
                ON pdhgp.src_guid = ilot.ilot_guid
                ;

    et_quan = select quan.src_guid, count(distinct orderadm_h.object_id) AS count
                from :lt_quan as quan
                inner join bbp_pdhsc as pdhsc
                ON pdhsc.guid = quan.guid
                inner join crm_jest as jest
                on jest.objnr = pdhsc.guid
                inner join crmd_orderadm_h as orderadm_h
                on orderadm_h.guid = quan.guid
                where pdhsc.zzsrm2_quot_type = 'O'
                  and orderadm_h.process_type = 'QAPO'
                  and jest.stat in ( 'I1012','I9926' )
                  and inact <> 'X'
                group by quan.src_guid;


  endmethod.

  METHOD determine_protocol
       BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY.


    lt_stage = select stage.*,
                      rank() over (partition BY rpz_i_guid order by zzsrm2_prot_date, zzsrm2_zomeet_date desc ) as rank_prot
                  FROM :it_stage as stage
                  WHERE rank = 1;
    et_stage = SELECT rpz_i_guid,src_guid,zzsrm2_zomeet_date, zzsrm2_prot_date, zzsrm2_prot_id,
                      zmpp_guid,rank, created_at
               FROM :lt_stage
               WHERE rank_prot = 1;

  ENDMETHOD.


  METHOD fill_from_final_zmpp_o1
       BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
       USING zvsrm2_i_pdhcf bbp_pdhsc crmd_orderadm_h bbp_pdhgp ztsrm2_scon_type.


*    Данные выводим из первого утвержденног/опубликованного (I1011/I9915) СЗ,
*    связанного с позицией через SRC_GUID, где (BIDI_REASON_ID<>пусто и BIDI_REASON_ID<>7)*
*    или из последнего связанного с позицией СЗ с (FINAL=X** и (BBP_PDHSC-ZZSRM2_RENG=пусто***
*     или ZZSRM2_RANG=1*)) или c NOTTP=X***.
    lt_first_sz = select rpz_i_guid, rpz_header, ilot_guid AS src_guid, zzsrm2_prot_date,
                          zzsrm2_zomeet_date AS zzsrm2_date_meet_zo_ito, guid_hi,zzsrm2_prot_id,
                          rank() over (partition BY rpz_i_guid order by created_at asc ) as rank,
                          created_at
                    FROM zvsrm2_i_pdhcf AS pdhcf_rpz
                    INNER JOIN :it_zmpp_links AS zmpp_links
                     ON zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                    inner many to one join bbp_pdhsc
                        on pdhcf_rpz.guid_hi = bbp_pdhsc.guid and
                           bbp_pdhsc.client = :iv_client
                    INNER MANY TO ONE JOIN crmd_orderadm_h
                        ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid and
                           crmd_orderadm_h.client = :iv_client
                    WHERE EXISTS ( select guid FROM :it_zmpp_guids AS zmpp_guids WHERE zmpp_guids.guid = pdhcf_rpz.guid_hi ) and
                            ( pdhcf_rpz.zzsrm2_bidi_free_reason_id <> '' and
                            pdhcf_rpz.zzsrm2_bidi_free_reason_id <> '7' ) and
                            rpz_i_guid <> '' ;


    lt_last_sz = select distinct rpz_i_guid, rpz_header, ilot_guid as src_guid, zzsrm2_prot_date, zzsrm2_zomeet_date as zzsrm2_date_meet_zo_ito,
                        guid_hi,zzsrm2_prot_id,
                        rank() over (partition BY rpz_i_guid ORDER BY created_at desc ) as rank,
                        created_at,
                        final, zzsrm2_reng, zzsrm2_rang, zzsrm2_nottp, zzsrm2_bidi_free_reason_id, pdhcf_rpz.zzsrm2_bitem_guid
                    from zvsrm2_i_pdhcf as pdhcf_rpz
                        inner join :it_zmpp_links as zmpp_links
                         on zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                        inner many to one join bbp_pdhsc
                            on pdhcf_rpz.guid_hi = bbp_pdhsc.guid and
                               bbp_pdhsc.client = :iv_client
                        INNER ONE TO ONE JOIN crmd_orderadm_h
                            ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid and
                               crmd_orderadm_h.client = :iv_client
                        INNER ONE TO ONE JOIN bbp_pdhgp
                            ON crmd_orderadm_h.guid = bbp_pdhgp.guid and
                               bbp_pdhgp.client = :iv_client
                        INNER ONE TO ONE JOIN ztsrm2_scon_type
                            ON bbp_pdhgp.subtype = ztsrm2_scon_type.subtype and
                               ztsrm2_scon_type.mandt = :iv_client
                    WHERE
                          NOT EXISTS ( select rpz_i_guid FROM :lt_first_sz AS b
                                                 WHERE rank = 1 AND b.rpz_i_guid = zmpp_links.rpz_i_guid )
                            and
                            (
                            ( final = 'X' and
                            ( bbp_pdhsc.zzsrm2_reng = '' OR zzsrm2_rang = 1) ) OR
                            zzsrm2_nottp = 'X' ) AND
                            rpz_i_guid <> '' AND
                            EXISTS ( SELECT guid FROM :it_zmpp_guids AS zmpp_guids WHERE zmpp_guids.guid = pdhcf_rpz.guid_hi )

                            ;

*   final result
    et_final_sz_data = select distinct '' as src_guid, '' as rpz_i_guid, ''  rpz_header, '' as zmpp_guid, '' as zzsrm2_prot_date,
                        '' as zzsrm2_date_meet_zo_ito, '' as zzsrm2_prot_id,
                                      '' as created_at
                          from :lt_first_sz as first_sz
                          ;

  endmethod.

  METHOD fill_from_final_zmpp_o BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
       USING zvsrm2_i_pdhcf bbp_pdhsc crmd_orderadm_h bbp_pdhgp ztsrm2_scon_type.


*    Данные выводим из первого утвержденног/опубликованного (I1011/I9915) СЗ,
*    связанного с позицией через SRC_GUID, где (BIDI_REASON_ID<>пусто и BIDI_REASON_ID<>7)*
*    или из последнего связанного с позицией СЗ с (FINAL=X** и (BBP_PDHSC-ZZSRM2_RENG=пусто***
*     или ZZSRM2_RANG=1*)) или c NOTTP=X***.
    lt_first_sz = SELECT rpz_i_guid, rpz_header, ilot_guid AS src_guid, zzsrm2_prot_date,
                          zzsrm2_zomeet_date AS zzsrm2_date_meet_zo_ito, guid_hi,zzsrm2_prot_id,
                          rank() over (partition BY rpz_i_guid order by created_at asc ) as rank,
                          created_at
                    FROM zvsrm2_i_pdhcf AS pdhcf_rpz
                    INNER JOIN :it_zmpp_links AS zmpp_links
                     ON zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                    INNER MANY TO ONE JOIN bbp_pdhsc
                        ON pdhcf_rpz.guid_hi = bbp_pdhsc.guid AND
                           bbp_pdhsc.client = :iv_client
                    INNER MANY TO ONE JOIN crmd_orderadm_h
                        ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid AND
                           crmd_orderadm_h.client = :iv_client
                    WHERE EXISTS ( SELECT guid FROM :it_zmpp_guids AS zmpp_guids WHERE zmpp_guids.guid = pdhcf_rpz.guid_hi ) AND
                            ( pdhcf_rpz.zzsrm2_bidi_free_reason_id <> '' and
                            pdhcf_rpz.zzsrm2_bidi_free_reason_id <> '7' ) and
                            rpz_i_guid <> '' AND
                          EXISTS ( SELECT guid FROM  bbp_pdhgp
                                    WHERE crmd_orderadm_h.guid = bbp_pdhgp.guid AND
                                       bbp_pdhgp.client = :iv_client AND
                                       bbp_pdhgp.version_type = '' AND
                                       bbp_pdhgp.doc_closed = '' );


    lt_last_sz = SELECT distinct rpz_i_guid, rpz_header, ilot_guid AS src_guid, zzsrm2_prot_date, zzsrm2_zomeet_date as zzsrm2_date_meet_zo_ito,
                        guid_hi,zzsrm2_prot_id,
                        rank() over (partition BY rpz_i_guid ORDER BY created_at desc ) as rank,
                        created_at,
                        final, zzsrm2_reng, zzsrm2_rang, zzsrm2_nottp, zzsrm2_bidi_free_reason_id, pdhcf_rpz.zzsrm2_bitem_guid
                    FROM zvsrm2_i_pdhcf AS pdhcf_rpz
                        INNER JOIN :it_zmpp_links AS zmpp_links
                         ON zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                        INNER MANY TO ONE JOIN bbp_pdhsc
                            ON pdhcf_rpz.guid_hi = bbp_pdhsc.guid AND
                               bbp_pdhsc.client = :iv_client
                        INNER ONE TO ONE JOIN crmd_orderadm_h
                            ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid AND
                               crmd_orderadm_h.client = :iv_client
                        INNER ONE TO ONE JOIN bbp_pdhgp
                            ON crmd_orderadm_h.guid = bbp_pdhgp.guid AND
                               bbp_pdhgp.client = :iv_client AND
                               bbp_pdhgp.version_type = '' AND
                               bbp_pdhgp.doc_closed = ''
                        INNER ONE TO ONE JOIN ztsrm2_scon_type
                            ON bbp_pdhgp.subtype = ztsrm2_scon_type.subtype AND
                               ztsrm2_scon_type.mandt = :iv_client
                    WHERE
                          NOT EXISTS ( SELECT rpz_i_guid FROM :lt_first_sz AS b
                                                 WHERE rank = 1 AND b.rpz_i_guid = zmpp_links.rpz_i_guid )
                            AND
                            (
                            ( final = 'X' AND
                            ( bbp_pdhsc.zzsrm2_reng = '' OR zzsrm2_rang = 1) ) OR
                            zzsrm2_nottp = 'X' ) AND
                            rpz_i_guid <> '' AND
                            EXISTS ( SELECT guid FROM :it_zmpp_guids AS zmpp_guids WHERE zmpp_guids.guid = pdhcf_rpz.guid_hi )

                            ;

*   final result
    et_final_sz_data = SELECT DISTINCT first_sz.src_guid,  first_sz.rpz_i_guid, first_sz.rpz_header, guid_hi as zmpp_guid, zzsrm2_prot_date, zzsrm2_date_meet_zo_ito,zzsrm2_prot_id,
                                       created_at
                          from :lt_first_sz as first_sz
                          where rank = 1
                       union select last_sz.src_guid, last_sz.rpz_i_guid,last_sz.rpz_header, guid_hi as zmpp_guid, zzsrm2_prot_date, zzsrm2_date_meet_zo_ito,zzsrm2_prot_id,created_at
                          from :lt_last_sz as last_sz
                          where rank = 1


                          ;

  ENDMETHOD.

  METHOD fill_from_final_zmpp
     BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY.

*    Данные выводим из первого утвержденног/опубликованного (I1011/I9915) СЗ,
*    связанного с позицией через SRC_GUID, где (BIDI_REASON_ID<>пусто и BIDI_REASON_ID<>7)*
*    или из последнего связанного с позицией СЗ с (FINAL=X** и (BBP_PDHSC-ZZSRM2_RENG=пусто***
*     или ZZSRM2_RANG=1*)) или c NOTTP=X***.
    lt_first_sz = select rpz_i_guid, rpz_header, src_guid, zzsrm2_prot_date,
                          zzsrm2_zomeet_date AS zzsrm2_date_meet_zo_ito, guid_hi,zzsrm2_prot_id,
                          rank() over (partition BY rpz_i_guid order by created_at asc ) as rank,
                          created_at
                    FROM :it_pdhcf_rpz AS pdhcf_rpz
                    WHERE ( pdhcf_rpz.zzsrm2_bidi_free_reason_id <> '' and
                            pdhcf_rpz.zzsrm2_bidi_free_reason_id <> 7 ) and
                            rpz_i_guid <> '';

    lt_last_sz = select distinct rpz_i_guid, rpz_header, src_guid, zzsrm2_prot_date, zzsrm2_zomeet_date as zzsrm2_date_meet_zo_ito,
                        guid_hi,zzsrm2_prot_id,
                        rank() over (partition BY rpz_i_guid ORDER BY created_at desc ) as rank,
                        created_at
                    FROM :it_pdhcf_rpz AS pdhcf_rpz
                    WHERE
                          rpz_i_guid NOT IN ( SELECT rpz_i_guid FROM :lt_first_sz
                                                 WHERE rank = 1  ) AND (
                            ( final = 'X' AND
                            ( zzsrm2_reng = '' OR zzsrm2_rang = 1) ) OR
                            nottp = 'X' ) AND
                            rpz_i_guid <> '';
*   final result
    et_final_sz_data = SELECT DISTINCT first_sz.src_guid,  first_sz.rpz_i_guid, first_sz.rpz_header, guid_hi as zmpp_guid, zzsrm2_prot_date, zzsrm2_date_meet_zo_ito,zzsrm2_prot_id,
                                       created_at
                          from :lt_first_sz as first_sz
                          where rank = 1
                       union select last_sz.src_guid, last_sz.rpz_i_guid,last_sz.rpz_header, guid_hi as zmpp_guid, zzsrm2_prot_date, zzsrm2_date_meet_zo_ito,zzsrm2_prot_id,created_at
                          from :lt_last_sz as last_sz
                          where rank = 1;


  ENDMETHOD.

  METHOD fill_from_last_zmpp_o
       BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
       USING zvsrm2_i_pdhcf bbp_pdhsc crmd_orderadm_h bbp_pdhgp
      .

    lt_pdhcf_rpz = SELECT DISTINCT zmpp_links.ilot_guid AS src_guid, rpz_i_guid, rpz_header,  created_at,
                      zzsrm2_nd_eoc, zzsrm2_prot_date, zzsrm2_prot_id
                FROM zvsrm2_i_pdhcf AS pdhcf_rpz
                INNER JOIN :it_zmpp_links AS zmpp_links
                 ON zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                INNER ONE TO ONE JOIN bbp_pdhsc
                    ON pdhcf_rpz.guid_hi = bbp_pdhsc.guid AND
                       bbp_pdhsc.client = :iv_client
                INNER ONE TO ONE JOIN crmd_orderadm_h
                    ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid  AND
                       crmd_orderadm_h.client = :iv_client
                WHERE rpz_i_guid <> '' AND zzsrm2_nd_eoc <> '00000000' AND
                      EXISTS ( SELECT guid FROM  bbp_pdhgp WHERE
                                       crmd_orderadm_h.guid = bbp_pdhgp.guid AND
                                       bbp_pdhgp.client = :iv_client AND
                                       bbp_pdhgp.version_type = '' AND
                                       bbp_pdhgp.doc_closed = '' );

    lt_zzsrm2_nd_eoc = SELECT DISTINCT src_guid,
                          CASE :iv_rep_type
                            WHEN '02'
                              THEN rpz_i_guid
                            ELSE NULL
                          END AS rpz_i_guid,
                          zzsrm2_nd_eoc,
                          zzsrm2_prot_date,
                          zzsrm2_prot_id,
                          RANK() OVER (PARTITION BY pdhcf_rpz.src_guid ORDER BY  pdhcf_rpz.created_at DESC ) AS rank_src_last,
                          RANK() OVER (PARTITION BY pdhcf_rpz.rpz_i_guid ORDER BY  pdhcf_rpz.created_at DESC ) AS rank_last
                        from :lt_pdhcf_rpz as pdhcf_rpz;


    et_last_zmpp = SELECT DISTINCT src_guid,
                          CASE :iv_rep_type
                            WHEN '02'
                              THEN rpz_i_guid
                            ELSE NULL
                          END AS rpz_i_guid,
                          zzsrm2_nd_eoc,
                          zzsrm2_prot_date,
                          zzsrm2_prot_id
                    FROM :lt_zzsrm2_nd_eoc as pdhcf_rpz
                    WHERE ( ( :iv_rep_type = '01' OR :iv_rep_type = '03' )  AND pdhcf_rpz.rank_src_last = 1 AND src_guid <> '00000000000000000000000000000000' ) OR
                          ( :iv_rep_type = '02' AND pdhcf_rpz.rank_last = 1 AND rpz_i_guid <> '00000000000000000000000000000000' );

  ENDMETHOD.

  METHOD fill_from_last_zmpp
        BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      .

    lt_zzsrm2_nd_eoc = select DISTINCT src_guid,
                          CASE :iv_rep_type
                            WHEN '02'
                              THEN rpz_i_guid
                            ELSE null
                          END AS rpz_i_guid,
                          zzsrm2_nd_eoc,
                          zzsrm2_prot_date,
                          zzsrm2_prot_id,
                          rank() over (partition BY pdhcf_rpz.src_guid order by  pdhcf_rpz.created_at desc ) as rank_src_last,
                          rank() over (partition BY pdhcf_rpz.rpz_i_guid order by  pdhcf_rpz.created_at desc ) as rank_last
                        from :it_pdhcf_rpz as pdhcf_rpz
                        where pdhcf_rpz.zzsrm2_nd_eoc <> '00000000';


    et_last_zmpp = select distinct src_guid,
                          case :iv_rep_type
                            when '02'
                              then rpz_i_guid
                            else null
                          end as rpz_i_guid,
                          zzsrm2_nd_eoc,
                          zzsrm2_prot_date,
                          zzsrm2_prot_id
                    from :lt_zzsrm2_nd_eoc as pdhcf_rpz
                    where ( ( :iv_rep_type = '01' or :iv_rep_type = '03' )  and pdhcf_rpz.rank_src_last = 1 ) OR
                          ( :iv_rep_type = '02' AND pdhcf_rpz.rank_last = 1 );


  ENDMETHOD.

  METHOD fill_rpf_reason_txt_o
      BY DATABASE PROCEDURE FOR HDB
      LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      USING zvsrm2_isconrsnt zvsrm2_i_pdhcf bbp_pdhsc crmd_orderadm_h bbp_pdhgp
     .

    lt_pdhcf_rpz = select DISTINCT zmpp_links.ilot_guid as src_guid, rpz_i_guid, rpz_header,  created_at,
                      zzsrm2_notreas,zzsrm2_eu, zzsrm2_nottp as nottp
                from zvsrm2_i_pdhcf as pdhcf_rpz
                inner join :it_zmpp_links as zmpp_links
                 on zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                inner one to one join bbp_pdhsc
                    on pdhcf_rpz.guid_hi = bbp_pdhsc.guid and
                       bbp_pdhsc.client = :iv_client
                INNER ONE TO ONE JOIN crmd_orderadm_h
                    ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid  and
                       crmd_orderadm_h.client = :iv_client
                WHERE rpz_i_guid <> '' AND zzsrm2_nottp = 'X' AND
                       EXISTS ( SELECT guid FROM  bbp_pdhgp WHERE
                           crmd_orderadm_h.guid = bbp_pdhgp.guid and
                           bbp_pdhgp.client = :iv_client AND
                           bbp_pdhgp.version_type = '' AND
                           bbp_pdhgp.doc_closed = '' );
*   Для позиции определяем СЗ в статусе  утверждено/опубликовано/на размещении с самой ранней датой создания,
*   где BBP_PDHSC-ZZSRM2_NOTTP = X (Закупка не состоялась)

    lt_rpz_reason = SELECT DISTINCT src_guid,rpz_i_guid,rpz_header, zzsrm2_notreas,zzsrm2_eu,
                              rank() over (partition BY pdhcf_rpz.rpz_i_guid order by  pdhcf_rpz.created_at asc ) as rank_rpz,
                              rank() over (partition BY pdhcf_rpz.src_guid order by  pdhcf_rpz.created_at asc ) as rank_lot
                          from :lt_pdhcf_rpz as pdhcf_rpz;
    if :iv_rep_type = '01' or :iv_rep_type =  '02' then
      lt_rpz_reason = select distinct * from :lt_rpz_reason where rank_rpz = 1;
    elseif :iv_rep_type = '03' then
      lt_rpz_reason = select distinct src_guid, rpz_i_guid, rpz_header, zzsrm2_notreas,zzsrm2_eu,
                                      rank_rpz, rank_lot
                                      from :lt_rpz_reason where rank_lot = 1;
    end if;

    et_rpf_reason = select distinct src_guid,rpz_i_guid, rpz_header, scon_rsnt.reason_txt as zzsrm2_rpf_reason_txt,
                                    zzsrm2_eu
                      from :lt_rpz_reason as bidi_free_reason_id
                      inner join zvsrm2_isconrsnt as scon_rsnt
                        on bidi_free_reason_id.zzsrm2_notreas = scon_rsnt.reason_id and
                           scon_rsnt.reason_type = '2' AND
                           scon_rsnt.langu = 'R'
                           ;

  ENDMETHOD.

  METHOD fill_rpf_reason_txt
      BY DATABASE PROCEDURE FOR HDB
      LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      USING zvsrm2_isconrsnt
     .
*   Для позиции определяем СЗ в статусе  утверждено/опубликовано/на размещении с самой ранней датой создания,
*   где BBP_PDHSC-ZZSRM2_NOTTP = X (Закупка не состоялась)

    lt_rpz_reason = select distinct src_guid,rpz_i_guid,rpz_header, zzsrm2_notreas,zzsrm2_eu,
                              rank() over (partition BY pdhcf_rpz.rpz_i_guid order by  pdhcf_rpz.created_at asc ) as rank_rpz,
                              rank() over (partition BY pdhcf_rpz.src_guid order by  pdhcf_rpz.created_at asc ) as rank_lot
                          from :it_pdhcf_rpz as pdhcf_rpz
                          where pdhcf_rpz.nottp  = 'X' AND
                                pdhcf_rpz.rpz_i_guid <> '';
    if :iv_rep_type = '01' or :iv_rep_type =  '02' then
      lt_rpz_reason = select distinct * from :lt_rpz_reason where rank_rpz = 1;
    elseif :iv_rep_type = '03' then
      lt_rpz_reason = select distinct src_guid, null as rpz_i_guid, null as rpz_header, zzsrm2_notreas,zzsrm2_eu,
                                      rank_rpz, rank_lot
                                      from :lt_rpz_reason where rank_lot = 1;
    end if;

    et_rpf_reason = select distinct src_guid,rpz_i_guid, rpz_header, scon_rsnt.reason_txt as zzsrm2_rpf_reason_txt,
                                    zzsrm2_eu
                      from :lt_rpz_reason as bidi_free_reason_id
                      inner join zvsrm2_isconrsnt as scon_rsnt
                        on bidi_free_reason_id.zzsrm2_notreas = scon_rsnt.reason_id and
                           scon_rsnt.reason_type = '2' AND
                           scon_rsnt.langu = 'R'
                           ;

  ENDMETHOD.


  METHOD filter_max_rows
       BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY.

    IF :iv_max_rows = 0 OR
     :iv_rep_type = '03' THEN
      et_rpz = SELECT *
                FROM :it_rpz;
      return;
    END if;

*   RPZ
    IF :iv_rep_type = '02' THEN
      et_rpz = SELECT top :iv_max_rows *
                from :it_rpz;
    elseif :iv_rep_type = '01' then
      et_rpz = select *
                from :it_rpz
                where guid_h in ( select top :iv_max_rows distinct guid_h
                                    from :it_rpz
                                     );
    END IF ;


  ENDMETHOD.

  METHOD get_data_sing_pp_o
    BY DATABASE PROCEDURE FOR HDB
    LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
    USING zvsrm2_i_pdhcf bbp_pdhsc crmd_orderadm_h bbp_pdhgp.

    lt_pdhcf_rpz = select DISTINCT zmpp_links.ilot_guid as src_guid, rpz_i_guid, zzsrm2_prot_date,  created_at
                from zvsrm2_i_pdhcf as pdhcf_rpz
                inner join :it_zmpp_links as zmpp_links
                 on zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                inner one to one join bbp_pdhsc
                    on pdhcf_rpz.guid_hi = bbp_pdhsc.guid and
                       bbp_pdhsc.client = :iv_client
                INNER ONE TO ONE JOIN crmd_orderadm_h
                    ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid  and
                       crmd_orderadm_h.client = :iv_client
                WHERE rpz_i_guid <> '' AND
                      EXISTS ( SELECT * FROM :it_reng_ind AS a WHERE a.rpz_i_guid = zmpp_links.rpz_i_guid and
                                                                     a.sz_guid = pdhcf_rpz.guid_hi ) and
                      exists ( select guid from  bbp_pdhgp where
                                       crmd_orderadm_h.guid = bbp_pdhgp.guid and
                                       bbp_pdhgp.client = :iv_client AND
                                       bbp_pdhgp.version_type = '' AND
                                       bbp_pdhgp.doc_closed = '' );

*   find ZZSRM2_DATA_SIGN_PP
    et_data_sing_pp = SELECT DISTINCT src_guid, pdhcf.rpz_i_guid, pdhcf.zzsrm2_prot_date,pdhcf.created_at
                        from :lt_pdhcf_rpz as pdhcf;

  endmethod.

  METHOD get_data_sing_pp
    BY DATABASE PROCEDURE FOR HDB
    LANGUAGE SQLSCRIPT OPTIONS READ-ONLY.

*   find ZZSRM2_DATA_SIGN_PP
    et_data_sing_pp = select DISTINCT src_guid, pdhcf.rpz_i_guid, pdhcf.zzsrm2_prot_date,pdhcf.created_at
                        from :it_pdhcf_rpz as pdhcf
                        inner join :it_reng_ind as reng_ind
                            on pdhcf.rpz_i_guid = reng_ind.rpz_i_guid and
                               pdhcf.zmpp_guid = reng_ind.sz_guid;

  endmethod.


  METHOD get_eish
    BY DATABASE PROCEDURE FOR HDB
    LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
    USING ztsrm2_eis_datah.

    lt_eis =
    select  zp.guid as hpur_guid, eis_datah.published_at,
          rank() over ( partition by zp.guid order by eis_datah.published_at asc ) as rank
      from :it_zp as zp
        inner join ztsrm2_eis_datah as eis_datah
          on zp.guid = eis_datah.object_guid and
             eis_datah.eis_active_version <> '00000000000000000000000000000000' and
             eis_change_version = '00000000000000000000000000000000' and
             object_type = 'NOTICE';

    et_eish = select  distinct hpur_guid, published_at
      from :lt_eis
      where rank = 1;

  endmethod.

  METHOD get_final_sz_o
      BY DATABASE PROCEDURE FOR HDB
      LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      USING zvsmr2_crbfinsz bbp_pdhsc
            crmd_link crmd_partner bbp_pdigp but000
            but053 crmd_orderadm_i ztsrm2_scon_rsnt bbp_pdhgp
            crmd_orderadm_h /srmpp/c_vat zvsrm2_i_pdhcf bbp_pdhsc crmd_orderadm_h
            ztsrm2_scon_type.


    lt_pdhcf_rpz = select DISTINCT zmpp_links.ilot_guid as src_guid, rpz_i_guid, rpz_header,  created_at,
                      pdhcf_rpz.guid_hi, pdhcf_rpz.zzsrm2_bitem_guid, pdhcf_rpz.zzsrm2_qitem_guid,
                      pdhcf_rpz.zzsrm2_acc_quantity,pdhcf_rpz.zzsrm2_bid_unit,pdhcf_rpz.zzsrm2_appr_value,
                      zmpp_links.ilot_i_guid, pdhcf_rpz.zzsrm2_rang,zzsrm2_reng,
                      pdhcf_rpz.zzsrm2_q_cp_guid, pdhcf_rpz.zzsrm2_rej, pdhcf_rpz.zzsrm2_rezerv, pdhcf_rpz.table_type, final, slpp_agr_guid, pdhcf_rpz.zzsrm2_bidi_decision_free,
                      pdhcf_rpz.zzsrm2_bidi_free_reason_id, pdhcf_hdr.zzsrm2_appr_value as zzsrm2_appr_value_hdr,
                      sz_pdhgp.currency as sz_currency, pdhcf_rpz.zzsrm2_parent_node
                from zvsrm2_i_pdhcf as pdhcf_rpz
                inner join :it_zmpp_links as zmpp_links
                 on zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                inner one to one join bbp_pdhsc
                    on pdhcf_rpz.guid_hi = bbp_pdhsc.guid and
                       bbp_pdhsc.client = :iv_client
                INNER ONE TO ONE JOIN crmd_orderadm_h
                    ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid  and
                       crmd_orderadm_h.client = :iv_client
                INNER JOIN bbp_pdhgp
                   ON pdhcf_rpz.guid_hi = bbp_pdhgp.guid and
                      bbp_pdhgp.client = :iv_client AND
                      bbp_pdhgp.version_type = '' AND
                      bbp_pdhgp.doc_closed = ''
                INNER ONE TO ONE JOIN ztsrm2_scon_type
                   ON bbp_pdhgp.subtype = ztsrm2_scon_type.subtype and
                      ztsrm2_scon_type.mandt = :iv_client
                INNER MANY TO MANY JOIN (
                    select guid_hi, sum( zzsrm2_appr_value ) AS zzsrm2_appr_value
                        FROM zvsrm2_i_pdhcf
                        WHERE client = :iv_client AND
                              table_type = 'THZSB'
                    GROUP BY guid_hi
                 ) AS pdhcf_hdr
                   ON pdhcf_hdr.guid_hi = pdhcf_rpz.guid_hi

                left many to one join bbp_pdhgp as sz_pdhgp
                      on sz_pdhgp.guid = pdhcf_rpz.guid_hi and
                         sz_pdhgp.client = :iv_client
                WHERE final = 'X' AND
                      pdhcf_rpz.zzsrm2_rang = 1 AND
                      pdhcf_rpz.table_type in ( 'THZSI', 'THZWQ' );

*   find suitable sz
    lt_final_sz = SELECT sz.*,
                         zmpp_data_zci.zzsrm2_bidi_decision_free,
                         zmpp_data_zci.zzsrm2_bidi_free_reason_id,
                         zmpp_data_zci.table_type,
                         qadm_pos.header as zzsrm2_quot_guid
*                         rank() over (partition BY sz.rpz_i_guid order by sz.created_at desc ) as rank
                    from ( select distinct _zmpp_data.guid_hi,
                                  _zmpp_data.zzsrm2_bitem_guid, _zmpp_data.zzsrm2_qitem_guid,
                                  _zmpp_data.zzsrm2_acc_quantity,_zmpp_data.zzsrm2_bid_unit,
                                  _zmpp_data.zzsrm2_appr_value,
                                  _zmpp_data.src_guid,
                                  _zmpp_data.rpz_i_guid,
                                  _zmpp_data.rpz_header,
                                  _zmpp_data.ilot_i_guid,
                                  _zmpp_data.zzsrm2_rang,
                                  _zmpp_data.zzsrm2_reng,
                                  _zmpp_data.zzsrm2_q_cp_guid,
                                  _zmpp_data.created_at,
                                  _zmpp_data.zzsrm2_rej,
                                  _zmpp_data.zzsrm2_rezerv,
                                  rank() over (partition BY _zmpp_data.rpz_i_guid order by _zmpp_data.created_at desc ) as rank,
                                  _zmpp_data.slpp_agr_guid,
                                  _zmpp_data.zzsrm2_appr_value_hdr,
                                  _zmpp_data.sz_currency,
                                  _zmpp_data.zzsrm2_parent_node
*                                  rank() over (partition BY _zmpp_data.rpz_i_guid order by _zmpp_data.zzsrm2_rezerv ASC, _zmpp_data.zzsrm2_rang ASC ) as rank_doc
                            from :lt_pdhcf_rpz as _zmpp_data
                            where _zmpp_data.final = 'X' AND
                                  _zmpp_data.table_type in ( 'THZSI', 'THZWQ' ) and
                                  _zmpp_data.zzsrm2_rang = 1
                                  ) AS sz
                    LEFT ONE TO ONE JOIN crmd_orderadm_i as qadm_pos
                      ON qadm_pos.guid = zzsrm2_qitem_guid AND
                         qadm_pos.client = :iv_client
                    left join :lt_pdhcf_rpz as zmpp_data_zci
                      ON sz.rpz_i_guid = zmpp_data_zci.rpz_i_guid
                      and zmpp_data_zci.table_type in ( 'THZCI', 'THZWP' )
                      and sz.guid_hi = zmpp_data_zci.guid_hi
                   where rank = 1
                          ;



    et_final_sz = select final_sz.guid_hi as guid, zzsrm2_acc_quantity, zzsrm2_bid_unit, zzsrm2_bitem_guid as bitem_guid, zzsrm2_quot_guid as quot_guid, zzsrm2_qitem_guid,
                          final_sz.zzsrm2_appr_value,
                         qpos.price, bpos.price_unit, qpos.price_unit as price_unit_q, qpos.currency, vat_pos.tax_per as zzsrm2_vat_code,
                         vat_pos_q.tax_per as zzsrm2_vat_code_q,
                         bpos.zzsrm2_initprice_gross, bpos.zzsrm2_initprice_netto as zzsrm2_initprice_netto,
                         bpos.currency as ilot_currency,
                          zzsrm2_bidi_free_reason_id,
                          r.partner_no as partner_guid, final_sz.src_guid,
*                       rpz item guid
                        rpz_i_guid as ppr_itm_guid,
                        rpz_header as ppr_header,
                        but053.partner2,
                        q_pdhsc.zzsrm2_com_submit_dt as zzsrm2_com_submit_dt,
                        q_pdhsc.zzsrm2_quot_type as zzsrm2_quot_type,
                        zzsrm2_rang, scon_rsnt.reason_txt as zzsrm2_bidi_free_reason_id_txt,
                        final_sz.zzsrm2_bidi_decision_free, final_sz.zzsrm2_q_cp_guid,
                        ---------bid data
                        bid_process_type, bid_guid,
                        final_sz.zzsrm2_reng,
                        slpp_agr_guid,
                        final_sz.zzsrm2_appr_value_hdr as zzsrm2_appr_value_hdr,
                        sz_currency,
                        final_sz.zzsrm2_parent_node
                    from :lt_final_sz as final_sz
                      left join zvsmr2_crbfinsz as qpos
                        on  qpos.guid = final_sz.zzsrm2_qitem_guid
                          and qpos.client = :iv_client
                      LEFT JOIN zvsmr2_crbfinsz as bpos
                          ON bpos.guid = final_sz.ilot_i_guid
                          and bpos.client = :iv_client
                      LEFT JOIN  "/SRMPP/C_VAT" as vat_pos
                        ON bpos.client = vat_pos.mandt and
                           bpos.vat_code = vat_pos.vat_code
                      left join "/SRMPP/C_VAT" as vat_pos_q
                        on qpos.client = vat_pos_q.mandt and
                           qpos.zzsrm2_vat_code = vat_pos_q.vat_code
                       ------------------------winner header
                       left join bbp_pdhsc as q_pdhsc
                        on qpos.header = q_pdhsc.guid
                       ------------------------bid document
                       left join ( select q_pdhgp.guid as q_guid, process_type as bid_process_type,
                                          bid_orderadm_h.guid as bid_guid
                                    from  bbp_pdhgp as q_pdhgp
                                      inner join crmd_orderadm_h as bid_orderadm_h
                                        on q_pdhgp.src_guid = bid_orderadm_h.guid and
                                           q_pdhgp.src_object_type = 'BUS2200'
                                            ) as bid_header
                        ON q_pdhsc.guid = bid_header.q_guid
*                      ************************find winners
                        left join crmd_link as lk_part
                          on lk_part.guid_hi = final_sz.zzsrm2_quot_guid
                         and lk_part.objtype_hi = '05'
                         AND lk_part.objtype_set = '07'
                         AND lk_part.client = :iv_client
                        LEFT JOIN crmd_partner AS r
                          ON r.guid = lk_part.guid_set
                         and partner_fct = '00000018'
                         and r.client = :iv_client
                        LEFT JOIN bbp_pdigp as gp
                          ON gp.guid = final_sz.zzsrm2_bitem_guid
                        left join (
                          select  but000.partner_guid, partner2
                            from but053 as but053
                            inner join but000
                              on but053.partner1 = but000.partner and
                                 but053.client = but000.client
                            where reltyp = 'ZZ0004' and
                                  but053.client = :iv_client
                           ) as but053
                        ON but053.partner_guid = r.partner_no
                       left join ztsrm2_scon_rsnt as scon_rsnt
                        on scon_rsnt.mandt = :iv_client AND
                           scon_rsnt.reason_id = final_sz.zzsrm2_bidi_free_reason_id and
                           scon_rsnt.langu = 'R' AND
                           scon_rsnt.reason_type = '4'

                        ;

  ENDMETHOD.

  METHOD get_final_sz
      BY DATABASE PROCEDURE FOR HDB
      LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      USING zvsmr2_crbfinsz bbp_pdhsc
            crmd_link crmd_partner bbp_pdigp but000
            but053 crmd_orderadm_i ztsrm2_scon_rsnt bbp_pdhgp
            crmd_orderadm_h /srmpp/c_vat.


*   find suitable sz
    lt_final_sz = select sz.*,
                         zmpp_data_zci.zzsrm2_bidi_decision_free,
                         zmpp_data_zci.zzsrm2_bidi_free_reason_id,
                         zmpp_data_zci.table_type,
                         qadm_pos.header as zzsrm2_quot_guid,
                         sz_pdhgp.currency as sz_currency
*                         rank() over (partition BY sz.rpz_i_guid order by sz.created_at desc ) as rank
                    from ( select distinct _zmpp_data.guid_hi,
                                  _zmpp_data.zzsrm2_bitem_guid, _zmpp_data.zzsrm2_qitem_guid,
                                  _zmpp_data.zzsrm2_acc_quantity,_zmpp_data.zzsrm2_bid_unit,
                                  _zmpp_data.zzsrm2_appr_value,
                                  _zmpp_data.src_guid,
                                  _zmpp_data.rpz_i_guid,
                                  _zmpp_data.rpz_header,
                                  _zmpp_data.ilot_i_guid,
                                  _zmpp_data.zzsrm2_rang,
                                  _zmpp_data.zzsrm2_reng,
                                  _zmpp_data.zzsrm2_q_cp_guid,
                                  _zmpp_data.created_at,
                                  _zmpp_data.zzsrm2_rej,
                                  _zmpp_data.zzsrm2_rezerv,
                                  rank() over (partition BY _zmpp_data.rpz_i_guid order by _zmpp_data.created_at desc ) as rank,
                                  _zmpp_data.slpp_agr_guid
*                                  rank() over (partition BY _zmpp_data.rpz_i_guid order by _zmpp_data.zzsrm2_rezerv ASC, _zmpp_data.zzsrm2_rang ASC ) as rank_doc
                            from :it_pdhcf_rpz as _zmpp_data
                            where _zmpp_data.final = 'X' AND
                                  _zmpp_data.table_type in ( 'THZSI', 'THZWQ' ) and
                                  _zmpp_data.zzsrm2_rang = 1
                                  ) AS sz
                    LEFT ONE TO ONE JOIN crmd_orderadm_i as qadm_pos
                      ON qadm_pos.guid = zzsrm2_qitem_guid AND
                         qadm_pos.client = :iv_client
                    LEFT MANY TO ONE JOIN bbp_pdhgp AS sz_pdhgp
                      ON sz_pdhgp.guid = sz.guid_hi and
                         sz_pdhgp.client = :iv_client
                    left join :it_pdhcf_rpz as zmpp_data_zci
                      ON sz.rpz_i_guid = zmpp_data_zci.rpz_i_guid
                      and zmpp_data_zci.table_type in ( 'THZCI', 'THZWP' )
                      and sz.guid_hi = zmpp_data_zci.guid_hi
                   where rank = 1
                          ;



    et_final_sz = select final_sz.guid_hi as guid, zzsrm2_acc_quantity, zzsrm2_bid_unit, zzsrm2_bitem_guid as bitem_guid, zzsrm2_quot_guid as quot_guid, zzsrm2_qitem_guid,
                          final_sz.zzsrm2_appr_value,
                         qpos.price, bpos.price_unit, qpos.price_unit as price_unit_q, qpos.currency, vat_pos.tax_per as zzsrm2_vat_code,
                         vat_pos_q.tax_per as zzsrm2_vat_code_q,
                         bpos.zzsrm2_initprice_gross, bpos.zzsrm2_initprice_netto as zzsrm2_initprice_netto,
                         bpos.currency as ilot_currency,
                          zzsrm2_bidi_free_reason_id,
                          r.partner_no as partner_guid, final_sz.src_guid,
*                       rpz item guid
                        rpz_i_guid as ppr_itm_guid,
                        rpz_header as ppr_header,
                        but053.partner2,
                        q_pdhsc.zzsrm2_com_submit_dt as zzsrm2_com_submit_dt,
                        q_pdhsc.zzsrm2_quot_type as zzsrm2_quot_type,
                        zzsrm2_rang, scon_rsnt.reason_txt as zzsrm2_bidi_free_reason_id_txt,
                        final_sz.zzsrm2_bidi_decision_free, final_sz.zzsrm2_q_cp_guid,
                        ---------bid data
                        bid_process_type, bid_guid,
                        final_sz.zzsrm2_reng,
                        slpp_agr_guid,
                        null as zzsrm2_appr_value_hdr,
                        null as sz_currency,
                        null as zzsrm2_parent_node
                    from :lt_final_sz as final_sz
                      left join zvsmr2_crbfinsz as qpos
                        on  qpos.guid = final_sz.zzsrm2_qitem_guid
                          and qpos.client = :iv_client
                      LEFT JOIN zvsmr2_crbfinsz as bpos
                          ON bpos.guid = final_sz.ilot_i_guid
                          and bpos.client = :iv_client
                      LEFT JOIN  "/SRMPP/C_VAT" as vat_pos
                        ON bpos.client = vat_pos.mandt and
                           bpos.vat_code = vat_pos.vat_code
                      left join "/SRMPP/C_VAT" as vat_pos_q
                        on qpos.client = vat_pos_q.mandt and
                           qpos.zzsrm2_vat_code = vat_pos_q.vat_code
                       ------------------------winner header
                       left join bbp_pdhsc as q_pdhsc
                        on qpos.header = q_pdhsc.guid
                       ------------------------bid document
                       left join ( select q_pdhgp.guid as q_guid, process_type as bid_process_type,
                                          bid_orderadm_h.guid as bid_guid
                                    from  bbp_pdhgp as q_pdhgp
                                      inner join crmd_orderadm_h as bid_orderadm_h
                                        on q_pdhgp.src_guid = bid_orderadm_h.guid and
                                           q_pdhgp.src_object_type = 'BUS2200'  ) as bid_header
                        ON q_pdhsc.guid = bid_header.q_guid
*                      ************************find winners
                        left join crmd_link as lk_part
                          on lk_part.guid_hi = final_sz.zzsrm2_quot_guid
                         and lk_part.objtype_hi = '05'
                         AND lk_part.objtype_set = '07'
                         AND lk_part.client = :iv_client
                        LEFT JOIN crmd_partner AS r
                          ON r.guid = lk_part.guid_set
                         and partner_fct = '00000018'
                         and r.client = :iv_client
                        left join bbp_pdigp as gp
                          ON gp.guid = final_sz.zzsrm2_bitem_guid
                        left join (
                          select  but000.partner_guid, partner2
                            from but053 as but053
                            inner join but000
                              on but053.partner1 = but000.partner
                            where reltyp = 'ZZ0004'
                           ) as but053
                        on but053.partner_guid = r.partner_no
                       left join ztsrm2_scon_rsnt as scon_rsnt
                        on scon_rsnt.mandt = :iv_client AND
                           scon_rsnt.reason_id = final_sz.zzsrm2_bidi_free_reason_id and
                           scon_rsnt.langu = 'R' AND
                           scon_rsnt.reason_type = '4'

                        ;


  ENDMETHOD.


  METHOD get_ksm
     BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
       USING zvsrm2_klah_kssk swor klah.

*   find all levels
    lt_data = select klh.CLASS as class_orig,
                     klh.clint as ksmk_orig,
              klah_kssk1.CLASS as ksmk1,
              klah_kssk1.clint as ksmk_clint1,
              klah_kssk2.CLASS as ksmk2,
              klah_kssk2.clint as ksmk2_clint,
              klah_kssk3.CLASS as ksmk3,
              klah_kssk3.clint as ksmk3_clint,
              klah_kssk4.CLASS as ksmk4,
              klah_kssk4.clint as ksmk4_clint,
              klah_kssk5.CLASS as ksmk5,
              klah_kssk5.clint as ksmk5_clint,
              klah_kssk6.CLASS as ksmk6,
              klah_kssk6.clint as ksmk6_clint,
              klah_kssk7.CLASS as ksmk7,
              klah_kssk7.clint as ksmk7_clint,
              klah_kssk8.CLASS as ksmk8,
              klah_kssk8.clint as ksmk8_clint,
              klah_kssk9.CLASS as ksmk9,
              klah_kssk9.clint as ksmk9_clint,
              klah_kssk10.CLASS as ksmk10,
              klah_kssk10.clint as ksmk10_clint,
              klah_kssk11.CLASS as ksmk11,
              klah_kssk11.clint as ksmk11_clint,
     CASE  when klah_kssk11.clint <> '' then 11
           when klah_kssk10.clint <> '' then 10
           when klah_kssk9.clint <> '' then 9
           when klah_kssk8.clint <> '' then 8
           when klah_kssk7.clint <> '' then 7
           when klah_kssk6.clint <> '' then 6
           when klah_kssk5.clint <> '' then 5
           when klah_kssk4.clint <> '' then 4
           when klah_kssk3.clint <> '' then 3
           when klah_kssk2.clint <> '' then 2
           when klah_kssk1.clint <> '' then 1
      end as ksmk_ind
    from klah as klh
    left join zvsrm2_klah_kssk as klah_kssk1
      on klah_kssk1.objek = klh.clint and
         klah_kssk1.mandt = :iv_client
    left join zvsrm2_klah_kssk as klah_kssk2
      ON klah_kssk2.objek = klah_kssk1.clint and
         klah_kssk2.mandt = :iv_client
    left join zvsrm2_klah_kssk as klah_kssk3
      ON klah_kssk3.objek = klah_kssk2.clint and
         klah_kssk3.mandt = :iv_client
    left join zvsrm2_klah_kssk as klah_kssk4
      ON klah_kssk4.objek = klah_kssk3.clint and
         klah_kssk4.mandt = :iv_client
    left join zvsrm2_klah_kssk as klah_kssk5
      ON klah_kssk5.objek = klah_kssk4.clint and
         klah_kssk5.mandt = :iv_client
    left join zvsrm2_klah_kssk as klah_kssk6
      ON klah_kssk6.objek = klah_kssk5.clint and
         klah_kssk6.mandt = :iv_client
    left join zvsrm2_klah_kssk as klah_kssk7
      ON klah_kssk7.objek = klah_kssk6.clint and
         klah_kssk7.mandt = :iv_client
    left join zvsrm2_klah_kssk as klah_kssk8
      ON klah_kssk8.objek = klah_kssk7.clint and
         klah_kssk8.mandt = :iv_client
    left join zvsrm2_klah_kssk as klah_kssk9
      ON klah_kssk9.objek = klah_kssk8.clint and
         klah_kssk9.mandt = :iv_client
    left join zvsrm2_klah_kssk as klah_kssk10
      ON klah_kssk10.objek = klah_kssk9.clint and
         klah_kssk10.mandt = :iv_client
    left join zvsrm2_klah_kssk as klah_kssk11
      ON klah_kssk11.objek = klah_kssk10.clint and
         klah_kssk11.mandt = :iv_client
    where klh.CLASS in
    ( SELECT DISTINCT zz0011
        FROM :it_rpz
    ) AND
      klh.mandt = :iv_client;

    IF is_empty(:lt_data) THEN
      return;
    END if;

*   create table with class_orig, ksmk, ksmk_clint, level
    lt_hierachy = SELECT class_orig, ksmk_orig, ksmk1 as ksmk, ksmk_clint1 as ksmk_clint, 1 as level
                    FROM :lt_data AS klh
                  UNION
                  SELECT class_orig, ksmk_orig, ksmk2 as ksmk, ksmk2_clint as ksmk_clint, 2 as level
                    FROM :lt_data AS klh
                  UNION
                  SELECT class_orig, ksmk_orig, ksmk3 as ksmk, ksmk3_clint as ksmk_clint, 3 as level
                    FROM :lt_data AS klh
                  UNION
                  SELECT class_orig, ksmk_orig, ksmk4 as ksmk, ksmk4_clint as ksmk_clint, 4 as level
                    FROM :lt_data AS klh
                  UNION
                  SELECT class_orig, ksmk_orig, ksmk5 as ksmk, ksmk5_clint as ksmk_clint, 5 as level
                    FROM :lt_data AS klh
                  UNION
                  SELECT class_orig, ksmk_orig, ksmk6 as ksmk, ksmk6_clint as ksmk_clint, 6 as level
                    FROM :lt_data AS klh
                  UNION
                  SELECT class_orig, ksmk_orig, ksmk7 as ksmk, ksmk7_clint as ksmk_clint, 7 as level
                    FROM :lt_data AS klh
                  UNION
                  SELECT class_orig, ksmk_orig, ksmk8 as ksmk, ksmk8_clint as ksmk_clint, 8 as level
                    FROM :lt_data AS klh
                  UNION
                  SELECT class_orig, ksmk_orig, ksmk9 as ksmk, ksmk9_clint as ksmk_clint, 9 as level
                    FROM :lt_data AS klh
                  UNION
                  SELECT class_orig, ksmk_orig, ksmk10 as ksmk, ksmk10_clint as ksmk_clint, 10 as level
                    FROM :lt_data AS klh
                  UNION
                  SELECT class_orig, ksmk_orig, ksmk10 as ksmk, ksmk10_clint as ksmk_clint, 11 as level
                    FROM :lt_data AS klh
                     ;
*   exclude empty levels
    lt_levels = SELECT class_orig, ksmk_orig, ksmk, ksmk_clint,  level,
                         rank() over (partition BY class_orig order by level desc ) as rank
                    FROM :lt_hierachy
                    WHERE ksmk <> '' AND
                          class_orig <> '' AND
                          ksmk <> '00-000000';

    et_ksm = SELECT level1.class_orig as class, level1.ksmk,sw1.kschl,
                    level2.ksmk as ksmk2, sw2.kschl as kschl2
              from :lt_levels as level1
                inner join swor as sw1
                  on sw1.clint = level1.ksmk_clint
                left join :lt_levels as level2
                  on level1.class_orig = level2.class_orig and
                     level2.rank = 2
                LEFT JOIN swor AS sw2
                  ON sw2.clint = level2.ksmk_clint
              where level1.rank = 1;
*   join with empty origate class
    et_ksm = SELECT class, ksmk, kschl, ksmk2,kschl2
                FROM :et_ksm
             UNION
             SELECT class_orig AS class, class_orig AS ksmk, kschl, '', ''
              FROM :lt_data
              INNER JOIN swor as sw1
                ON sw1.clint = ksmk_orig
              WHERE ksmk1 = '00-000000' AND
                    class_orig <> '' AND
                    ksmk_orig <> '';

  ENDMETHOD.

  METHOD get_last_fin_sz_o BY DATABASE PROCEDURE FOR HDB
      LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      USING ztsrm2_scon_rsnt zvsrm2_i_pdhcf bbp_pdhgp ztsrm2_scon_type crmd_orderadm_h bbp_pdhsc.

    lt_pdhcf_rpz = SELECT DISTINCT zmpp_links.ilot_guid AS src_guid,rpz_i_guid, rpz_header,
                                   pdhcf_rpz.guid_hi, table_type, crmd_orderadm_h.created_at, zzsrm2_bidi_free_reason_id, zzsrm2_bidi_decision_free,
                                   orderadm_h_ans.process_type AS con_process_type
                       FROM :it_zmpp_links as zmpp_links
                       INNER JOIN zvsrm2_i_pdhcf AS pdhcf_rpz
                           ON pdhcf_rpz.zzsrm2_bitem_guid = zmpp_links.zzsrm2_bitem_guid
*                       INNER JOIN zvsrm2_crbpdhcf AS pdhcf
*                         ON pdhcf_rpz.guid_hi = pdhcf.guid_hi and
*                            pdhcf.client = :iv_client  AND
*                            pdhcf.zzsrm2_bitem_guid = zmpp_links.zzsrm2_bitem_guid
                       INNER JOIN bbp_pdhgp
                           ON pdhcf_rpz.guid_hi = bbp_pdhgp.guid AND
                              bbp_pdhgp.client = :iv_client AND
                              bbp_pdhgp.doc_closed = '' AND
                              bbp_pdhgp.version_type = ''
                       INNER ONE TO ONE JOIN crmd_orderadm_h
                           ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid  AND
                              crmd_orderadm_h.client = :iv_client
                       INNER ONE TO ONE JOIN bbp_pdhsc
                           ON crmd_orderadm_h.guid = bbp_pdhsc.guid AND
                              bbp_pdhsc.client = :iv_client
                       INNER ONE TO ONE JOIN crmd_orderadm_h AS orderadm_h_ans
                           ON bbp_pdhsc.zzsrm2_src_bid = orderadm_h_ans.guid AND
                              orderadm_h_ans.client = :iv_client
                       INNER JOIN ztsrm2_scon_type
                           ON bbp_pdhgp.subtype = ztsrm2_scon_type.subtype AND
                              ztsrm2_scon_type.mandt = :iv_client AND
                              final = 'X'
                       WHERE ( rpz_i_guid <> '00000000000000000000000000000000' OR
                             rpz_i_guid <> '' ) AND
                             table_type IN ( 'THZSI', 'THZCI', 'THZWP', 'THZWQ' )
                              ;

    lt_last_fin_sz = SELECT DISTINCT
                                  _zmpp_data.src_guid,
                                  _zmpp_data.rpz_i_guid,
                                  _zmpp_data.rpz_header,
                                  _zmpp_data.guid_hi,
                                  con_process_type,
                                  rank() over (partition BY _zmpp_data.rpz_i_guid order by _zmpp_data.created_at desc ) as rank
                            FROM :lt_pdhcf_rpz as _zmpp_data
                            WHERE _zmpp_data.table_type IN ( 'THZSI', 'THZCI', 'THZWP', 'THZWQ' )
                                  ;
*   find suitable sz
    et_last_fin_sz = SELECT sz.src_guid, sz.rpz_i_guid, sz.rpz_header, sz.zzsrm2_bidi_free_reason_id,
                            scon_rsnt.reason_txt as zzsrm2_bidi_free_reason_id_txt, zzsrm2_bidi_decision_free,
                            con_process_type AS con_process_type
                    FROM ( SELECT DISTINCT
                                  _zmpp_data.src_guid,
                                  _zmpp_data.rpz_i_guid,
                                  _zmpp_data.rpz_header,
                                  zmpp_data_zci.zzsrm2_bidi_free_reason_id,
                                  zmpp_data_zci.zzsrm2_bidi_decision_free,
                                  _zmpp_data.con_process_type
                            FROM :lt_last_fin_sz as _zmpp_data
                            LEFT ONE TO ONE JOIN :lt_pdhcf_rpz as zmpp_data_zci
                              ON _zmpp_data.rpz_i_guid = zmpp_data_zci.rpz_i_guid
                              AND zmpp_data_zci.table_type IN ( 'THZCI', 'THZWP' )
                              AND _zmpp_data.guid_hi = zmpp_data_zci.guid_hi
*                            LEFT JOIN crmd_orderadm_h AS orderadm_h
*                              ON _zmpp_data.con_guid = orderadm_h.guid
                            WHERE _zmpp_data.rank = 1
                                  ) AS sz
                   LEFT ONE TO ONE JOIN ztsrm2_scon_rsnt as scon_rsnt
                        ON scon_rsnt.mandt = :iv_client AND
                           scon_rsnt.reason_id = sz.zzsrm2_bidi_free_reason_id AND
                           scon_rsnt.langu = 'R' AND
                           scon_rsnt.reason_type = '4' AND
                           sz.zzsrm2_bidi_free_reason_id <> '';

  ENDMETHOD.

  METHOD get_last_fin_sz BY DATABASE PROCEDURE FOR HDB
      LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      USING ztsrm2_scon_rsnt crmd_orderadm_h.

    lt_last_fin_sz = SELECT DISTINCT
                                  _zmpp_data.src_guid,
                                  _zmpp_data.rpz_i_guid,
                                  _zmpp_data.rpz_header,
                                  _zmpp_data.guid_hi,
                                  _zmpp_data.con_guid,
                                  rank() over (partition BY _zmpp_data.rpz_i_guid order by _zmpp_data.created_at desc ) as rank
                            FROM :it_pdhcf_rpz as _zmpp_data
                            WHERE _zmpp_data.final = 'X' AND
                                  _zmpp_data.table_type IN ( 'THZSI', 'THZCI', 'THZWP', 'THZWQ' )
                                  ;

*   find suitable sz
    et_last_fin_sz = SELECT sz.src_guid, sz.rpz_i_guid, sz.rpz_header, sz.zzsrm2_bidi_free_reason_id,
                            scon_rsnt.reason_txt as zzsrm2_bidi_free_reason_id_txt, zzsrm2_bidi_decision_free,
                            con_process_type
                    FROM ( SELECT DISTINCT
                                  _zmpp_data.src_guid,
                                  _zmpp_data.rpz_i_guid,
                                  _zmpp_data.rpz_header,
                                  zmpp_data_zci.zzsrm2_bidi_free_reason_id,
                                  zmpp_data_zci.zzsrm2_bidi_decision_free,
                                  orderadm_h.process_type AS con_process_type
                            FROM :lt_last_fin_sz as _zmpp_data
                            LEFT ONE TO ONE JOIN :it_pdhcf_rpz as zmpp_data_zci
                              ON _zmpp_data.rpz_i_guid = zmpp_data_zci.rpz_i_guid
                              AND zmpp_data_zci.table_type IN ( 'THZCI', 'THZWP' )
                              AND _zmpp_data.guid_hi = zmpp_data_zci.guid_hi
                            LEFT JOIN crmd_orderadm_h AS orderadm_h
                              ON _zmpp_data.con_guid = orderadm_h.guid
                            WHERE _zmpp_data.rank = 1
                                  ) AS sz
                   LEFT ONE TO ONE JOIN ztsrm2_scon_rsnt as scon_rsnt
                        ON scon_rsnt.mandt = :iv_client AND
                           scon_rsnt.reason_id = sz.zzsrm2_bidi_free_reason_id AND
                           scon_rsnt.langu = 'R' AND
                           scon_rsnt.reason_type = '4' AND
                           sz.zzsrm2_bidi_free_reason_id <> '';

  ENDMETHOD.


  METHOD get_reng_ind_no_o
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING zvsrm2_i_pdhcf bbp_pdhsc crmd_orderadm_h bbp_pdhgp
      .

    lt_pdhcf_rpz = SELECT DISTINCT zmpp_links.ilot_guid AS src_guid, rpz_i_guid, rpz_header,  pdhcf_rpz.guid_hi AS zmpp_guid, created_at,
                          table_type, zzsrm2_reng, zzsrm2_rang, zzsrm2_bidi_free_reason_id,
                          rank() over (partition BY zmpp_links.rpz_i_guid  order by  crmd_orderadm_h.created_at DESC ) as rank_last
                    FROM zvsrm2_i_pdhcf AS pdhcf_rpz
                    INNER JOIN :it_zmpp_links AS zmpp_links
                     ON zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                    INNER ONE TO ONE JOIN bbp_pdhsc
                        ON pdhcf_rpz.guid_hi = bbp_pdhsc.guid AND
                           bbp_pdhsc.client = :iv_client
                    INNER ONE TO ONE JOIN crmd_orderadm_h
                        ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid AND
                           crmd_orderadm_h.client = :iv_client
*                    INNER ONE TO ONE JOIN bbp_pdhgp
*                        ON crmd_orderadm_h.guid = bbp_pdhgp.guid AND
*                           bbp_pdhgp.client = :iv_client
                    WHERE table_type IN (  'THZWP', 'THZSI', 'THZCI', 'THZWQ'  )  AND
                          rpz_i_guid <> '' AND
                          EXISTS ( SELECT guid FROM  bbp_pdhgp WHERE
                                                               crmd_orderadm_h.guid = bbp_pdhgp.guid AND
                                                               bbp_pdhgp.client = :iv_client AND
                                                               bbp_pdhgp.version_type = '' AND
                                                               bbp_pdhgp.doc_closed = '' );


*   fill last zmpp
    et_last_zmpp = select distinct src_guid, pdhcf.rpz_i_guid, pdhcf.rpz_header, pdhcf.zmpp_guid as zmpp_guid
                          from :lt_pdhcf_rpz as pdhcf
                            where rank_last = 1 and
                                  pdhcf.rpz_i_guid <> '';


*   BBP_PDHSС-ZZSRM2_RENG = пусто, тогда выводить "Нет"
*   fing positions to these reng empty
    lt_reng_empty_pos = select src_guid, reng_empty.rpz_i_guid
                          from :lt_pdhcf_rpz as reng_empty
                          where reng_empty.zzsrm2_reng = '' AND
                                reng_empty.table_type in ( 'THZCI', 'THZWP' ) and
                                reng_empty.rank_last = 1 AND
                                reng_empty.rpz_i_guid <> ''
                          group by src_guid, reng_empty.rpz_i_guid
                                ;


*   , иначе если BBP_PDHSС-ZZSRM2_RENG <> «Пусто»,
*   то в CRMD_LINK находим GUID_SET (где OBJTYPE_HI = 05 и OBJTYPE_SET = 78) по значению GUID_HI = GUID СЗ ,
*   далее производим выборку по параметрам BBP_PDHCF-SET_GUID =  CRMD_LINK-GUID_SET, (TABLE_TYPE = THZCI или
*   TABLE_TYPE = THZSI), (ZZSRM2_RANG = 1 или ZSRM2_BIDI_FREE_REASON_ID <> «Пусто») - если в выборке есть записи,
*   связанные с целевой позицией, то указываем в поле отчета «Нет», иначе – «Да»
    lt_reng = select distinct src_guid, pdhcf.rpz_i_guid
                from :lt_pdhcf_rpz as pdhcf
              where pdhcf.zzsrm2_reng <> '' and
                    pdhcf.table_type in ( 'THZSI', 'THZCI', 'THZWP', 'THZWQ' )
                    and
                    ( pdhcf.zzsrm2_rang = 1 or (  pdhcf.zzsrm2_bidi_free_reason_id <> '' and
                      pdhcf.zzsrm2_bidi_free_reason_id <> '7' )
                        ) and
                    NOT EXISTS ( select rpz_i_guid from :lt_reng_empty_pos AS c WHERE c.rpz_i_guid = pdhcf.rpz_i_guid ) AND
                    pdhcf.rank_last = 1 AND
                    pdhcf.rpz_i_guid <> ''
                    ;

    et_reng_ind = select src_guid as src_guid, rpz_i_guid as rpz_i_guid
                      from :lt_reng_empty_pos
                      union
                        select src_guid, rpz_i_guid
                         from :lt_reng;

  ENDMETHOD.

  METHOD get_reng_ind_no
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      .

*   fill last zmpp
    et_last_zmpp = select distinct src_guid, pdhcf.rpz_i_guid, pdhcf.rpz_header, pdhcf.zmpp_guid as zmpp_guid
                          from :it_pdhcf_rpz as pdhcf
                            where rank_last = 1 and
                                  pdhcf.rpz_i_guid <> '';


*   BBP_PDHSС-ZZSRM2_RENG = пусто, тогда выводить "Нет"
*   fing positions to these reng empty
    lt_reng_empty_pos = select src_guid, reng_empty.rpz_i_guid
                          from :it_pdhcf_rpz as reng_empty
*                            inner join :lt_pdhcf_max as pdhcf_max
*                              on reng_empty.rpz_i_guid = pdhcf_max.rpz_i_guid and
*                                 reng_empty.created_at = pdhcf_max.created_at
                          where reng_empty.zzsrm2_reng = '' AND
                                reng_empty.table_type in ( 'THZCI', 'THZWP' ) and
                                reng_empty.rank_last = 1 AND
                                reng_empty.rpz_i_guid <> ''
                          group by src_guid, reng_empty.rpz_i_guid
                                ;



*   , иначе если BBP_PDHSС-ZZSRM2_RENG <> «Пусто»,
*   то в CRMD_LINK находим GUID_SET (где OBJTYPE_HI = 05 и OBJTYPE_SET = 78) по значению GUID_HI = GUID СЗ ,
*   далее производим выборку по параметрам BBP_PDHCF-SET_GUID =  CRMD_LINK-GUID_SET, (TABLE_TYPE = THZCI или
*   TABLE_TYPE = THZSI), (ZZSRM2_RANG = 1 или ZSRM2_BIDI_FREE_REASON_ID <> «Пусто») - если в выборке есть записи,
*   связанные с целевой позицией, то указываем в поле отчета «Нет», иначе – «Да»
    lt_reng = select distinct src_guid, pdhcf.rpz_i_guid
                from :it_pdhcf_rpz as pdhcf
*                  inner join :lt_pdhcf_rpz as pdhcf_max
*                    on pdhcf.rpz_i_guid = pdhcf_max.rpz_i_guid and
*                       pdhcf.created_at = pdhcf_max.created_at
              where pdhcf.zzsrm2_reng <> '' and
                    pdhcf.table_type in ( 'THZSI', 'THZCI', 'THZWP', 'THZWQ' )
                    and
                    ( pdhcf.zzsrm2_rang = 1 or (  pdhcf.zzsrm2_bidi_free_reason_id <> '' and
                      pdhcf.zzsrm2_bidi_free_reason_id <> '7' )
                        ) and
                    pdhcf.rpz_i_guid not in ( select rpz_i_guid from :lt_reng_empty_pos ) and
                    pdhcf.rank_last = 1 AND
                    pdhcf.rpz_i_guid <> ''
                    ;

    et_reng_ind = select src_guid as src_guid, rpz_i_guid as rpz_i_guid
                      from :lt_reng_empty_pos
                      union
                        select src_guid, rpz_i_guid
                         from :lt_reng;


  endmethod.


  METHOD get_reng_ind_yes_rpz_pos_o
    BY DATABASE PROCEDURE FOR HDB
    LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
    USING zvsrm2_i_pdhcf crmd_orderadm_h bbp_pdhgp bbp_pdhsc.

*   Определяем все СЗ, связанные с позицией, для которых BBP_PDHSС-ZZSRM2_RENG <> «Пусто».
*   каждого СЗ значения в полях
    et_reng_ind = SELECT DISTINCT rpz_i_guid, sz_guid, zzsrm2_prot_date, created_at,zzsrm2_reng
                    FROM
                     ( select rpz_i_guid, pdhcf_rpz.zmpp_guid as sz_guid,created_at, pdhcf_rpz.zzsrm2_prot_date,zzsrm2_reng,
                        rank() over (partition BY pdhcf_rpz.rpz_i_guid order by pdhcf_rpz.created_at desc ) as rank
                        from ( SELECT DISTINCT rpz_i_guid, pdhcf_rpz.guid_hi AS zmpp_guid, created_at, bbp_pdhsc.zzsrm2_prot_date,
                                               zzsrm2_reng
                                FROM zvsrm2_i_pdhcf AS pdhcf_rpz
                                INNER JOIN :it_zmpp_links AS zmpp_links
                                 ON zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                                INNER ONE TO ONE JOIN bbp_pdhsc
                                    ON pdhcf_rpz.guid_hi = bbp_pdhsc.guid AND
                                       bbp_pdhsc.client = :iv_client
                                INNER ONE TO ONE JOIN crmd_orderadm_h
                                    ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid AND
                                       crmd_orderadm_h.client = :iv_client
                                INNER ONE TO ONE JOIN bbp_pdhgp
                                    ON crmd_orderadm_h.guid = bbp_pdhgp.guid AND
                                       bbp_pdhgp.client = :iv_client AND
                                       bbp_pdhgp.version_type = '' AND
                                       bbp_pdhgp.doc_closed = ''
*                                INNER ONE TO ONE JOIN ztsrm2_scon_type
*                                    ON bbp_pdhgp.subtype = ztsrm2_scon_type.subtype AND
*                                       ztsrm2_scon_type.mandt = :iv_client
                                WHERE table_type IN ( 'THZSI', 'THZCI', 'THZSB'  )  AND
                                     rpz_i_guid <> '' AND zzsrm2_reng <> '' AND bbp_pdhgp.subtype not in ( 'SL', 'SK' )
                        ) AS pdhcf_rpz
                               )
                    where rank = 1 and
                         NOT EXISTS (  select guid
                                        from :it_final_sz_guids AS sz_guids
                                        WHERE sz_guids.guid = rpz_i_guid )
                    ;

  ENDMETHOD.

  METHOD get_reng_ind_yes_rpz_pos
    BY DATABASE PROCEDURE FOR HDB
    LANGUAGE SQLSCRIPT OPTIONS READ-ONLY.

*   Определяем все СЗ, связанные с позицией, для которых BBP_PDHSС-ZZSRM2_RENG <> «Пусто».
*   каждого СЗ значения в полях
    et_reng_ind = select DISTINCT rpz_i_guid, sz_guid, NULL AS zzsrm2_prot_date, NULL as created_at, NULL as zzsrm2_reng
                    FROM
                     ( select rpz_i_guid, pdhcf_rpz.zmpp_guid as sz_guid,
                        rank() over (partition BY pdhcf_rpz.rpz_i_guid order by pdhcf_rpz.created_at desc ) as rank
                        from ( select distinct rpz_i_guid, zmpp_guid, created_at
                                from :it_pdhcf_rpz where table_type in ( 'THZSI', 'THZCI', 'THZSB'  )  and
                                     rpz_i_guid <> '' and zzsrm2_reng <> '' and zmpp_subtype not in ( 'SL', 'SK' )
                        ) as pdhcf_rpz
                               )
                    where rank = 1 and
                                rpz_i_guid not in ( select rpz_i_guid
                                                from :it_final_sz_data
                                                where zzsrm2_prot_date <> '00000000' )
                    ;
*

  endmethod.


  METHOD get_reng_retr_data
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING zsrm2_i_busd zvsrm2_busp zvsrm2_i_pdhcf
           zvsrm2_icrmjest
           zclsrm2_rep_base_amdp=>get_rpz_rows_fr_src_guids

    .
*   02 =  rpz rows
    IF :iv_rep_type = '02' THEN
*     find retr reng positions
      lt_docs = SELECT DISTINCT links.src_guid,
                       links.con_guid,
*                       ilot_pos.src_guid as rpz_guid,
                       header.created_at,
                       pos.guid as pos_guid
                  from :it_links as links
                  inner join zsrm2_i_busd as header
                    on header.guid = links.des_guid and
                       header.process_type in ( 'RENG', 'RETR' ) and
                       header.client = :iv_client
                  left join zvsrm2_busp as pos
                    ON pos.header = links.des_guid and
                       pos.del_ind = '' AND
                       pos.client = :iv_client
                 ;
*      establish connections between current row and rpz
       lt_guids = SELECT DISTINCT pos_guid AS guid
                    FROM :lt_docs;

       CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RPZ_ROWS_FR_SRC_GUIDS"( iv_client => :iv_client, it_guids => :lt_guids,
        iv_skip_aggr => '', et_guids => :lt_rpz_links, it_rpz_i_links=> :it_rpz_i_links );

       lt_guids = SELECT * FROM :lt_guids WHERE 1 = 2;

*      join selected pos with rpz guids
       lt_docs_rpz = SELECT docs.*,
                        rpz_links.guid as rpz_guid,
                        row_number() over (partition BY rpz_links.guid order by docs.created_at desc) AS row_num
                    FROM :lt_docs as docs
                      INNER JOIN :lt_rpz_links as rpz_links
                        ON docs.pos_guid = rpz_links.source_guid;
       lt_docs = select * from :lt_docs where 1 = 2;

       lt_last_doc = select distinct docs.src_guid, docs.rpz_guid, docs.pos_guid
                      from :lt_docs_rpz as docs
*                      where row_num = 1
                      ;
       lt_docs_rpz = select * from :lt_docs_rpz where 1 = 2;
*      find sz


       lt_last_doc_sz = select last_doc.src_guid, last_doc.rpz_guid,
                          case when appr_sz.zzsrm2_bitem_guid = '' or
                            appr_sz.zzsrm2_bitem_guid is null
                            then 0
                            else 1
                          end as count_zmpp
                        from :lt_last_doc as last_doc
                          inner join (
                              select distinct pdhcf.zzsrm2_bitem_guid
                                from zvsrm2_i_pdhcf as pdhcf
                                where pdhcf.table_type in ( 'THZCI', 'THZWP' ) and
                                      pdhcf.del_ind = '' AND
                                      pdhcf.client = :iv_client AND
                                      EXISTS (
                                        select distinct objnr
                                          from zvsrm2_icrmjest AS crmjest
                                          where inact = '' and
                                                stat in ( 'I1011', 'I9915' ) AND
                                                crmjest.objnr = pdhcf.guid_hi
                                      )

                             ) as appr_sz
                             on appr_sz.zzsrm2_bitem_guid = last_doc.pos_guid
                          ;
       lt_last_doc = select * from :lt_last_doc where 1 = 2;

*      count docs
       et_data = select last_doc.src_guid as ilot_guid, last_doc.rpz_guid as rpz_row, null as hpur_guid, count (count_zmpp) AS doc_count
                      from :lt_last_doc_sz as last_doc
                      GROUP BY last_doc.src_guid, last_doc.rpz_guid
                        ;
*    RPZ
     elseif :iv_rep_type = '01' then
*     get doc headers for retr, reng
       lt_docs_hdr_r = select distinct links.src_guid, count( distinct links.con_guid ) as doc_count
                        from :it_links as links
                        where links.con_type in ( 'RETR', 'RENG' ) and
                              links.des_type = 'ZMPP' AND
                              EXISTS (
                                        SELECT DISTINCT objnr
                                          FROM zvsrm2_icrmjest
                                          WHERE inact = '' AND
                                                stat IN ( 'I1011', 'I9915', 'I9914', 'I9925' ,'I9914' ) AND
                                                zvsrm2_icrmjest.objnr = links.des_guid
                                      )
                      group by links.src_guid
                       ;

*      final table
        et_data = select docs_hdr.src_guid as ilot_guid, '' as rpz_row, null as hpur_guid, docs_hdr.doc_count as doc_count
                              from :lt_docs_hdr_r as docs_hdr;
*    HPUR
     elseif :iv_rep_type = '03' then
       lt_docs_hdr_h = select distinct links.hpur_guid, count( distinct links.con_guid ) as doc_count
                        from :it_links as links
                        where links.con_type in ( 'RETR', 'RENG' ) and
                              links.des_type = 'ZMPP' AND
                              EXISTS (
                                        SELECT DISTINCT objnr
                                          FROM zvsrm2_icrmjest
                                          WHERE inact = '' AND
                                                stat IN ( 'I1011', 'I9915', 'I9914', 'I9925' ,'I9914' ) AND
                                                zvsrm2_icrmjest.objnr = links.des_guid
                                      )
                      group by links.hpur_guid
                       ;

*      final table
        et_data = select null as ilot_guid, '' as rpz_row, docs_hdr.hpur_guid as hpur_guid, docs_hdr.doc_count as doc_count
                              from :lt_docs_hdr_h as docs_hdr;
*                                left join :lt_not_appr_zmpp_h as not_appr_zmpp
*                                  on docs_hdr.hpur_guid = not_appr_zmpp.hpur_guid;

     end if;


  endmethod.

  METHOD get_rpz_pos_sz_o
    BY DATABASE PROCEDURE FOR HDB
      LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      USING zvsrm2_icrmjest bbp_pdhgp zvsrm2_i_pdhcf
      .

    lt_pdhcf_rpz = select DISTINCT rpz_i_guid, pdhcf_rpz.guid_hi, pdhcf_rpz.guid_hi as zmpp_guid
                    from zvsrm2_i_pdhcf as pdhcf_rpz
                    inner join :it_zmpp_links as zmpp_links
                     on zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                    where rpz_i_guid <> '' and
                    exists ( select guid from  bbp_pdhgp where
                               pdhcf_rpz.guid_hi = bbp_pdhgp.guid and
                               bbp_pdhgp.client = :iv_client AND
                               bbp_pdhgp.version_type = '' AND
                               bbp_pdhgp.doc_closed = '' );
    it_zmpp_links = SELECT * FROM :it_zmpp_links WHERE 1 = 2;



*   find statuses
    lt_sz_statuses = SELECT objnr, stat from zvsrm2_icrmjest
                        WHERE mandt = :iv_client AND
                              inact = '' AND
                              EXISTS (
                               SELECT guid_hi
                                  FROM :lt_pdhcf_rpz AS pdhcf_rpz
                                  WHERE zvsrm2_icrmjest.objnr = pdhcf_rpz.guid_hi
                              ) and
                              stat in ( 'I1011', 'I9915', 'I9914' )
                              ;
    lt_sz_rpz_i_cnt = select distinct rpz_i_guid as rpz_i, count ( distinct pdhcf_rpz.guid_hi ) as sz_count
                        from :lt_pdhcf_rpz as pdhcf_rpz
                        group by  rpz_i_guid ;

    lt_sz_rpz_i_publ_cnt = select distinct rpz_i_guid as rpz_i, count ( distinct pdhcf_rpz.guid_hi ) as sz_count
                            from :lt_pdhcf_rpz as pdhcf_rpz
                            where exists ( select objnr from :lt_sz_statuses as stat where stat.objnr = pdhcf_rpz.guid_hi )
                            group by rpz_i_guid;

    lt_sz_sl_sk = select distinct rpz_i_guid as rpz_i, count ( distinct pdhcf_rpz.zmpp_guid ) as sz_sl_sk_cnt
                    from :lt_pdhcf_rpz as pdhcf_rpz
                  where exists ( select guid from bbp_pdhgp as pdhgp
                                    where pdhcf_rpz.zmpp_guid = pdhgp.guid and
                                          pdhgp.client = :iv_client AND
                                          pdhgp.subtype in ( 'SL', 'SK' ) )
                 group by rpz_i_guid;

    lt_sz_sl_sk_publ_cnt = select distinct rpz_i_guid as rpz_i, count ( distinct pdhcf_rpz.guid_hi ) as sz_count
                            from :lt_pdhcf_rpz as pdhcf_rpz
                            where exists ( select objnr from :lt_sz_statuses as stat where stat.objnr = pdhcf_rpz.guid_hi ) and
                                 exists ( select guid from bbp_pdhgp as pdhgp
                                                where pdhcf_rpz.zmpp_guid = pdhgp.guid and
                                                      pdhgp.client = :iv_client AND
                                                      pdhgp.subtype in ( 'SL', 'SK' ) )
                            group by rpz_i_guid;

    et_rpz_pos_sz =
        select distinct rpz_i_guid as rpz_i, pdhcf_rpz.guid_hi as sz, sz_rpz_i_cnt.sz_count as sz_cnt,
                        sz_rpz_i_publ.sz_count as sz_publ_cnt, sz_sl_sk.sz_sl_sk_cnt,
                        sz_sl_sk_publ_cnt.sz_count as sz_sl_sk_cnt_p
          from :lt_pdhcf_rpz as pdhcf_rpz
          left join :lt_sz_rpz_i_cnt as sz_rpz_i_cnt
            on sz_rpz_i_cnt.rpz_i = pdhcf_rpz.rpz_i_guid
          left join :lt_sz_rpz_i_publ_cnt as sz_rpz_i_publ
            on sz_rpz_i_publ.rpz_i = pdhcf_rpz.rpz_i_guid
          left join :lt_sz_sl_sk as sz_sl_sk
            on sz_sl_sk.rpz_i = pdhcf_rpz.rpz_i_guid
          left join :lt_sz_sl_sk_publ_cnt as sz_sl_sk_publ_cnt
            on sz_sl_sk_publ_cnt.rpz_i = pdhcf_rpz.rpz_i_guid

          ;


  endmethod.

  METHOD get_rpz_pos_sz
    BY DATABASE PROCEDURE FOR HDB
      LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      USING zvsrm2_icrmjest bbp_pdhgp
      .

    IF is_empty(:it_pdhcf_rpz) THEN
      return;
    END if;

*    rpz_i_guid guid_hi zmpp_guid
    lt_pdhcf_rpz = SELECT rpz_i_guid, guid_hi, zmpp_guid
                    FROM :it_pdhcf_rpz;
    it_pdhcf_rpz = SELECT * FROM :it_pdhcf_rpz WHERE 1 = 2;

*   find statuses
    lt_sz_statuses = SELECT objnr, stat from zvsrm2_icrmjest
                        where mandt = :iv_client and
                              inact = '' and
                              exists (
                               SELECT guid_hi
                                  FROM :lt_pdhcf_rpz AS pdhcf_rpz
                                  WHERE zvsrm2_icrmjest.objnr = pdhcf_rpz.guid_hi
                              ) and
                              stat in ( 'I1011', 'I9915' )
                              ;

    lt_sz_rpz_i_cnt = select distinct rpz_i_guid as rpz_i, count ( distinct pdhcf_rpz.guid_hi ) as sz_count
                        from :lt_pdhcf_rpz as pdhcf_rpz
                        group by  rpz_i_guid ;

*    lt_sz_rpz_i_publ_cnt = select distinct rpz_i_guid as rpz_i, count ( distinct sz_statuses.objnr ) as sz_count
*                            from :lt_pdhcf_rpz as pdhcf_rpz
*                            inner join  :lt_sz_statuses as sz_statuses
*                              on sz_statuses.objnr = pdhcf_rpz.guid_hi and
*                                 sz_statuses.stat in ( 'I1011', 'I9915' )
*                            group by rpz_i_guid;

    lt_sz_rpz_i_publ_cnt = select distinct rpz_i_guid as rpz_i, count ( distinct pdhcf_rpz.guid_hi ) as sz_count
                            from :lt_pdhcf_rpz as pdhcf_rpz
                            where exists ( select objnr from :lt_sz_statuses as stat where stat.objnr = pdhcf_rpz.guid_hi )
                            group by rpz_i_guid;

    lt_sz_sl_sk = select distinct rpz_i_guid as rpz_i, count ( distinct pdhcf_rpz.zmpp_guid ) as sz_sl_sk_cnt
                    from :lt_pdhcf_rpz as pdhcf_rpz
                  where exists ( select guid from bbp_pdhgp as pdhgp
                                    where pdhcf_rpz.zmpp_guid = pdhgp.guid and
                                          pdhgp.client = :iv_client AND
                                          pdhgp.subtype in ( 'SL', 'SK' ) )
                 group by rpz_i_guid;

    lt_sz_sl_sk_publ_cnt = select distinct rpz_i_guid as rpz_i, count ( distinct pdhcf_rpz.guid_hi ) as sz_count
                            from :lt_pdhcf_rpz as pdhcf_rpz
                            where exists ( select objnr from :lt_sz_statuses as stat where stat.objnr = pdhcf_rpz.guid_hi ) and
                                 exists ( select guid from bbp_pdhgp as pdhgp
                                                where pdhcf_rpz.zmpp_guid = pdhgp.guid and
                                                      pdhgp.client = :iv_client AND
                                                      pdhgp.subtype in ( 'SL', 'SK' ) )
                            group by rpz_i_guid;


*    lt_sz_rpz_i_publ_cnt = select distinct rpz_i_guid as rpz_i, count ( distinct pdhcf_rpz.guid_hi ) as sz_count
*                            from :lt_pdhcf_rpz as pdhcf_rpz
*                            WHERE EXISTS ( SELECT objnr FROM :lt_sz_statuses AS stat WHERE stat.objnr = pdhcf_rpz.guid_hi )
*                            group by rpz_i_guid;
*
*
*    lt_sz_sl_sk = select distinct rpz_i_guid as rpz_i, COUNT ( DISTINCT pdhcf_rpz.zmpp_guid ) as sz_sl_sk_cnt
*                    from :lt_pdhcf_rpz as pdhcf_rpz
*                      inner join bbp_pdhgp as pdhgp
*                        on pdhcf_rpz.zmpp_guid = pdhgp.guid and
*                           pdhgp.client = :iv_client AND
*                           pdhgp.subtype in ( 'SL', 'SK' )
*                 group by rpz_i_guid;
*
*    lt_sz_sl_sk_publ_cnt = select distinct rpz_i_guid as rpz_i, count ( distinct sz_statuses.objnr ) as sz_count
*                            from :lt_pdhcf_rpz as pdhcf_rpz
*                            inner join :lt_sz_statuses as sz_statuses
*                              on sz_statuses.objnr = pdhcf_rpz.guid_hi and
*                                 sz_statuses.stat in ( 'I1011', 'I9915' )
*                            inner join bbp_pdhgp as pdhgp
*                              on pdhcf_rpz.zmpp_guid = pdhgp.guid and
*                                 pdhgp.client = :iv_client AND
*                                 pdhgp.subtype in ( 'SL', 'SK' )
*                            group by rpz_i_guid;
*
    et_rpz_pos_sz =
        select distinct rpz_i_guid as rpz_i, pdhcf_rpz.guid_hi as sz, sz_rpz_i_cnt.sz_count as sz_cnt,
                        sz_rpz_i_publ.sz_count as sz_publ_cnt, sz_sl_sk.sz_sl_sk_cnt,
                        sz_sl_sk_publ_cnt.sz_count as sz_sl_sk_cnt_p
          from :lt_pdhcf_rpz as pdhcf_rpz
          left join :lt_sz_rpz_i_cnt as sz_rpz_i_cnt
            on sz_rpz_i_cnt.rpz_i = pdhcf_rpz.rpz_i_guid
          left join :lt_sz_rpz_i_publ_cnt as sz_rpz_i_publ
            on sz_rpz_i_publ.rpz_i = pdhcf_rpz.rpz_i_guid
          left join :lt_sz_sl_sk as sz_sl_sk
            on sz_sl_sk.rpz_i = pdhcf_rpz.rpz_i_guid
          left join :lt_sz_sl_sk_publ_cnt as sz_sl_sk_publ_cnt
            on sz_sl_sk_publ_cnt.rpz_i = pdhcf_rpz.rpz_i_guid

          ;

  endmethod.


  METHOD get_rpz_row
      BY DATABASE FUNCTION
      FOR HDB
      LANGUAGE SQLSCRIPT
      OPTIONS READ-ONLY
      .
    RETURN    SELECT :iv_client AS clnt, '' AS num
              FROM dummy;

  ENDMETHOD.


  METHOD get_rpz_rows_fr_src_guids
        BY DATABASE PROCEDURE FOR HDB
           LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
           USING bbp_pdigp crmd_orderadm_h crmd_orderadm_i
                 zddl_slpp_link bbp_pdiss.
    declare i integer;

    if is_empty(:it_guids) THEN
          return;
    END if;

*   find in et_rpz_links
    et_guids = SELECT *
        FROM :it_rpz_i_links AS i_links
        WHERE EXISTS ( SELECT guid FROM :it_guids WHERE guid = i_links.source_guid );

    it_guids = SELECT guid
                FROM :it_guids AS guids
                WHERE NOT EXISTS ( SELECT guid FROM :et_guids WHERE source_guid = guids.guid );

    IF is_empty(:it_guids) THEN
          return;
    END if;
*   slpp positions
    lt_slpp_docs = SELECT orderadm_i.guid as slpp_pos_guid
                    from :it_guids as guids
                        inner join crmd_orderadm_i as orderadm_i
                            on orderadm_i.guid = guids.guid
                        inner join crmd_orderadm_h as orderadm_h
                            on orderadm_i.header = orderadm_h.guid
                    where orderadm_h.process_type = 'SLPP';

    et_guids = SELECT ppr_i_guid AS guid, docs.slpp_pos_guid as source_guid, ilot_i_guid,
                      slpp_agr_guid
                          from zddl_slpp_link
                          inner join :lt_slpp_docs as docs
                            on slpp_i_guid = docs.slpp_pos_guid
               union
               select * from :et_guids;

    lt_seek_guids = select guid as current,guid as source_guid
                        from :it_guids
                        where  not exists  ( select slpp_pos_guid from :lt_slpp_docs where slpp_pos_guid = guid );
    IF is_empty(:lt_seek_guids) THEN
          return;
    END if;
    for i in 1..20 DO
*   select guids
        lt_docs = select src_guid, src_object_type, pdigp.guid as current, seek_guids.source_guid,
                         src_orderadm_h.process_type as src_process_type, src_pdiss.ps_ipt
                    from bbp_pdigp as pdigp
                      LEFT JOIN crmd_orderadm_i AS src_orderadm_i
                        ON pdigp.src_guid = src_orderadm_i.guid
                      LEFT JOIN bbp_pdiss AS src_pdiss
                        ON src_orderadm_i.guid = src_pdiss.guid
                      LEFT JOIN crmd_orderadm_h AS src_orderadm_h
                        ON src_orderadm_i.header = src_orderadm_h.guid
                      INNER JOIN :lt_seek_guids as seek_guids
                        ON pdigp.guid = seek_guids.current
                    WHERE pdigp.client = :iv_client AND
                          NOT EXISTS ( SELECT guid
                            FROM :et_guids
                            WHERE guid = pdigp.guid )
                          ;

*       select ppr
        et_guids = SELECT src_guid AS guid, source_guid, current as ilot_i_guid, NULL AS slpp_agr_guid
                    FROM :lt_docs
                    WHERE src_object_type = 'BUS2211001' AND
                          src_process_type = 'PPR'
                   UNION
                    SELECT guid, source_guid,ilot_i_guid, slpp_agr_guid
                     FROM :et_guids;

*       add slpp docs
        lt_docs_slpp = SELECT *
                        FROM :lt_docs AS docs
                        WHERE docs.src_process_type = 'SLPP' OR
                              ( docs.src_process_type = 'ILOT' AND docs.ps_ipt = 'Z_AGGR_ITM' )
                                 and
                              NOT EXISTS ( SELECT guid FROM :et_guids AS et_guids WHERE et_guids.guid = docs.src_guid );
        IF not is_empty(:lt_docs_slpp) THEN
          et_guids =
          SELECT * FROM :et_guids
          UNION
           SELECT ppr_i_guid as guid, docs.source_guid, ilot_i_guid, slpp_agr_guid
              FROM zddl_slpp_link
              INNER JOIN :lt_docs_slpp as docs
                ON slpp_i_guid = docs.src_guid AND
                   docs.src_process_type = 'SLPP'
           UNION
            SELECT ppr_i_guid as guid, docs.source_guid, ilot_i_guid, slpp_agr_guid
              FROM zddl_slpp_link
              INNER JOIN :lt_docs_slpp as docs
                ON ilot_i_guid = docs.src_guid AND
                   docs.src_process_type = 'ILOT' AND
                   docs.ps_ipt = 'Z_AGGR_ITM' AND
                   :iv_skip_aggr = '';
        END if;
*       find what left
        IF :iv_skip_aggr = 'X' THEN
           lt_seek_guids = SELECT src_guid AS current, source_guid
                              FROM :lt_docs as docs
                              WHERE NOT EXISTS (  SELECT source_guid FROM :et_guids WHERE source_guid = docs.source_guid )
                                        AND
                                     NOT ps_ipt IN ( 'ZAGGR_ITM', 'Z_AGGR_ITM'  );
        ELSE
            lt_seek_guids = SELECT src_guid AS current, source_guid
                              FROM :lt_docs as docs
                              WHERE not exists(
                                SELECT source_guid FROM :et_guids where source_guid = docs.source_guid
                              );
        END if;
        IF is_empty(:lt_seek_guids) THEN
            break;
        END if;
    END for;

    et_guids = SELECT DISTINCT * FROM :et_guids;


  ENDMETHOD.

  METHOD get_rrs_contr_txt_o
   BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING zvsrm2_crbpdhcf bbp_pdhgp
           ztsrm2_scon_type zvsrm2_i_pdhcf
      .

    et_rrs_contr_txt = SELECT DISTINCT zmpp_links.ilot_guid AS src_guid,rpz_i_guid, rpz_header,
                          zzsrm2_rrs_contr_txt
                       FROM :it_zmpp_links as zmpp_links
                       INNER JOIN zvsrm2_i_pdhcf AS pdhcf_rpz
                           ON pdhcf_rpz.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                       INNER JOIN zvsrm2_crbpdhcf AS pdhcf
                         ON pdhcf_rpz.guid_hi = pdhcf.guid_hi and
                            pdhcf.client = :iv_client  AND
                            pdhcf.zzsrm2_bitem_guid = zmpp_links.zzsrm2_bitem_guid
                       WHERE rpz_i_guid <> '00000000000000000000000000000000' OR
                             rpz_i_guid <> '' AND
                             EXISTS (
                                SELECT guid
                                    FROM bbp_pdhgp
                                    INNER JOIN ztsrm2_scon_type
                                       ON bbp_pdhgp.subtype = ztsrm2_scon_type.subtype AND
                                          ztsrm2_scon_type.mandt = :iv_client AND
                                          final = 'X'
                                    WHERE pdhcf.guid_hi = bbp_pdhgp.guid AND
                                          bbp_pdhgp.client = :iv_client AND
                                          bbp_pdhgp.doc_closed = '' AND
                                          bbp_pdhgp.version_type = ''
                             );

  ENDMETHOD.


  METHOD get_rrs_contr_txt
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING zvsrm2_crbpdhcf bbp_pdigp
           zclsrm2_rep_base_amdp=>get_rpz_rows_fr_src_guids
           crmd_orderadm_i
      .

    lt_rrs_contr_txt = select DISTINCT zmpp_data.src_guid,
                          gp.guid as pos_guid,
                           zzsrm2_rrs_contr_txt
                    from :it_zmpp_data as zmpp_data
                                inner join zvsrm2_crbpdhcf as pdhcf
                                  ON zmpp_data.guid = pdhcf.guid_hi and
                                     pdhcf.client = :iv_client
                                INNER JOIN bbp_pdigp as gp
                                  ON pdhcf.zzsrm2_bitem_guid = gp.guid and
                                     pdhcf.client = :iv_client AND
                                     zmpp_data.final = 'X';

*      establish connections between current row and rpz
       lt_guids = SELECT DISTINCT pos_guid AS guid
                    FROM :lt_rrs_contr_txt;
       CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RPZ_ROWS_FR_SRC_GUIDS"( iv_client => :iv_client, it_guids => :lt_guids,
        it_rpz_i_links => :it_rpz_i_links, et_guids => :lt_rpz_links );

       et_rrs_contr_txt = SELECT src_guid, rpz_links.guid as rpz_i_guid,crmd_orderadm_i.header as rpz_header, zzsrm2_rrs_contr_txt
                            FROM :lt_rrs_contr_txt as rrs_contr_txt
                              LEFT JOIN :lt_rpz_links as rpz_links
                                ON rrs_contr_txt.pos_guid = rpz_links.source_guid
                              left join crmd_orderadm_i
                                on  crmd_orderadm_i.guid = rpz_links.guid ;


  endmethod.


  METHOD get_rsnh
    BY DATABASE PROCEDURE FOR HDB
    LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
    USING ztsrm2_rsn_datah.

    lt_rsn =
    SELECT zp.guid AS hpur_guid, rsn_datah.created_at,
          rank() over (partition BY zp.guid order by rsn_datah.created_at asc ) as rank
      FROM :it_zp AS zp
        INNER JOIN ztsrm2_rsn_datah AS rsn_datah
          ON zp.guid = rsn_datah.object_guid AND
             rsn_datah.rsn_active_version <> '00000000000000000000000000000000' and
             rsn_change_version = '00000000000000000000000000000000' and
             object_type = 'NOTICE';

    et_eish = SELECT DISTINCT hpur_guid,created_at
      FROM :lt_rsn
      WHERE rank = 1;

  ENDMETHOD.

  METHOD get_sz_stages_o
    BY DATABASE PROCEDURE FOR HDB
      LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      USING  ztsrm2_scon_type crmd_link crmd_partner
            but000 ztsrm2_scon_rsnt bbp_pdhgp tvarvc zvsrm2_icrmjest zvsrm2_i_pdhcf
            bbp_pdhsc crmd_orderadm_h.


    lt_pdhcf_rpz = SELECT DISTINCT zmpp_links.src_guid, pdhcf_rpz.guid_hi,created_at,table_type,zzsrm2_src_hpur,
                                   subtype AS zmpp_subtype, zzsrm2_rej_req_reason, zzsrm2_qualif_sel, zzsrm2_tech_sel, zzsrm2_comm_sel, zzsrm2_quot_guid
                FROM zvsrm2_i_pdhcf AS pdhcf_rpz
                INNER JOIN ( SELECT DISTINCT ilot_guid AS src_guid,
                                   b.guid_hi FROM :it_zmpp_links AS a
                    INNER JOIN zvsrm2_i_pdhcf AS b
                        ON  a.zzsrm2_bitem_guid = b.zzsrm2_bitem_guid ) AS zmpp_links
                 ON zmpp_links.guid_hi = pdhcf_rpz.guid_hi
                INNER ONE TO ONE JOIN bbp_pdhsc
                    ON pdhcf_rpz.guid_hi = bbp_pdhsc.guid AND
                       bbp_pdhsc.client = :iv_client
                INNER ONE TO ONE JOIN crmd_orderadm_h
                    ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid  AND
                       crmd_orderadm_h.client = :iv_client
                INNER ONE TO ONE JOIN bbp_pdhgp
                    ON crmd_orderadm_h.guid = bbp_pdhgp.guid AND
                       bbp_pdhgp.client = :iv_client AND
                       bbp_pdhgp.version_type = '' AND
                       bbp_pdhgp.doc_closed = ''
                WHERE table_type IN ( 'THZSB' );

*   find sz with right statuses
    lt_sz = SELECT  DISTINCT guid_hi,zmpp.src_guid as lot_guid, scon_type.qualif_sel, scon_type.tech_sel,
                    scon_type.comm_sel,zzsrm2_qualif_sel, zzsrm2_rej_req_reason, scon_reas.reason_txt as reason_txt,
                    zzsrm2_tech_sel,zzsrm2_comm_sel, created_at, zzsrm2_quot_guid, table_type
      FROM ( SELECT *
                FROM :lt_pdhcf_rpz as pdhcf_rpz
                WHERE table_type IN ( 'THZSB' ) AND
                      EXISTS ( select objnr
                                      FROM zvsrm2_icrmjest
                                      WHERE stat in ( 'I9914', 'I1011', 'I9915', 'I9925' ) AND
                                            inact = '' AND
                                            objnr = pdhcf_rpz.guid_hi ) AND
*                      COMPETITVE
                      NOT EXISTS ( SELECT guid
                                     FROM  bbp_pdhgp
                                      WHERE subtype IN (
                                        SELECT low
                                          FROM tvarvc
                                          WHERE name = 'ZSRM2_SUBTYPE_UNCOMP'
                                        ) AND
                                        guid = pdhcf_rpz.zzsrm2_src_hpur AND
                                        client = :iv_client
                                         )

        ) as zmpp
      INNER ONE TO ONE JOIN ztsrm2_scon_type AS scon_type
        ON zmpp_subtype = scon_type.subtype
      LEFT ONE TO ONE JOIN ztsrm2_scon_rsnt as scon_reas
        ON scon_reas.mandt = :iv_client AND
           scon_reas.reason_type = '5' AND
           scon_reas.reason_id = zmpp.zzsrm2_rej_req_reason AND
           scon_reas.langu = 'R' AND
           scon_reas.reason_id <> '' AND
           zmpp.zzsrm2_rej_req_reason <> ''
           ;

*    find qout partners

     lt_partners = SELECT crmd_link.guid_hi,
                    CONCAT( but000.name_org1, CONCAT( but000.name_org2, CONCAT( but000.name_org3, but000.name_org4 )  )  ) name_org,
                          but000.partner_guid
                    FROM crmd_link
                      INNER JOIN crmd_partner
                        ON crmd_link.client = :iv_client AND
                           crmd_link.guid_set = crmd_partner.guid
                      INNER JOIN but000
                        ON crmd_partner.partner_no = but000.partner_guid AND
                           crmd_partner.client = but000.client
                      INNER JOIN ( SELECT DISTINCT zzsrm2_quot_guid FROM :lt_sz ) as sz
                        ON sz.zzsrm2_quot_guid = crmd_link.guid_hi
                    WHERE crmd_partner.partner_fct = '00000018' AND
                          crmd_partner.disabled = '';

      lt_reason_txt = SELECT DISTINCT lot_guid, zzsrm2_rej_req_reason, reason_txt
                        FROM :lt_sz
                        WHERE reason_txt <> '';

*    qualification selection
*       passed
     lt_sz_q = SELECT sz.*,
                          rank() over (partition BY lot_guid order by created_at desc ) as rank
                          FROM :lt_sz as sz
                          WHERE  qualif_sel = '12';


     lt_qual_passed = SELECT DISTINCT zzsrm2_quot_guid, lot_guid
                        FROM :lt_sz_q
                        WHERE zzsrm2_qualif_sel = '1' AND
                              qualif_sel = '12';
     lt_qual_passed_prt =  SELECT lot_guid, partners.name_org as name_org, partners.partner_guid
                              FROM :lt_qual_passed as qual_passed
                                INNER JOIN :lt_partners as partners
                                  ON qual_passed.zzsrm2_quot_guid = partners.guid_hi;

     lt_qual_psd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count
                        FROM (
                            SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                              FROM :lt_qual_passed_prt as qual_passed
                             GROUP BY lot_guid
                          ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_qual_passed
                                        GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          ;

**     not passed
      lt_qual_not_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid, zzsrm2_rej_req_reason, reason_txt
                            FROM :lt_sz_q
                            WHERE zzsrm2_qualif_sel = '2' AND
                                  qualif_sel = '12';

      lt_qual_not_passed_prt = SELECT lot_guid, partners.name_org, zzsrm2_rej_req_reason
                                FROM :lt_qual_not_passed as qual_passed
                                  INNER JOIN :lt_partners as partners
                                    ON qual_passed.zzsrm2_quot_guid = partners.guid_hi
                                 WHERE NOT EXISTS ( SELECT *
                                                      FROM :lt_qual_passed_prt as qual_passed_prt
                                                      WHERE qual_passed_prt.lot_guid = qual_passed.lot_guid AND
                                                            qual_passed_prt.partner_guid = partners.partner_guid  );

      lt_qual_npsd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count, reason_txt
                          FROM (
                              SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                                FROM :lt_qual_not_passed_prt
                               GROUP BY lot_guid
                            ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_qual_not_passed
                                        GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          INNER JOIN ( SELECT a1.lot_guid, string_agg( a2.reason_txt, ', ' ORDER BY a2.reason_txt ) as reason_txt
                                        FROM :lt_qual_not_passed_prt as a1
                                          INNER JOIN :lt_reason_txt as a2
                                            ON a1.lot_guid = a2.lot_guid AND
                                               a1.zzsrm2_rej_req_reason = a2.zzsrm2_rej_req_reason
                                        GROUP BY a1.lot_guid ) as reason
                          ON partners.lot_guid = reason.lot_guid ;


**   technical selection
     lt_sz_t = SELECT sz.*,
                          rank() over (partition BY lot_guid order by created_at desc ) as rank
                          FROM :lt_sz as sz
                          WHERE tech_sel = '22';

**    passed
     lt_tech_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid
                        FROM :lt_sz_t
                        WHERE zzsrm2_tech_sel = '1' AND
                              tech_sel = '22';
     lt_tech_passed_prt =  SELECT lot_guid, partners.name_org as name_org, partners.partner_guid
                              FROM :lt_tech_passed as tech_passed
                                INNER JOIN :lt_partners as partners
                                  ON tech_passed.zzsrm2_quot_guid = partners.guid_hi;

     lt_tech_psd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count
                        FROM (
                            SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                              FROM :lt_tech_passed_prt as tech_passed
                             GROUP BY lot_guid
                          ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_tech_passed
                                         GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          ;
*    not passed
      lt_tech_not_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid, zzsrm2_rej_req_reason
                            FROM :lt_sz_t
                            WHERE zzsrm2_tech_sel = '2' AND
                                  tech_sel = '22';

      lt_tech_not_passed_prt = SELECT lot_guid, partners.name_org, zzsrm2_rej_req_reason
                                FROM :lt_tech_not_passed as tech_passed
                                  INNER JOIN :lt_partners as partners
                                    ON tech_passed.zzsrm2_quot_guid = partners.guid_hi
                                 WHERE NOT EXISTS ( SELECT *
                                                      FROM :lt_tech_passed_prt as tech_passed_prt
                                                      WHERE tech_passed_prt.lot_guid = tech_passed.lot_guid AND
                                                            tech_passed_prt.partner_guid = partners.partner_guid  );

      lt_tech_npsd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count, reason.reason_txt
                          FROM (
                              SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                                FROM :lt_tech_not_passed_prt as tech_passed
                               GROUP BY lot_guid
                            ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_tech_not_passed
                                        GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          INNER JOIN ( SELECT a1.lot_guid, string_agg( a2.reason_txt, ', ' ORDER BY a2.reason_txt ) as reason_txt
                                        FROM :lt_tech_not_passed_prt as a1
                                          INNER JOIN :lt_reason_txt as a2
                                            ON a1.lot_guid = a2.lot_guid AND
                                               a1.zzsrm2_rej_req_reason = a2.zzsrm2_rej_req_reason
                                        GROUP BY a1.lot_guid ) as reason
                          ON partners.lot_guid = reason.lot_guid
                          ;
*   COMM_SEL
     lt_sz_c =  SELECT sz.*,
                          rank() over (partition BY lot_guid order by created_at desc ) as rank
                          FROM :lt_sz as sz
                          WHERE comm_sel = '23';
*    passed
     lt_comm_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid
                        FROM :lt_sz_c
                        WHERE zzsrm2_comm_sel = '1' AND
                              comm_sel = '23';

     lt_comm_passed_prt =  SELECT lot_guid, partners.name_org as name_org, partners.partner_guid
                              FROM :lt_comm_passed as comm_passed
                                INNER JOIN :lt_partners as partners
                                  ON comm_passed.zzsrm2_quot_guid = partners.guid_hi;

     lt_comm_sel_psd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count
                        FROM (
                            SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                              FROM :lt_comm_passed_prt as comm_passed
                             GROUP BY lot_guid
                          ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_comm_passed
                                         GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          ;

     lt_sz_c = SELECT sz.*,
                          rank() over (partition BY lot_guid order by created_at desc ) as rank
                          FROM :lt_sz as sz
                          WHERE comm_sel = '23';


*    not passed
      lt_comm_not_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid, zzsrm2_rej_req_reason
                            FROM :lt_sz_c
*>> Кон К.И.
                            INNER JOIN :lt_partners as partners
                                    ON :lt_sz_c.zzsrm2_quot_guid = partners.guid_hi
*<< Кон К.И.
                            WHERE zzsrm2_comm_sel = '2' AND
                                  comm_sel = '23'
*>> Кон К.И.
                              AND NOT EXISTS ( SELECT *
                                                      FROM :lt_comm_passed_prt as comm_passed_prt
                                                      WHERE comm_passed_prt.lot_guid = :lt_sz_c.lot_guid AND
                                                            comm_passed_prt.partner_guid = partners.partner_guid  );
*<< Кон К.И.
      lt_comm_not_passed_prt = SELECT lot_guid, partners.name_org, zzsrm2_rej_req_reason
                                FROM :lt_comm_not_passed as comm_passed
                                  INNER JOIN :lt_partners as partners
                                    ON comm_passed.zzsrm2_quot_guid = partners.guid_hi
                                 WHERE NOT EXISTS ( SELECT *
                                                      FROM :lt_comm_passed_prt as comm_passed_prt
                                                      WHERE comm_passed_prt.lot_guid = comm_passed.lot_guid AND
                                                            comm_passed_prt.partner_guid = partners.partner_guid  );

      lt_comm_npsd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count, reason.reason_txt
                          FROM (
                              SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                                FROM :lt_comm_not_passed_prt as comm_passed
                               GROUP BY lot_guid
                            ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_comm_not_passed
                                        GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          INNER JOIN ( SELECT a1.lot_guid, string_agg( a2.reason_txt, ', ' ORDER BY a2.reason_txt ) as reason_txt
                                        FROM :lt_comm_not_passed_prt as a1
                                          INNER JOIN :lt_reason_txt as a2
                                            ON a1.lot_guid = a2.lot_guid AND
                                               a1.zzsrm2_rej_req_reason = a2.zzsrm2_rej_req_reason
                                        GROUP BY a1.lot_guid ) as reason
                          ON partners.lot_guid = reason.lot_guid
                          ;

*
*
**    ZZSRM2_NAME_SUP_STAGE4_APPROV  ZZSRM2_QUAN_SUP_STAGE4_APPROV квалификации + техники + коммерция
*
*     lt_sz_c =  SELECT sz.*,
*                          rank() over (partition BY lot_guid order by created_at desc ) as rank
*                          FROM :lt_sz as sz
*                          WHERE comm_sel = '23' AND
*                                tech_sel = '22' AND
*                                qualif_sel = '12';
**    passed
*     lt_ctq_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid
*                        FROM :lt_sz_c
*                        WHERE ( zzsrm2_comm_sel = '1' AND
*                              comm_sel = '23' ) AND
*                              ( zzsrm2_qualif_sel = '1' AND
*                              qualif_sel = '12' ) AND
*
*                              ;
*
*         lt_tech_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid
*                        FROM :lt_sz_t
*                        WHERE zzsrm2_tech_sel = '1' AND
*                              tech_sel = '22';
*
*
*
*     lt_comm_passed_prt =  SELECT lot_guid, partners.name_org as name_org, partners.partner_guid
*                              FROM :lt_comm_passed as comm_passed
*                                INNER JOIN :lt_partners as partners
*                                  ON comm_passed.zzsrm2_quot_guid = partners.guid_hi;
*
*     lt_comm_sel_psd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count
*                        FROM (
*                            SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
*                              FROM :lt_comm_passed_prt as comm_passed
*                             GROUP BY lot_guid
*                          ) AS partners
*                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
*                                        FROM :lt_comm_passed
*                                         GROUP BY lot_guid ) AS supp_count
*                            ON partners.lot_guid = supp_count.lot_guid
*                          ;
*
*     lt_sz_c = SELECT sz.*,
*                          rank() over (partition BY lot_guid order by created_at desc ) as rank
*                          FROM :lt_sz as sz
*                          WHERE comm_sel = '23';
*





*    unite all data
    lt = SELECT lot_guid, name_org AS zzsrm2_name_sup_stage1, suppl_count as zzsrm2_quan_sup_stage1,
                NULL AS zzsrm2_name_sup_not_stage1, NULL AS zzsrm2_quan_sup_not_stage1, NULL AS zzsrm2_nal_reason_txt1,

                NULL AS zzsrm2_name_sup_stage2, NULL AS zzsrm2_quan_sup_stage2,
                NULL AS zzsrm2_name_sup_not_stage2,NULL AS zzsrm2_quan_sup_not_stage2, NULL AS zzsrm2_nal_reason_txt2,

                NULL AS zzsrm2_name_sup_stage3, NULL AS zzsrm2_quan_sup_stage3,
                NULL AS zzsrm2_name_sup_not_stage3, NULL AS zzsrm2_quan_sup_not_stage3, NULL AS zzsrm2_nal_reason_txt3
          FROM :lt_qual_psd_res
         UNION
         SELECT lot_guid, NULL, NULL,  name_org, suppl_count, reason_txt,
                 NULL, NULL, NULL, NULL, NULL,NULL, NULL,NULL, NULL, NULL
          FROM :lt_qual_npsd_res
         UNION
*        tech sel
         SELECT lot_guid, NULL, NULL, NULL, NULL, NULL,
                name_org,suppl_count,
                NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL
          FROM :lt_tech_psd_res
         UNION
         SELECT lot_guid, NULL, NULL, NULL, NULL, NULL,NULL, NULL
                ,name_org, suppl_count, reason_txt,
                 NULL, NULL,NULL, NULL, NULL
          FROM :lt_tech_npsd_res
*        COMM_SEL
         UNION
         SELECT lot_guid, NULL, NULL, NULL, NULL, NULL,NULL, NULL,NULL, NULL,NULL,
                name_org, suppl_count,
                NULL,NULL, NULL
          FROM :lt_comm_sel_psd_res
         UNION
         SELECT lot_guid, NULL, NULL, NULL, NULL, NULL,NULL, NULL,NULL, NULL,NULL, NULL,NULL,
                name_org, suppl_count, reason_txt
          FROM :lt_comm_npsd_res;

    et_sz_stages = SELECT lot_guid, MAX ( zzsrm2_name_sup_stage1 ) zzsrm2_name_sup_stage1,  MAX ( zzsrm2_quan_sup_stage1 ) zzsrm2_quan_sup_stage1,
                MAX ( zzsrm2_name_sup_not_stage1 ) zzsrm2_name_sup_not_stage1, MAX ( zzsrm2_quan_sup_not_stage1 ) zzsrm2_quan_sup_not_stage1,
                MAX ( zzsrm2_nal_reason_txt1 ) zzsrm2_nal_reason_txt1,

                MAX ( zzsrm2_name_sup_stage2 ) zzsrm2_name_sup_stage2,  MAX ( zzsrm2_quan_sup_stage2 ) zzsrm2_quan_sup_stage2,
                MAX ( zzsrm2_name_sup_not_stage2 ) zzsrm2_name_sup_not_stage2, MAX ( zzsrm2_quan_sup_not_stage2 ) zzsrm2_quan_sup_not_stage2,
                MAX ( zzsrm2_nal_reason_txt2 ) zzsrm2_nal_reason_txt2,

                MAX ( zzsrm2_name_sup_stage3 ) zzsrm2_name_sup_stage3, MAX ( zzsrm2_quan_sup_stage3 ) zzsrm2_quan_sup_stage3,
                MAX ( zzsrm2_name_sup_not_stage3 ) zzsrm2_name_sup_not_stage3, MAX ( zzsrm2_quan_sup_not_stage3 ) zzsrm2_quan_sup_not_stage3
*                MAX (zzsrm2_nal_reason_txt3 ) zzsrm2_nal_reason_txt3
            FROM :lt
            GROUP BY lot_guid;


  ENDMETHOD.


  METHOD get_sz_stages
    BY DATABASE PROCEDURE FOR HDB
      LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
      USING  ztsrm2_scon_type crmd_link crmd_partner
            but000 ztsrm2_scon_rsnt bbp_pdhgp tvarvc zvsrm2_icrmjest.


*   find sz with right statuses
    lt_sz = SELECT  DISTINCT guid_hi,zmpp.src_guid as lot_guid, scon_type.qualif_sel, scon_type.tech_sel,
                    scon_type.comm_sel,zzsrm2_qualif_sel, zzsrm2_rej_req_reason, scon_reas.reason_txt as reason_txt,
                    zzsrm2_tech_sel,zzsrm2_comm_sel, created_at, zzsrm2_quot_guid, table_type
      FROM ( SELECT *
                FROM :it_pdhcf_rpz as pdhcf_rpz
                WHERE table_type IN ( 'THZSB' ) AND
                      EXISTS ( select objnr
                                      FROM zvsrm2_icrmjest
                                      WHERE stat in ( 'I9914', 'I1011', 'I9915', 'I9925' ) AND
                                            inact = '' AND
                                            objnr = pdhcf_rpz.guid_hi ) AND
*                      COMPETITVE
                      NOT EXISTS ( SELECT guid
                                     FROM  bbp_pdhgp
                                      WHERE subtype IN (
                                        SELECT low
                                          FROM tvarvc
                                          WHERE name = 'ZSRM2_SUBTYPE_UNCOMP'
                                        ) AND
                                        guid = pdhcf_rpz.zzsrm2_src_hpur AND
                                        client = :iv_client
                                         )

        ) as zmpp
      INNER ONE TO ONE JOIN ztsrm2_scon_type AS scon_type
        ON zmpp_subtype = scon_type.subtype
      LEFT ONE TO ONE JOIN ztsrm2_scon_rsnt as scon_reas
        ON scon_reas.mandt = :iv_client AND
           scon_reas.reason_type = '5' AND
           scon_reas.reason_id = zmpp.zzsrm2_rej_req_reason AND
           scon_reas.langu = 'R' AND
           scon_reas.reason_id <> '' AND
           zmpp.zzsrm2_rej_req_reason <> ''
           ;

*    find qout partners

     lt_partners = SELECT crmd_link.guid_hi,
                    CONCAT( but000.name_org1, CONCAT( but000.name_org2, CONCAT( but000.name_org3, but000.name_org4 )  )  ) name_org,
                          but000.partner_guid
                    FROM crmd_link
                      INNER JOIN crmd_partner
                        ON crmd_link.client = :iv_client AND
                           crmd_link.guid_set = crmd_partner.guid
                      INNER JOIN but000
                        ON crmd_partner.partner_no = but000.partner_guid AND
                           crmd_partner.client = but000.client
                      INNER JOIN ( SELECT DISTINCT zzsrm2_quot_guid FROM :lt_sz ) as sz
                        ON sz.zzsrm2_quot_guid = crmd_link.guid_hi
                    WHERE crmd_partner.partner_fct = '00000018' AND
                          crmd_partner.disabled = '';

      lt_reason_txt = SELECT DISTINCT lot_guid, zzsrm2_rej_req_reason, reason_txt
                        FROM :lt_sz
                        WHERE reason_txt <> '';

*    qualification selection
*       passed
     lt_sz_q = SELECT *
                  FROM ( SELECT sz.*,
                          rank() over (partition BY lot_guid order by created_at desc ) as rank
                          FROM :lt_sz as sz
                          WHERE  qualif_sel = '12' )
                  WHERE rank = 1;


     lt_qual_passed = SELECT DISTINCT zzsrm2_quot_guid, lot_guid
                        FROM :lt_sz_q
                        WHERE zzsrm2_qualif_sel = '1' AND
                              qualif_sel = '12';
     lt_qual_passed_prt =  SELECT lot_guid, partners.name_org as name_org, partners.partner_guid
                              FROM :lt_qual_passed as qual_passed
                                INNER JOIN :lt_partners as partners
                                  ON qual_passed.zzsrm2_quot_guid = partners.guid_hi;

     lt_qual_psd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count
                        FROM (
                            SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                              FROM :lt_qual_passed_prt as qual_passed
                             GROUP BY lot_guid
                          ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_qual_passed
                                        GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          ;

**     not passed
      lt_qual_not_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid, zzsrm2_rej_req_reason, reason_txt
                            FROM :lt_sz_q
                            WHERE zzsrm2_qualif_sel = '2' AND
                                  qualif_sel = '12';

      lt_qual_not_passed_prt = SELECT lot_guid, partners.name_org, zzsrm2_rej_req_reason
                                FROM :lt_qual_not_passed as qual_passed
                                  INNER JOIN :lt_partners as partners
                                    ON qual_passed.zzsrm2_quot_guid = partners.guid_hi
                                 WHERE NOT EXISTS ( SELECT *
                                                      FROM :lt_qual_passed_prt as qual_passed_prt
                                                      WHERE qual_passed_prt.lot_guid = qual_passed.lot_guid AND
                                                            qual_passed_prt.partner_guid = partners.partner_guid  );

      lt_qual_npsd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count, reason_txt
                          FROM (
                              SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                                FROM :lt_qual_not_passed_prt
                               GROUP BY lot_guid
                            ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_qual_not_passed
                                        GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          INNER JOIN ( SELECT a1.lot_guid, string_agg( a2.reason_txt, ', ' ORDER BY a2.reason_txt ) as reason_txt
                                        FROM :lt_qual_not_passed_prt as a1
                                          INNER JOIN :lt_reason_txt as a2
                                            ON a1.lot_guid = a2.lot_guid AND
                                               a1.zzsrm2_rej_req_reason = a2.zzsrm2_rej_req_reason
                                        GROUP BY a1.lot_guid ) as reason
                          ON partners.lot_guid = reason.lot_guid ;


**   technical selection
     lt_sz_t = SELECT *
                  FROM ( SELECT sz.*,
                          rank() over (partition BY lot_guid order by created_at desc ) as rank
                          FROM :lt_sz as sz
                          WHERE tech_sel = '22' )
                  WHERE rank = 1;

**    passed
     lt_tech_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid
                        FROM :lt_sz_t
                        WHERE zzsrm2_tech_sel = '1' AND
                              tech_sel = '22';
     lt_tech_passed_prt =  SELECT lot_guid, partners.name_org as name_org, partners.partner_guid
                              FROM :lt_tech_passed as tech_passed
                                INNER JOIN :lt_partners as partners
                                  ON tech_passed.zzsrm2_quot_guid = partners.guid_hi;

     lt_tech_psd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count
                        FROM (
                            SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                              FROM :lt_tech_passed_prt as tech_passed
                             GROUP BY lot_guid
                          ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_tech_passed
                                         GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          ;
*    not passed
      lt_tech_not_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid, zzsrm2_rej_req_reason
                            FROM :lt_sz_t
                            WHERE zzsrm2_tech_sel = '2' AND
                                  tech_sel = '22';

      lt_tech_not_passed_prt = SELECT lot_guid, partners.name_org, zzsrm2_rej_req_reason
                                FROM :lt_tech_not_passed as tech_passed
                                  INNER JOIN :lt_partners as partners
                                    ON tech_passed.zzsrm2_quot_guid = partners.guid_hi
                                 WHERE NOT EXISTS ( SELECT *
                                                      FROM :lt_tech_passed_prt as tech_passed_prt
                                                      WHERE tech_passed_prt.lot_guid = tech_passed.lot_guid AND
                                                            tech_passed_prt.partner_guid = partners.partner_guid  );

      lt_tech_npsd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count, reason.reason_txt
                          FROM (
                              SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                                FROM :lt_tech_not_passed_prt as tech_passed
                               GROUP BY lot_guid
                            ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_tech_not_passed
                                        GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          INNER JOIN ( SELECT a1.lot_guid, string_agg( a2.reason_txt, ', ' ORDER BY a2.reason_txt ) as reason_txt
                                        FROM :lt_tech_not_passed_prt as a1
                                          INNER JOIN :lt_reason_txt as a2
                                            ON a1.lot_guid = a2.lot_guid AND
                                               a1.zzsrm2_rej_req_reason = a2.zzsrm2_rej_req_reason
                                        GROUP BY a1.lot_guid ) as reason
                          ON partners.lot_guid = reason.lot_guid
                          ;
*   COMM_SEL
     lt_sz_c = SELECT *
                  FROM ( SELECT sz.*,
                          rank() over (partition BY lot_guid order by created_at desc ) as rank
                          FROM :lt_sz as sz
                          WHERE comm_sel = '23' )
                  WHERE rank = 1;
*    passed
     lt_comm_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid
                        FROM :lt_sz_c
                        WHERE zzsrm2_comm_sel = '1' AND
                              comm_sel = '23';

     lt_comm_passed_prt =  SELECT lot_guid, partners.name_org as name_org, partners.partner_guid
                              FROM :lt_comm_passed as comm_passed
                                INNER JOIN :lt_partners as partners
                                  ON comm_passed.zzsrm2_quot_guid = partners.guid_hi;

     lt_comm_sel_psd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count
                        FROM (
                            SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                              FROM :lt_comm_passed_prt as comm_passed
                             GROUP BY lot_guid
                          ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_comm_passed
                                         GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          ;
*    not passed
      lt_comm_not_passed = SELECT DISTINCT lot_guid, zzsrm2_quot_guid, zzsrm2_rej_req_reason
                            FROM :lt_sz_c
                            WHERE zzsrm2_comm_sel = '2' AND
                                  comm_sel = '23';

      lt_comm_not_passed_prt = SELECT lot_guid, partners.name_org, zzsrm2_rej_req_reason
                                FROM :lt_comm_not_passed as comm_passed
                                  INNER JOIN :lt_partners as partners
                                    ON comm_passed.zzsrm2_quot_guid = partners.guid_hi
                                 WHERE NOT EXISTS ( SELECT *
                                                      FROM :lt_comm_passed_prt as comm_passed_prt
                                                      WHERE comm_passed_prt.lot_guid = comm_passed.lot_guid AND
                                                            comm_passed_prt.partner_guid = partners.partner_guid  );

      lt_comm_npsd_res = SELECT partners.lot_guid, name_org, supp_count.suppl_count, reason.reason_txt
                          FROM (
                              SELECT lot_guid, string_agg( name_org, ', ' ORDER BY name_org ) as name_org
                                FROM :lt_comm_not_passed_prt as comm_passed
                               GROUP BY lot_guid
                            ) AS partners
                          INNER JOIN ( SELECT lot_guid, string_agg ( zzsrm2_quot_guid, '@@' ) as suppl_count
                                        FROM :lt_comm_not_passed
                                        GROUP BY lot_guid ) AS supp_count
                            ON partners.lot_guid = supp_count.lot_guid
                          INNER JOIN ( SELECT a1.lot_guid, string_agg( a2.reason_txt, ', ' ORDER BY a2.reason_txt ) as reason_txt
                                        FROM :lt_comm_not_passed_prt as a1
                                          INNER JOIN :lt_reason_txt as a2
                                            ON a1.lot_guid = a2.lot_guid AND
                                               a1.zzsrm2_rej_req_reason = a2.zzsrm2_rej_req_reason
                                        GROUP BY a1.lot_guid ) as reason
                          ON partners.lot_guid = reason.lot_guid
                          ;
*    unite all data
    lt = SELECT lot_guid, name_org AS zzsrm2_name_sup_stage1, suppl_count as zzsrm2_quan_sup_stage1,
                NULL AS zzsrm2_name_sup_not_stage1, NULL AS zzsrm2_quan_sup_not_stage1, NULL AS zzsrm2_nal_reason_txt1,

                NULL AS zzsrm2_name_sup_stage2, NULL AS zzsrm2_quan_sup_stage2,
                NULL AS zzsrm2_name_sup_not_stage2,NULL AS zzsrm2_quan_sup_not_stage2, NULL AS zzsrm2_nal_reason_txt2,

                NULL AS zzsrm2_name_sup_stage3, NULL AS zzsrm2_quan_sup_stage3,
                NULL AS zzsrm2_name_sup_not_stage3, NULL AS zzsrm2_quan_sup_not_stage3, NULL AS zzsrm2_nal_reason_txt3
          FROM :lt_qual_psd_res
         UNION
         SELECT lot_guid, NULL, NULL,  name_org, suppl_count, reason_txt,
                 NULL, NULL, NULL, NULL, NULL,NULL, NULL,NULL, NULL, NULL
          FROM :lt_qual_npsd_res
         UNION
*        tech sel
         SELECT lot_guid, NULL, NULL, NULL, NULL, NULL,
                name_org,suppl_count,
                NULL, NULL, NULL, NULL, NULL,NULL, NULL, NULL
          FROM :lt_tech_psd_res
         UNION
         SELECT lot_guid, NULL, NULL, NULL, NULL, NULL,NULL, NULL
                ,name_org, suppl_count, reason_txt,
                 NULL, NULL,NULL, NULL, NULL
          FROM :lt_tech_npsd_res
*        COMM_SEL
         UNION
         SELECT lot_guid, NULL, NULL, NULL, NULL, NULL,NULL, NULL,NULL, NULL,NULL,
                name_org, suppl_count,
                NULL,NULL, NULL
          FROM :lt_comm_sel_psd_res
         UNION
         SELECT lot_guid, NULL, NULL, NULL, NULL, NULL,NULL, NULL,NULL, NULL,NULL, NULL,NULL,
                name_org, suppl_count, reason_txt
          FROM :lt_comm_npsd_res;

    et_sz_stages = SELECT lot_guid, MAX ( zzsrm2_name_sup_stage1 ) zzsrm2_name_sup_stage1,  MAX ( zzsrm2_quan_sup_stage1 ) zzsrm2_quan_sup_stage1,
                MAX ( zzsrm2_name_sup_not_stage1 ) zzsrm2_name_sup_not_stage1, MAX ( zzsrm2_quan_sup_not_stage1 ) zzsrm2_quan_sup_not_stage1,
                MAX ( zzsrm2_nal_reason_txt1 ) zzsrm2_nal_reason_txt1,

                MAX ( zzsrm2_name_sup_stage2 ) zzsrm2_name_sup_stage2,  MAX ( zzsrm2_quan_sup_stage2 ) zzsrm2_quan_sup_stage2,
                MAX ( zzsrm2_name_sup_not_stage2 ) zzsrm2_name_sup_not_stage2, MAX ( zzsrm2_quan_sup_not_stage2 ) zzsrm2_quan_sup_not_stage2,
                MAX ( zzsrm2_nal_reason_txt2 ) zzsrm2_nal_reason_txt2,

                MAX ( zzsrm2_name_sup_stage3 ) zzsrm2_name_sup_stage3, MAX ( zzsrm2_quan_sup_stage3 ) zzsrm2_quan_sup_stage3,
                MAX ( zzsrm2_name_sup_not_stage3 ) zzsrm2_name_sup_not_stage3, MAX ( zzsrm2_quan_sup_not_stage3 ) zzsrm2_quan_sup_not_stage3
*                MAX (zzsrm2_nal_reason_txt3 ) zzsrm2_nal_reason_txt3
            FROM :lt
            GROUP BY lot_guid;
  ENDMETHOD.


  METHOD get_winner_data
    BY DATABASE FUNCTION
      FOR HDB
      LANGUAGE SQLSCRIPT
      OPTIONS READ-ONLY
      USING but050 but000.

    lt_holding = select but050.client as client,  but050.partner1 as partner, but050.partner2,
                    concat( concat( concat( partn_hold.name_org1, partn_hold.name_org2 ), partn_hold.name_org3 ), partn_hold.name_org4 ) as  holding_name,
                    concat( concat( concat( partn_bhold.name_org1, partn_bhold.name_org2 ), partn_bhold.name_org3 ), partn_bhold.name_org4 ) as hold_benif
                  from but050
                    left outer join but000 as partn_hold
                       on but050.partner2 = partn_hold.partner and
                          but050.client = partn_hold.client
                    left outer join but050 as but050_bhold
                      on but050_bhold.partner1 = partn_hold.partner and
                         but050_bhold.reltyp = 'ZZ0004' AND
                         partn_hold.client = but050_bhold.client
                    left outer join but000 as partn_bhold
                      on but050_bhold.partner2 = partn_bhold.partner and
                         but050_bhold.client = partn_bhold.client
                  where but050.reltyp = 'ZZ0009';

    RETURN SELECT client, partner, holding_name, hold_benif
              FROM :lt_holding
              WHERE hold_benif <> '' ;

  ENDMETHOD.


  METHOD get_zmpp_pdhcf_rpz
   BY DATABASE PROCEDURE FOR HDB
           LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
           USING zvsrm2_i_pdhcf
                zclsrm2_rep_base_amdp=>get_rpz_rows_fr_src_guids
                crmd_orderadm_i .

*   prepare pdhcf
    lt_pdhcf = SELECT zmpp_data.src_guid, con_guid, pdhcf.guid, pdhcf.zzsrm2_bitem_guid, pdhcf.zzsrm2_qitem_guid, zmpp_data.created_at,
                      table_type, zmpp_data.zzsrm2_reng, pdhcf.guid_hi,  pdhcf.zzsrm2_rang, pdhcf.zzsrm2_bidi_free_reason_id,
                      zmpp_data.zzsrm2_prot_date, zmpp_data.zzsrm2_zomeet_date, zmpp_data.zzsrm2_prot_id,
                      zmpp_data.guid AS zmpp_guid, zmpp_data.subtype AS zmpp_subtype,
                      zmpp_data.zzsrm2_nd_eoc, zmpp_data.final, zmpp_data.nottp,
                      zzsrm2_acc_quantity,zzsrm2_bid_unit, zzsrm2_appr_value,
                      zzsrm2_bidi_decision_free, zzsrm2_quot_guid, zzsrm2_qualif_sel,
                      zzsrm2_tech_sel, zzsrm2_comm_sel, zzsrm2_rej_req_reason, zzsrm2_rezerv, zzsrm2_rej,
                      zzsrm2_q_cp_guid, zmpp_data.zzsrm2_src_hpur,
*>KGBoyko 29-01-2020
                      pdhcf.zzsrm2_handle_item, pdhcf.zzsrm2_parent_item,
*<KGBoyko 29-01-2020
                      zzsrm2_parent_node, zzsrm2_notreas, zzsrm2_eu
                FROM :it_zmpp_data AS zmpp_data
                            INNER JOIN zvsrm2_i_pdhcf AS pdhcf
                              ON zmpp_data.guid = pdhcf.guid_hi AND
                                 ( pdhcf.table_type IN ( 'THZCI', 'THZSI', 'THZSB', 'THZWQ', 'THZWP' )
                                 ) AND
                                 pdhcf.client = :iv_client
                                   ;
*   find rpz rows
    lt_guids = SELECT DISTINCT zzsrm2_bitem_guid AS guid
                FROM :lt_pdhcf
                WHERE zzsrm2_bitem_guid <> '00000000000000000000000000000000' ;

    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RPZ_ROWS_FR_SRC_GUIDS"( iv_client => :iv_client, it_guids => :lt_guids, it_rpz_i_links => :it_rpz_i_links,
             et_guids => :lt_rpz_links );

    et_pdhcf_rpz = SELECT pdhcf.*, rpz_links.guid as rpz_i_guid,
                          orderadm_i.header as rpz_header, rpz_links.ilot_i_guid as ilot_i_guid,
                          rank() over (partition BY rpz_links.guid order by  pdhcf.created_at desc ) as rank_last,
                          rank() over (partition BY rpz_links.guid order by  pdhcf.created_at asc ) as rank_first,
                          rank() over (partition BY pdhcf.src_guid order by  pdhcf.created_at desc ) as rank_src_last,
                          rank() over (partition BY pdhcf.src_guid order by  pdhcf.created_at asc ) as rank_src_first,
                          rpz_links.slpp_agr_guid
                      from :lt_pdhcf as pdhcf
                        left join :lt_rpz_links as rpz_links
                          on pdhcf.zzsrm2_bitem_guid = rpz_links.source_guid
                        left JOIN crmd_orderadm_i as orderadm_i
                          ON rpz_links.guid = orderadm_i.guid
*                      WHERE rpz_links.guid <> ''
                          ;

  ENDMETHOD.


  METHOD get_zmpp_protocol_o
         BY DATABASE PROCEDURE FOR HDB
           LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
           USING zddlsrm2_bus2200 bbp_pdhgp tvarvc
                 bbp_pdhsc ztsrm2_scon_type
                 zclsrm2_rep_base_amdp=>determine_protocol zvsrm2_i_pdhcf crmd_orderadm_h.

    lt_pdhcf_rpz = SELECT DISTINCT zmpp_links.ilot_guid AS src_guid, rpz_i_guid, rpz_header,  created_at,
                      zzsrm2_zomeet_date, zzsrm2_prot_date, zzsrm2_prot_id, subtype AS zmpp_subtype, pdhcf_rpz.guid_hi AS zmpp_guid
                FROM zvsrm2_i_pdhcf AS pdhcf_rpz
                INNER JOIN :it_zmpp_links AS zmpp_links
                 ON zmpp_links.zzsrm2_bitem_guid = pdhcf_rpz.zzsrm2_bitem_guid
                INNER ONE TO ONE JOIN bbp_pdhsc
                    ON pdhcf_rpz.guid_hi = bbp_pdhsc.guid AND
                       bbp_pdhsc.client = :iv_client
                INNER ONE TO ONE JOIN crmd_orderadm_h
                    ON pdhcf_rpz.guid_hi = crmd_orderadm_h.guid  AND
                       crmd_orderadm_h.client = :iv_client
                INNER ONE TO ONE JOIN bbp_pdhgp
                    ON crmd_orderadm_h.guid = bbp_pdhgp.guid AND
                       bbp_pdhgp.client = :iv_client AND
                       bbp_pdhgp.doc_closed = '' AND
                       bbp_pdhgp.version_type = ''
                WHERE rpz_i_guid <> '';
*    Если константа ZSRM2_SUBTYPE_UNCOMP не содержит значение, равное BBP_PDHGP–SUBTYPE, где BBP_PDHGP–GUID = GUID ЗП,
    lt_pdhsc_hdr = SELECT DISTINCT pdhcf_rpz.src_guid, hpur_pdhsc.zzsrm2_msp_pur
     FROM ( SELECT DISTINCT src_guid FROM :lt_pdhcf_rpz ) as pdhcf_rpz
       INNER JOIN zddlsrm2_bus2200 as hpur_links
         ON pdhcf_rpz.src_guid = hpur_links.target_objkey AND
            hpur_links.s_prtype = 'HPUR' AND
            hpur_links.mandt = :iv_client
       INNER JOIN bbp_pdhgp as hpur_pdhgp
         ON hpur_links.source_guid = hpur_pdhgp.guid AND
            NOT hpur_pdhgp.subtype IN ( SELECT LOW FROM tvarvc WHERE NAME = 'ZSRM2_SUBTYPE_UNCOMP' AND mandt = :iv_client ) AND
            hpur_pdhgp.client = :iv_client AND
            hpur_pdhgp.version_type = '' AND
            hpur_pdhgp.doc_closed = ''
       LEFT JOIN bbp_pdhsc as hpur_pdhsc
         ON hpur_pdhgp.guid = hpur_pdhsc.guid AND
            hpur_pdhgp.client = :iv_client
            ;
*    leave only necesssary pdhsc
    lt_pdhsc = SELECT DISTINCT pdhcf_rpz.rpz_i_guid, pdhcf_rpz.src_guid, pdhcf_rpz.created_at, pdhcf_rpz.zzsrm2_zomeet_date,
                      pdhcf_rpz.zzsrm2_prot_date, pdhcf_rpz.zzsrm2_prot_id,
                      pdhsc_hdr.zzsrm2_msp_pur, scon_typet.qualif_sel, scon_typet.tech_sel,
                      scon_typet.comm_sel, comm_eval,
                      pdhcf_rpz.zmpp_guid, pdhcf_rpz.zmpp_subtype
                FROM :lt_pdhcf_rpz as pdhcf_rpz
                  INNER JOIN :lt_pdhsc_hdr as pdhsc_hdr
                    on pdhcf_rpz.src_guid = pdhsc_hdr.src_guid
                  INNER JOIN ztsrm2_scon_type as scon_typet
                    on pdhcf_rpz.zmpp_subtype = scon_typet.subtype AND
                       scon_typet.mandt = :iv_client
                    ;
    lt_pdhcf_rpz = SELECT * FROM :lt_pdhcf_rpz WHERE 1 = 2;

*   stage 1
*, выводим значение BBP_PDHSC-ZZSRM2_ZOMEET_DATE, где BBP_PDHSC= GUID СЗ, связанного с позицией через SRC_GUID, при этом тип СЗ BBP_PDHGP-SUBTYPE = ZTSRM2_SCON_TYPE-SUBTYPE,
*  где ZTSRM2_SCON_TYPE-QUALIF_SEL=  ‘12’,
*Если в ЗП BBP_PDHSC-ZZSRM2_MSP_PUR = 2 (МСП), тогда  TECH_SEL =  ‘22’ (вместо QUALIF_SEL=  ‘12’)
*(Если несколько подходящих СЗ, то берем из последнего  документа)
    lt_stage1 = SELECT rpz_i_guid, src_guid, zzsrm2_zomeet_date,zzsrm2_prot_date, zzsrm2_prot_id,
                       zmpp_guid,
                       rank() over (partition BY rpz_i_guid order by created_at asc ) as rank,
                       created_at
                  FROM :lt_pdhsc
                  WHERE qualif_sel = '12' AND
                        zmpp_subtype <> 'SL';
    CALL "ZCLSRM2_REP_BASE_AMDP=>DETERMINE_PROTOCOL"( it_stage => :lt_stage1, et_stage => :lt_stage1 );
*  stage 2
*  TECH_SEL=  ‘22’ or zzsrm2_msp_pur = 2 and QUALIF_SEL  = 12 last doc
    lt_stage2 = SELECT rpz_i_guid, src_guid, zzsrm2_zomeet_date,zzsrm2_prot_date, zzsrm2_prot_id,
                   zmpp_guid,
                   rank() over (partition BY rpz_i_guid order by created_at asc ) as rank,
                   created_at
              FROM :lt_pdhsc
              WHERE tech_sel = '22';
    CALL "ZCLSRM2_REP_BASE_AMDP=>DETERMINE_PROTOCOL"( it_stage => :lt_stage2, et_stage => :lt_stage2 );

*  stage3
*   COMM_SEL=  ‘23’ last doc
    lt_stag3 = SELECT rpz_i_guid, src_guid, zzsrm2_zomeet_date,zzsrm2_prot_date, zzsrm2_prot_id,
                   zmpp_guid,
                   rank() over (partition BY rpz_i_guid order by created_at asc ) as rank,
                   created_at
              FROM :lt_pdhsc
              WHERE comm_sel = '23';
    CALL "ZCLSRM2_REP_BASE_AMDP=>DETERMINE_PROTOCOL"( it_stage => :lt_stag3, et_stage => :lt_stag3 );
*   stage 4 first doc
*   COMM_EVAL=  ‘24’
    lt_stag4 = SELECT rpz_i_guid, src_guid, zzsrm2_zomeet_date,zzsrm2_prot_date, zzsrm2_prot_id,
                   zmpp_guid,
                   rank() over (partition BY rpz_i_guid order by created_at asc ) as rank,
                   created_at
              FROM :lt_pdhsc
              WHERE comm_eval = '24';
    CALL "ZCLSRM2_REP_BASE_AMDP=>DETERMINE_PROTOCOL"( it_stage => :lt_stag4, et_stage => :lt_stag4 );
*   unite data
    lt_protocol = SELECT stage1.rpz_i_guid, stage1.src_guid, stage1.zzsrm2_zomeet_date as zzsrm2_date_meet_zo1_fact,
                         stage1.zzsrm2_prot_date as zzsrm2_date_sing_prot1,stage1.zzsrm2_prot_id as zzsrm2_prot_id_zp_zo1,
                         stage1.zmpp_guid as guid_z01, stage1.created_at as created_at_z01,
*                         stage 2
                         null as zzsrm2_date_meet_zo2_fact,
                         NULL as zzsrm2_date_sing_prot2,NULL as zzsrm2_prot_id_zp_zo2,
                         NULL as guid_z02, NULL as created_at_z02,
*                        stage 3
                         NULL as zzsrm2_date_meet_zo3_fact,
                         NULL as zzsrm2_date_sing_prot3,NULL as zzsrm2_prot_id_zp_zo3,
                         NULL as guid_z03, NULL as created_at_z03,
*                        stage 4
                         NULL as zzsrm2_date_meet_zo4_fact,
                         NULL as zzsrm2_date_sing_prot4,NULL as zzsrm2_prot_id_zp_zo4,
                         NULL as guid_z04, NULL as created_at_z04
                  FROM :lt_stage1 AS stage1
                  WHERE stage1.rank = 1
                  UNION
                  SELECT stage2.rpz_i_guid, stage2.src_guid,
                         NULL,NULL,NULL,NULL,NULL,
                         stage2.zzsrm2_zomeet_date,
                         stage2.zzsrm2_prot_date,stage2.zzsrm2_prot_id,
                         stage2.zmpp_guid, stage2.created_at,
                         NULL,NULL,NULL,NULL,NULL,
                         NULL,NULL,NULL,NULL,NULL
                  FROM  :lt_stage2 AS stage2
                  WHERE stage2.rank = 1
                  UNION
                  SELECT stage3.rpz_i_guid, stage3.src_guid,
                         NULL,NULL,NULL,NULL,NULL,
                         NULL,NULL,NULL,NULL,NULL,
                         stage3.zzsrm2_zomeet_date,stage3.zzsrm2_prot_date, stage3.zzsrm2_prot_id,
                         stage3.zmpp_guid,stage3.created_at,
                         NULL,NULL,NULL,NULL,NULL
                  FROM :lt_stag3 AS stage3
                  WHERE stage3.rank = 1
                  UNION
                  SELECT stage4.rpz_i_guid, stage4.src_guid,
                         NULL,NULL,NULL,NULL,NULL,
                         NULL,NULL,NULL,NULL,NULL,
                         NULL,NULL,NULL,NULL,NULL,
                         stage4.zzsrm2_zomeet_date,stage4.zzsrm2_prot_date,  stage4.zzsrm2_prot_id,
                         stage4.zmpp_guid, stage4.created_at
                  FROM :lt_stag4 AS stage4
                  WHERE stage4.rank = 1;

    et_protocol = SELECT rpz_i_guid, src_guid, MAX ( zzsrm2_date_meet_zo1_fact ) AS zzsrm2_date_meet_zo1_fact,
                         MAX ( zzsrm2_date_sing_prot1 ) AS zzsrm2_date_sing_prot1, MAX ( zzsrm2_prot_id_zp_zo1 ) AS zzsrm2_prot_id_zp_zo1,
                         MAX ( guid_z01 ) AS guid_z01, MAX ( created_at_z01 ) AS created_at_z01,
                         MAX ( zzsrm2_date_meet_zo2_fact ) AS zzsrm2_date_meet_zo2_fact, MAX ( zzsrm2_date_sing_prot2 ) AS zzsrm2_date_sing_prot2,
                         MAX ( zzsrm2_prot_id_zp_zo2 ) AS zzsrm2_prot_id_zp_zo2, MAX ( guid_z02 ) AS guid_z02, MAX ( created_at_z02 ) AS created_at_z02,
                         MAX ( zzsrm2_date_meet_zo3_fact ) AS zzsrm2_date_meet_zo3_fact, MAX ( zzsrm2_date_sing_prot3 ) AS zzsrm2_date_sing_prot3,
                         MAX ( zzsrm2_prot_id_zp_zo3 ) AS zzsrm2_prot_id_zp_zo3, MAX ( guid_z03 ) AS guid_z03, MAX ( created_at_z03 ) AS created_at_z03,
                         MAX ( zzsrm2_date_meet_zo4_fact ) AS zzsrm2_date_meet_zo4_fact, MAX ( zzsrm2_date_sing_prot4 ) AS zzsrm2_date_sing_prot4,
                         MAX ( zzsrm2_prot_id_zp_zo4 ) AS zzsrm2_prot_id_zp_zo4, MAX ( guid_z04 ) AS guid_z04, MAX ( created_at_z04 ) AS created_at_z04

                    FROM :lt_protocol
                    WHERE rpz_i_guid <> '00000000000000000000000000000000'
                    GROUP BY rpz_i_guid, src_guid
                    ;



  ENDMETHOD.

  METHOD get_zmpp_protocol
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING zddlsrm2_bus2200 bbp_pdhgp tvarvc
           bbp_pdhsc ztsrm2_scon_type
             zclsrm2_rep_base_amdp=>determine_protocol.


*    Если константа ZSRM2_SUBTYPE_UNCOMP не содержит значение, равное BBP_PDHGP–SUBTYPE, где BBP_PDHGP–GUID = GUID ЗП,
    lt_pdhsc_hdr = SELECT DISTINCT pdhcf_rpz.src_guid, hpur_pdhsc.zzsrm2_msp_pur
     FROM ( SELECT DISTINCT src_guid FROM :it_pdhcf_rpz ) as pdhcf_rpz
       INNER JOIN zddlsrm2_bus2200 as hpur_links
         ON pdhcf_rpz.src_guid = hpur_links.target_objkey AND
            hpur_links.s_prtype = 'HPUR' AND
            hpur_links.mandt = :iv_client
       INNER JOIN bbp_pdhgp as hpur_pdhgp
         ON hpur_links.source_guid = hpur_pdhgp.guid AND
            NOT hpur_pdhgp.subtype IN ( SELECT low FROM tvarvc WHERE NAME = 'ZSRM2_SUBTYPE_UNCOMP' AND mandt = :iv_client ) AND
            hpur_pdhgp.client = :iv_client
       LEFT JOIN bbp_pdhsc as hpur_pdhsc
         ON hpur_pdhgp.guid = hpur_pdhsc.guid AND
            hpur_pdhgp.client = :iv_client
            ;
*    leave only necesssary pdhsc
    lt_pdhsc = SELECT DISTINCT pdhcf_rpz.rpz_i_guid, pdhcf_rpz.src_guid, pdhcf_rpz.created_at, pdhcf_rpz.zzsrm2_zomeet_date,
                      pdhcf_rpz.zzsrm2_prot_date, pdhcf_rpz.zzsrm2_prot_id,
                      pdhsc_hdr.zzsrm2_msp_pur, scon_typet.qualif_sel, scon_typet.tech_sel,
                      scon_typet.comm_sel, comm_eval,
                      pdhcf_rpz.zmpp_guid, pdhcf_rpz.zmpp_subtype
                FROM :it_pdhcf_rpz as pdhcf_rpz
                  INNER JOIN :lt_pdhsc_hdr as pdhsc_hdr
                    on pdhcf_rpz.src_guid = pdhsc_hdr.src_guid
                  INNER JOIN ztsrm2_scon_type as scon_typet
                    on pdhcf_rpz.zmpp_subtype = scon_typet.subtype AND
                       scon_typet.mandt = :iv_client
                    ;

*   stage 1
*, выводим значение BBP_PDHSC-ZZSRM2_ZOMEET_DATE, где BBP_PDHSC= GUID СЗ, связанного с позицией через SRC_GUID, при этом тип СЗ BBP_PDHGP-SUBTYPE = ZTSRM2_SCON_TYPE-SUBTYPE,
*  где ZTSRM2_SCON_TYPE-QUALIF_SEL=  ‘12’,
*Если в ЗП BBP_PDHSC-ZZSRM2_MSP_PUR = 2 (МСП), тогда  TECH_SEL =  ‘22’ (вместо QUALIF_SEL=  ‘12’)
*(Если несколько подходящих СЗ, то берем из последнего  документа)
    lt_stage1 = SELECT rpz_i_guid, src_guid, zzsrm2_zomeet_date,zzsrm2_prot_date, zzsrm2_prot_id,
                       zmpp_guid,
                       rank() over (partition BY rpz_i_guid ORDER BY created_at asc ) AS rank,
                       created_at
                  FROM :lt_pdhsc
                  WHERE qualif_sel = '12' AND
                        zmpp_subtype <> 'SL';
    CALL "ZCLSRM2_REP_BASE_AMDP=>DETERMINE_PROTOCOL"( it_stage => :lt_stage1, et_stage => :lt_stage1 );
*  stage 2
*  TECH_SEL=  ‘22’ or zzsrm2_msp_pur = 2 and QUALIF_SEL  = 12 last doc
    lt_stage2 = SELECT rpz_i_guid, src_guid, zzsrm2_zomeet_date,zzsrm2_prot_date, zzsrm2_prot_id,
                   zmpp_guid,
                   rank() over (partition BY rpz_i_guid ORDER BY created_at asc ) AS rank,
                   created_at
              FROM :lt_pdhsc
              WHERE tech_sel = '22';
    CALL "ZCLSRM2_REP_BASE_AMDP=>DETERMINE_PROTOCOL"( it_stage => :lt_stage2, et_stage => :lt_stage2 );

*  stage3
*   COMM_SEL=  ‘23’ last doc
    lt_stag3 = SELECT rpz_i_guid, src_guid, zzsrm2_zomeet_date,zzsrm2_prot_date, zzsrm2_prot_id,
                   zmpp_guid,
                   rank() over (partition BY rpz_i_guid ORDER BY created_at asc ) AS rank,
                   created_at
              FROM :lt_pdhsc
              WHERE comm_sel = '23';
    CALL "ZCLSRM2_REP_BASE_AMDP=>DETERMINE_PROTOCOL"( it_stage => :lt_stag3, et_stage => :lt_stag3 );
*   stage 4 first doc
*   COMM_EVAL=  ‘24’
    lt_stag4 = SELECT rpz_i_guid, src_guid, zzsrm2_zomeet_date,zzsrm2_prot_date, zzsrm2_prot_id,
                   zmpp_guid,
                   rank() over (partition BY rpz_i_guid ORDER BY created_at asc ) AS rank,
                   created_at
              FROM :lt_pdhsc
              WHERE comm_eval = '24';
    CALL "ZCLSRM2_REP_BASE_AMDP=>DETERMINE_PROTOCOL"( it_stage => :lt_stag4, et_stage => :lt_stag4 );
*   unite data
    lt_protocol = SELECT stage1.rpz_i_guid, stage1.src_guid, stage1.zzsrm2_zomeet_date as zzsrm2_date_meet_zo1_fact,
                         stage1.zzsrm2_prot_date as zzsrm2_date_sing_prot1,stage1.zzsrm2_prot_id as zzsrm2_prot_id_zp_zo1,
                         stage1.zmpp_guid as guid_z01, stage1.created_at as created_at_z01,
*                         stage 2
                         null as zzsrm2_date_meet_zo2_fact,
                         NULL as zzsrm2_date_sing_prot2,NULL as zzsrm2_prot_id_zp_zo2,
                         NULL as guid_z02, NULL as created_at_z02,
*                        stage 3
                         NULL as zzsrm2_date_meet_zo3_fact,
                         NULL as zzsrm2_date_sing_prot3,NULL as zzsrm2_prot_id_zp_zo3,
                         NULL as guid_z03, NULL as created_at_z03,
*                        stage 4
                         NULL as zzsrm2_date_meet_zo4_fact,
                         NULL as zzsrm2_date_sing_prot4,NULL as zzsrm2_prot_id_zp_zo4,
                         NULL as guid_z04, NULL as created_at_z04
                  FROM :lt_stage1 AS stage1
                  WHERE stage1.rank = 1
                  UNION
                  SELECT stage2.rpz_i_guid, stage2.src_guid,
                         NULL,NULL,NULL,NULL,NULL,
                         stage2.zzsrm2_zomeet_date,
                         stage2.zzsrm2_prot_date,stage2.zzsrm2_prot_id,
                         stage2.zmpp_guid, stage2.created_at,
                         NULL,NULL,NULL,NULL,NULL,
                         NULL,NULL,NULL,NULL,NULL
                  FROM  :lt_stage2 AS stage2
                  WHERE stage2.rank = 1
                  UNION
                  SELECT stage3.rpz_i_guid, stage3.src_guid,
                         NULL,NULL,NULL,NULL,NULL,
                         NULL,NULL,NULL,NULL,NULL,
                         stage3.zzsrm2_zomeet_date,stage3.zzsrm2_prot_date, stage3.zzsrm2_prot_id,
                         stage3.zmpp_guid,stage3.created_at,
                         NULL,NULL,NULL,NULL,NULL
                  FROM :lt_stag3 AS stage3
                  WHERE stage3.rank = 1
                  UNION
                  SELECT stage4.rpz_i_guid, stage4.src_guid,
                         NULL,NULL,NULL,NULL,NULL,
                         NULL,NULL,NULL,NULL,NULL,
                         NULL,NULL,NULL,NULL,NULL,
                         stage4.zzsrm2_zomeet_date,stage4.zzsrm2_prot_date,  stage4.zzsrm2_prot_id,
                         stage4.zmpp_guid, stage4.created_at
                  FROM :lt_stag4 AS stage4
                  WHERE stage4.rank = 1;

    et_protocol = SELECT rpz_i_guid, src_guid, MAX ( zzsrm2_date_meet_zo1_fact ) AS zzsrm2_date_meet_zo1_fact,
                         MAX ( zzsrm2_date_sing_prot1 ) AS zzsrm2_date_sing_prot1, MAX ( zzsrm2_prot_id_zp_zo1 ) AS zzsrm2_prot_id_zp_zo1,
                         MAX ( guid_z01 ) AS guid_z01, MAX ( created_at_z01 ) AS created_at_z01,
                         MAX ( zzsrm2_date_meet_zo2_fact ) AS zzsrm2_date_meet_zo2_fact, MAX ( zzsrm2_date_sing_prot2 ) AS zzsrm2_date_sing_prot2,
                         MAX ( zzsrm2_prot_id_zp_zo2 ) AS zzsrm2_prot_id_zp_zo2, MAX ( guid_z02 ) AS guid_z02, MAX ( created_at_z02 ) AS created_at_z02,
                         MAX ( zzsrm2_date_meet_zo3_fact ) AS zzsrm2_date_meet_zo3_fact, MAX ( zzsrm2_date_sing_prot3 ) AS zzsrm2_date_sing_prot3,
                         MAX ( zzsrm2_prot_id_zp_zo3 ) AS zzsrm2_prot_id_zp_zo3, MAX ( guid_z03 ) AS guid_z03, MAX ( created_at_z03 ) AS created_at_z03,
                         MAX ( zzsrm2_date_meet_zo4_fact ) AS zzsrm2_date_meet_zo4_fact, MAX ( zzsrm2_date_sing_prot4 ) AS zzsrm2_date_sing_prot4,
                         MAX ( zzsrm2_prot_id_zp_zo4 ) AS zzsrm2_prot_id_zp_zo4, MAX ( guid_z04 ) AS guid_z04, MAX ( created_at_z04 ) AS created_at_z04

                    FROM :lt_protocol
                    WHERE rpz_i_guid <> '00000000000000000000000000000000'
                    GROUP BY rpz_i_guid, src_guid
                    ;

  ENDMETHOD.


  METHOD get_zp_act_regdata
         BY DATABASE PROCEDURE FOR HDB
          LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
          USING zvsrm2_idregdat.

    lt_act_regdata = select
                  CASE WHEN ( stage IN ( '090', '137','111','115','110','112','235' ) )
                  THEN actual_endda
                  END AS zzsrm2_open_qual_zo,

*                 STAGE =280=285 или =236=241 или =130 =160 или =140=170 или =117 или =121=151 или =120 =150
                  CASE WHEN ( stage IN ( '285', '241','160','170','117','151','150' ) )
                  THEN actual_endda
                  END AS zzsrm2_consid_qual_zo,

                  CASE WHEN ( stage IN ( '090', '137','113','136','111','115','191', '192', '172' ) )
                  THEN actual_endda
                  END AS zzsrm2_open_tech_zo,

*                 STAGE =122=123 или =161=162 или =173=174 или =220 = 232 или =140=170 или =117 или =211=230 или =121=151 или =120=150 или =212=231
                  CASE WHEN ( stage IN ( '123', '162','174','232','170','117','230','151', '150', '231' ) )
                  THEN actual_endda
                  END AS zzsrm2_consid_tech_zo,


                  CASE WHEN ( stage IN ( '090', '137','235','251','176','190','250','191', '325' ) )
                  THEN actual_endda
                  END AS zzsrm2_open_com_zo,

                  CASE WHEN ( stage IN ( '290', '330','120','212','221','262','269','271' ) )
                  THEN actual_endda
                  END AS zzsrm2_consid_com_zo,

*                 STAGE =260=261 или =211=230 или =121=151 или =212 =231 или =269=272 или =271=272 или =120=150 или =221=272 или =330=350
                  CASE WHEN ( stage IN ( '261', '230','151','231','272','150','350' ) )
                  THEN actual_endda
                  END AS zzsrm2_consid_comm_sel_zo,
*                 STAGE =290=295 или =270 или =230 или =261 или =330=350  или =120=150 или =212=231 или =221=272 или =262=270 или =269=272 или =271=272
                  CASE WHEN ( stage IN ( '295', '270','230','261','350','150','231','272', '270') )
                  THEN actual_endda
                  END AS zzsrm2_consid_comm_eval_zo,
*                 STAGE =290=295 или =270 или =330=350  или =120=150 или =212=231 или =221=272 или =262=270 или =269=272 или =271=272
                  CASE WHEN ( stage IN ( '295', '270','350','150','231','272','270','272') )
                  THEN actual_endda
                  END AS zzsrm2_date_prot_zo,
                  object_id,
                  row_number() over (partition BY object_id) AS row_num
                  FROM zvsrm2_idregdat
                    INNER JOIN :it_zp as zp
                      ON p_guid = zp.guid
*                      AND version_no <> 2
*                      AND
*                         TO_INT( version_no ) <> 2
                  WHERE mandt = :iv_client
*                  AND
*                        stage IN ( '090',
*                          '110', '111', '112','113', '115','117',
*                          '120', '121', '122',
*                          '130','136','137',
*                          '140',
*                          '161',
*                          '172','173','176',
*                          '190','191', '192',
*                          '220', '211', '212',
*                          '221', '235', '236',
*                          '250', '251',
*                          '260','262', '269',
*                          '271',
*                          '280',
*                          '290',
*                          '325',
*                          '330' )

                          ;


     lt_act_regdata1 = SELECT first_value(zzsrm2_open_qual_zo) over (
                                  partition BY object_id
                                  ORDER BY
                                    CASE WHEN zzsrm2_open_qual_zo IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                    row_num
                                ) as  zzsrm2_open_qual_zo,
                             first_value(zzsrm2_consid_qual_zo) over (
                                  partition BY object_id
                                  ORDER BY
                                    CASE WHEN zzsrm2_consid_qual_zo IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                    row_num
                                ) as zzsrm2_consid_qual_zo,
                              first_value(zzsrm2_open_tech_zo) over (
                                  partition BY object_id
                                  ORDER BY
                                    CASE WHEN zzsrm2_open_tech_zo IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                    row_num
                                ) as zzsrm2_open_tech_zo,
                              first_value(zzsrm2_consid_tech_zo) over (
                                  partition BY object_id
                                  ORDER BY
                                    CASE WHEN zzsrm2_consid_tech_zo IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                    row_num
                                ) as zzsrm2_consid_tech_zo,
                              first_value(zzsrm2_open_com_zo) over (
                                  partition BY object_id
                                  ORDER BY
                                    CASE WHEN zzsrm2_open_com_zo IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                    row_num
                                ) as zzsrm2_open_com_zo,
                              first_value(zzsrm2_consid_com_zo) over (
                                  partition BY object_id
                                  ORDER BY
                                    CASE WHEN zzsrm2_consid_com_zo IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                    row_num
                                ) as zzsrm2_consid_com_zo,
                             first_value(zzsrm2_consid_comm_sel_zo) over (
                                partition BY object_id
                                ORDER BY
                                  CASE WHEN zzsrm2_consid_comm_sel_zo IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                  row_num
                              ) as zzsrm2_consid_comm_sel_zo,
                             first_value(zzsrm2_consid_comm_eval_zo) over (
                                partition BY object_id
                                ORDER BY
                                  CASE WHEN zzsrm2_consid_comm_eval_zo IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                  row_num
                              ) as zzsrm2_consid_comm_eval_zo,
                             first_value(zzsrm2_date_prot_zo) over (
                                partition BY object_id
                                ORDER BY
                                  CASE WHEN zzsrm2_date_prot_zo IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                  row_num
                              ) as zzsrm2_date_prot_zo,
                             object_id,
                             dense_rank() over (
                                partition BY object_id
                                ORDER BY row_num
                              ) idrank
                      FROM :lt_act_regdata;

     et_act_regdata = SELECT zzsrm2_open_qual_zo,
                             zzsrm2_consid_qual_zo,
                             zzsrm2_open_tech_zo,
                             zzsrm2_consid_tech_zo,
                             zzsrm2_open_com_zo,
                             zzsrm2_consid_com_zo,
                             zzsrm2_consid_comm_sel_zo,
                             zzsrm2_consid_comm_eval_zo,
                             zzsrm2_date_prot_zo,
                            object_id
                      FROM :lt_act_regdata1
                      WHERE idrank = 1;


  ENDMETHOD.


  METHOD get_zp_ilot_links
    BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
       USING zvsrm2_busp zsrm2_ibush
             zvsrm2_icrmjest
             zddl_rbslpptab bbp_pdigp crmd_orderadm_i
             crmd_orderadm_h bbp_pdhgp bbp_pdhsc.
*              zvsrm2_rp_slpink crmd_orderadm_h.

    lt_links_0 = select rpz.guid_h as rpz_guid,rpz.guid_i as rpz_pos_guid,
                      ilot_hdr.guid as ilot_guid, ilot_pos.guid as ilot_pos_guid,
                      ilot_hdr.src_guid as zp_guid,
                      NULL AS slpp_h_guid,
                      NULL AS slpp_h_object_id,
                      NULL AS slpp_i_guid,
                      NULL AS slpp_i_ps_ipt,
                      NULL AS slpp_agr_guid
                from :it_rpz as rpz
                  inner join zvsrm2_busp as ilot_pos on
                        ilot_pos.src_guid = rpz.guid_i
                    and ilot_pos.del_ind  = ''
                    AND ilot_pos.client = :iv_client
                  INNER JOIN zsrm2_ibush AS ilot_hdr ON
                        ilot_hdr.guid = ilot_pos.header
                    and ilot_hdr.object_type  = 'BUS2200'
                    AND ilot_hdr.process_type = 'ILOT'
                    AND ilot_hdr.version_type in ('', 'A')
                    and ilot_hdr.client = :iv_client;
**  add slpp positions
   lt_links_1 =  select slpp_tab.ppr_h_guid AS rpz_guid,
                           slpp_tab.ppr_i_guid AS rpz_pos_guid,
                           ilot.ilot_guid, ilot.ilot_pos_guid,
                           slpp_tab.hpur_guid AS zp_guid,
                           slpp_tab.slpp_h_guid,
                           slpp_tab.slpp_h_object_id,
                           slpp_tab.slpp_i_guid,
                           slpp_tab.slpp_i_ps_ipt,
                           slpp_tab.slpp_agr_guid
                FROM zddl_rbslpptab AS slpp_tab
                 LEFT JOIN
                 ( SELECT ilot_igp.guid AS ilot_pos_guid, ilot_adm_h.guid AS ilot_guid,
                        ilot_igp.src_guid, ilot_pdhsc.zzsrm2_hpur_guid
                    FROM bbp_pdigp       as ilot_igp
                      INNER join crmd_orderadm_i as ilot_adm_i on ilot_adm_i.guid   = ilot_igp.guid
                      INNER join crmd_orderadm_h as ilot_adm_h on ilot_adm_h.guid   = ilot_adm_i.header
                      INNER join bbp_pdhgp       as ilot_hgp   on ilot_hgp.guid     = ilot_adm_h.guid AND
                        ilot_hgp.version_type in ('', 'A')
                      INNER JOIN bbp_pdhsc AS ilot_pdhsc ON ilot_pdhsc.guid = ilot_adm_h.guid
                  WHERE ilot_igp.del_ind = ''
                    ) AS ilot
                 ON ilot.src_guid = slpp_tab.slpp_guid_src_for_ilot AND
                    slpp_tab.hpur_guid = ilot.zzsrm2_hpur_guid

                WHERE EXISTS
                   ( SELECT guid_i FROM :it_rpz
                        WHERE guid_i NOT IN
                      ( select rpz_pos_guid from :lt_links_0 )
                       AND
                       guid_i = slpp_tab.ppr_i_guid
                     ) AND
*                exclude deleted slpp pos
                   NOT EXISTS ( SELECT guid
                    FROM bbp_pdigp AS slpp_igp
                        WHERE slpp_igp.guid = slpp_tab.slpp_i_guid AND
                              slpp_igp.del_ind = 'X'
                   )
*                   AND
*                   slpp_tab.pr_igp_src_guid <> '00000000000000000000000000000000'
                   AND
                  not exists ( select  objnr
                               from zvsrm2_icrmjest
                               where objnr = slpp_tab.slpp_h_guid and
                                     stat = 'I1040' and
                                     inact = '' AND
                                     zvsrm2_icrmjest.mandt = :iv_client )
                                      AND
                  EXISTS ( SELECT guid FROM bbp_pdhgp
                            WHERE guid = slpp_tab.hpur_guid AND
                                  version_type = '' AND
                                  mandt = :iv_client
                                  )
                                     ;

   lt_links_1 = SELECT * FROM :lt_links_1
                UNION
                SELECT rpz_guid, rpz_pos_guid, ilot_guid, ilot_pos_guid,zp_guid,
                NULL AS slpp_h_guid,
                NULL AS slpp_h_object_id,
                  NULL AS slpp_i_guid,
                  NULL AS slpp_i_ps_ipt,
                  NULL AS slpp_agr_guid
                 FROM :lt_links_0
                ;


*rpz.guid_h as rpz_guid,rpz.guid_i as rpz_pos_guid,
*                      ilot_hdr.guid as ilot_guid, ilot_pos.guid as ilot_pos_guid,
*                      ilot_hdr.src_guid as zp_guid,
*                      NULL AS slpp_h_guid,
*                      NULL AS slpp_h_object_id,
*                      NULL AS slpp_i_guid,
*                      NULL AS slpp_i_ps_ipt,
*                      NULL AS slpp_agr_guid

    lt_links = SELECT links.rpz_guid,links.rpz_pos_guid,
                      links.ilot_guid, links.ilot_pos_guid,
                      links.zp_guid,
                      links.slpp_h_guid,
                      links.slpp_h_object_id,
                      links.slpp_i_guid,
                      links.slpp_i_ps_ipt,
                      links.slpp_agr_guid,
*                      case hpur_hdr.doc_closed
*                        when 'X' then 2
*                        else 1
*                      end as priority,
                      hpur_hdr.created_at as hpur_created_at,
                      rank() over (partition BY links.rpz_pos_guid order by ( case hpur_hdr.doc_closed
                        when 'X' then 2
                        else 1
                      end ) asc ) as rank_hpur
                from :lt_links_1 as links
                  left join zsrm2_ibush as hpur_hdr on
                        hpur_hdr.guid = links.zp_guid
                    and hpur_hdr.object_type  = 'BUS2200'
                    AND hpur_hdr.process_type = 'HPUR'
                    AND hpur_hdr.version_type in ('', 'A')
                    and hpur_hdr.client = :iv_client
                WHERE NOT EXISTS  ( select  objnr
                                    FROM zvsrm2_icrmjest
                                    WHERE objnr = links.ilot_guid and
                                          stat = 'I1040' and
                                          inact = '' ) and
                      not exists ( select  objnr
                                    from zvsrm2_icrmjest
                                    where objnr = links.zp_guid and
                                          stat = 'I1040' and
                                          inact = '' )
                                          ;
*      lt_links = SELECT * FROM :lt_links WHERE rank_hpur = 1;

      et_links =
*        for those with created zp
        SELECT links.rpz_guid,links.rpz_pos_guid,
                      ilot_guid, ilot_pos_guid,
                      zp_guid,slpp_h_guid,
                      slpp_h_object_id,
                      slpp_i_guid,
                      slpp_i_ps_ipt,
                      slpp_agr_guid
                  from :lt_links as links
                  WHERE rank_hpur = 1;

*                    inner join
*                      ( select rpz_guid, rpz_pos_guid,
*                               max (priority ) as priority,
*                               max(  hpur_created_at ) as hpur_created_at
*                        from :lt_links
*                        group by rpz_guid, rpz_pos_guid
*                         ) as zp_max
*                  on links.rpz_guid = zp_max.rpz_guid and
*                     links.rpz_pos_guid = zp_max.rpz_pos_guid and
*                     links.hpur_created_at = zp_max.hpur_created_at AND
*                     links.zp_guid is not null
*       UNION
*        SELECT links.rpz_guid,links.rpz_pos_guid,
*                      ilot_guid, ilot_pos_guid,
*                      zp_guid,slpp_h_guid,
*                      slpp_h_object_id,
*                      slpp_i_guid,
*                      slpp_i_ps_ipt,
*                      slpp_agr_guid
*        FROM :lt_links as links
*        WHERE links.zp_guid is null
*        ;


  endmethod.


  METHOD get_zp_pl_regdata
           BY DATABASE PROCEDURE FOR HDB
          LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
          USING zvsrm2_idregdat bbp_pdhad_v bbp_pdhgp.

*   find docs
    lt_zp_vers = SELECT zp.*, to_integer( CASE WHEN locate (version_no, 'C' ) > 0 THEN
                                  substr_after ( version_no, 'C' )
                                ELSE
                                  version_no
                                END ) AS version_no_nb
                    FROM :it_zp AS zp;

    lt_docs = SELECT bbp_pdhad_v.guid, object_id,version_no, version_type
                    FROM bbp_pdhad_v
                      INNER JOIN bbp_pdhgp as h_pdhgp
                        ON bbp_pdhad_v.guid = h_pdhgp.guid
                    WHERE object_id IN
                    ( SELECT object_id from :lt_zp_vers
                        WHERE version_no_nb > 1
                            )
                        AND
                    ( h_pdhgp.version_type = 'H' AND to_integer ( h_pdhgp.version_no ) = 1
                        )
              UNION
              SELECT guid, object_id, version_no, null
                FROM :lt_zp_vers
                WHERE version_no_nb = 0;
    IF is_empty(:lt_docs) THEN
      return;
    END if;

*   if document h does not exist in regdata then take an active document
    lt_docs_h_vers = SELECT guid, object_id,version_no, version_type
                        FROM :lt_docs as docs
                        WHERE version_no = 1 AND version_type = 'H' AND
                              NOT EXISTS ( SELECT p_guid
                                            FROM zvsrm2_idregdat
                                            WHERE p_guid = docs.guid  );
    IF NOT is_empty(:lt_docs_h_vers) THEN
*       find active docs
        lt_docs_a_vers = SELECT guid, object_id,version_no, version_type
                            FROM :it_zp AS zp
                            WHERE object_id IN ( SELECT object_id FROM :lt_docs_h_vers );
        lt_docs = SELECT *
                    FROM :lt_docs AS docs
                    WHERE object_id NOT IN ( SELECT object_id FROM :lt_docs_a_vers )
                  UNION
                  SELECT * FROM :lt_docs_a_vers;
    END if;
    lt_pl_regdata = SELECT
        CASE WHEN ( stage IN ( '290', '121', '211', '260', '330' )  ) THEN
          actual_endda
        WHEN ( stage IN ( '120', '212', '221', '262', '269', '271' ) ) THEN
          actual_endda
        END AS zzsrm2_consid_com_pl,

*       STAGE =260=261 или =211=230 или =121=151 или =212 =231 или =269=272 или =271=272 или =120=150 или =221=272 или =330=350
        CASE WHEN ( stage IN ( '261', '230', '151', '231', '272', '272', '150', '272', '350' )  ) THEN
          actual_endda
        END AS zzsrm2_consid_comm_sel_pl,

*       STAGE =290=295 или =121=270 или =211=230 или =260 =261 или =330=350 или =120 =150 или =212=231 или =221 =272 или =262=270 или =269=272 или =271 =272
        CASE WHEN ( stage IN ( '295', '270', '230', '261', '350', '150', '231', '272', '270', '272' )  ) THEN
          actual_endda
        END AS zzsrm2_consid_comm_eval_pl,


        CASE WHEN ( stage IN ( '155', '234', '060', '073', '181', '240', '233', '072', '180', '071', '179' )  ) THEN
          actual_endda
        END AS zzsrm2_end_quot_pl,

        CASE WHEN ( stage IN ( '090', '137', '111', '115', '110', '112', '235' )  ) THEN
          actual_endda
        END AS zzsrm2_open_qual_pl,

        CASE WHEN ( stage IN ( '285', '241', '160', '170', '117', '151', '150' )  ) THEN
          actual_endda
        END AS zzsrm2_consid_qual_pl,

        CASE WHEN ( stage IN ( '090', '137', '235', '251', '176', '190', '250', '191', '325' )  ) THEN
          actual_endda
        END AS zzsrm2_open_com_pl,

*       STAGE =295 или =270 или =330=350  или =120=150 или =212=231 или =221=272 или =262=270 или =269=272 или =271=272
        CASE WHEN ( stage IN ( '295', '270', '350', '150', '231', '272', '270', '272' )  ) THEN
          actual_endda
        END AS zzsrm2_date_prot_pl,

        CASE WHEN ( stage IN ( '117' )  ) THEN
          actual_endda
        END AS zzsrm2_consid_zrg_pl,

*       STAGE =122=123 или =161=162 или =173=174 или =220 = 232 или =140=170 или =117 или =211=230 или =121=151 или =120=150 или =212=231
        CASE WHEN ( stage IN ( '123', '162', '174', '232', '170', '117', '230', '151', '150', '231' )  ) THEN
          actual_endda
        END AS zzsrm2_consid_tech_pl,

        CASE WHEN ( stage IN ( '090', '137', '113', '136', '111', '115', '191', '192', '172' )  ) THEN
          actual_endda
        END AS zzsrm2_open_tech_pl,

        object_id,
        row_number() over (partition BY object_id) AS row_num
      FROM zvsrm2_idregdat
        INNER JOIN :lt_docs as docs
          ON p_guid = docs.guid
                         ;


    lt_pl_regdata1 = SELECT  first_value(zzsrm2_consid_com_pl) over (
                                  partition BY object_id
                                  ORDER BY
                                    CASE WHEN zzsrm2_consid_com_pl IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                    row_num
                                ) as  zzsrm2_consid_com_pl,
                             first_value(zzsrm2_consid_comm_sel_pl) over (
                                  partition BY object_id
                                  ORDER BY
                                    CASE WHEN zzsrm2_consid_comm_sel_pl IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                    row_num
                                ) as  zzsrm2_consid_comm_sel_pl,
                             first_value(zzsrm2_consid_comm_eval_pl) over (
                                  partition BY object_id
                                  ORDER BY
                                    CASE WHEN zzsrm2_consid_comm_eval_pl IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                    row_num
                                ) as  zzsrm2_consid_comm_eval_pl,
                             first_value(zzsrm2_end_quot_pl) over (
                                  partition BY object_id
                                  ORDER BY
                                    CASE WHEN zzsrm2_end_quot_pl IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                    row_num
                                ) as  zzsrm2_end_quot_pl,
                             first_value(zzsrm2_open_qual_pl) over (
                                  partition BY object_id
                                  ORDER BY
                                    CASE WHEN zzsrm2_open_qual_pl IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                    row_num
                                ) as  zzsrm2_open_qual_pl,
                             first_value(zzsrm2_consid_qual_pl) over (
                                   partition BY object_id
                                   ORDER BY
                                     CASE WHEN zzsrm2_consid_qual_pl IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                     row_num
                                 ) as  zzsrm2_consid_qual_pl,
                              first_value(zzsrm2_open_com_pl) over (
                                   partition BY object_id
                                   ORDER BY
                                     CASE WHEN zzsrm2_open_com_pl IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                     row_num
                                 ) as  zzsrm2_open_com_pl,

                              first_value(zzsrm2_date_prot_pl) over (
                                   partition BY object_id
                                   ORDER BY
                                     CASE WHEN zzsrm2_date_prot_pl IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                     row_num
                                 ) as  zzsrm2_date_prot_pl,
                              first_value(zzsrm2_consid_zrg_pl) over (
                                   partition BY object_id
                                   ORDER BY
                                     CASE WHEN zzsrm2_consid_zrg_pl IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                     row_num
                                 ) as  zzsrm2_consid_zrg_pl,

                              first_value(zzsrm2_consid_tech_pl) over (
                                   partition BY object_id
                                   ORDER BY
                                     CASE WHEN zzsrm2_consid_tech_pl IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                     row_num
                                 ) as  zzsrm2_consid_tech_pl,

                             first_value(zzsrm2_open_tech_pl) over (
                                   partition BY object_id
                                   ORDER BY
                                     CASE WHEN zzsrm2_open_tech_pl IS NULL THEN 2 ELSE 1 END, -- prioritize non-null value1
                                     row_num
                                 ) as  zzsrm2_open_tech_pl,

                             object_id,
                             dense_rank() over (
                                partition BY object_id
                                ORDER BY row_num
                              ) idrank
                     FROM :lt_pl_regdata;

    et_pl_regdata = SELECT zzsrm2_consid_com_pl,
                           zzsrm2_consid_comm_sel_pl,
                           zzsrm2_consid_comm_eval_pl,
                           zzsrm2_end_quot_pl,
                           zzsrm2_open_qual_pl,
                           zzsrm2_consid_qual_pl,
                           zzsrm2_open_tech_pl,
                           zzsrm2_consid_tech_pl,
                           zzsrm2_date_prot_pl,
                           zzsrm2_consid_zrg_pl,
                           zzsrm2_open_com_pl,
                           object_id
                      FROM :lt_pl_regdata1
                      WHERE idrank = 1;

  ENDMETHOD.


  METHOD get_zp_wf_dates
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING zsrm2_i_busd
           zclsrm2_andev_model_amdp=>get_wf_task.
*    get docs
    lt_docs = select client,guid, object_id
               FROM
                 zsrm2_i_busd as docs
               WHERE
                  docs.object_id in
                  ( select object_id  from :it_zp )  and
                 (
                   version_type = '' )  and
                 docs.client = :iv_client;
    lt_guids = SELECT guid FROM :lt_docs;

    CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>GET_WF_TASK"( iv_client => :iv_client, it_doc_guids => :lt_guids,
        iv_wi_rh_task => 'TS90100031',  iv_level_status => 'COMPLETED', iv_first => 'X',iv_last => '', et_wf_tasks => :lt_ts90100031 );


    CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>GET_WF_TASK"( iv_client => :iv_client, it_doc_guids => :lt_guids,
        iv_wi_rh_task => 'TS90100023', iv_level_status => 'COMPLETED', iv_first => 'X',iv_last => '',  et_wf_tasks => :lt_ts90100023 );

*   prepare final result
    et_wf_dates = SELECT docs.object_id, ts90100031.crea_tmp as zzsrm2_date_zo_secretary_fact,
                         NULL AS zzsrm2_date_publisher_fact
                    from :lt_ts90100031 as ts90100031
                        INNER JOIN :lt_docs AS docs
                            ON docs.guid = ts90100031.doc_guid
                  UNION
                  SELECT docs.object_id, NULL as zzsrm2_date_zo_secretary_fact,
                        ts90100023.crea_tmp as zzsrm2_date_publisher_fact
                    from :lt_ts90100023 as ts90100023
                    INNER JOIN :lt_docs AS docs
                        ON docs.guid = ts90100023.doc_guid
               ;
    et_wf_dates  = SELECT object_id, MIN ( zzsrm2_date_zo_secretary_fact ) AS zzsrm2_date_zo_secretary_fact,
                           MIN ( zzsrm2_date_publisher_fact ) AS zzsrm2_date_publisher_fact
                   FROM :et_wf_dates
                   GROUP BY object_id;

  endmethod.


  METHOD select_rpz_data
       BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
       USING zvsrm2_c_rbrpz zvsrm2_icrmjest
             zclsrm2_rep_base_amdp=>get_ksm
             zclsrm2_rep_base_amdp=>filter_max_rows
             zvsrm2_icrmjest
             zclsrm2_rep_base_amdp=>get_zp_ilot_links
             ztz0029  cdpos cdhdr ztcard_tender_rq
             zddl_rpz_rel_ppl zvsrm2_busp
             ztsrm2_scon_rsnt "transfer
             crmd_orderadm_h crm_jest
              .



    declare lv_rpz_guids_empty boolean;
    declare lv_filter varchar( 10000 );
    declare i int;
    declare lv_filter_count integer;

*   prepare filters
    lt_rpz_links = SELECT DISTINCT rpz_guid FROM :it_rpz_links;
    lv_filter_count = record_count(:lt_rpz_links) + record_count(:it_rpz_guids);
    lv_filter = '';
    IF record_count(:lt_rpz_links) > 0 THEN
      lt_c_rbrpz = SELECT * FROM zvsrm2_c_rbrpz
                    WHERE EXISTS (  SELECT rpz_guid AS guid FROM :lt_rpz_links
                        WHERE zvsrm2_c_rbrpz.guid_h = rpz_guid );
      lt_rpz = apply_filter( :lt_c_rbrpz, :iv_filter );
    ELSEIF lv_filter_count < 50 THEN
      FOR i IN 1 .. record_count(:lt_rpz_links)
      DO
        IF :lv_filter <> '' then
          lv_filter = :lv_filter || ' OR ';
        ELSEIF:iv_filter <> '' THEN
          lv_filter = :iv_filter || ' AND ( ';
        END IF ;
        lv_filter = :lv_filter || 'GUID_H ='''|| :lt_rpz_links.rpz_guid[ :i ] || '''';
      END for;

      FOR i IN 1 .. record_count(:it_rpz_guids)
      DO
        IF :lv_filter <> '' THEN
          lv_filter = :lv_filter || ' OR ';
        ELSEIF:iv_filter <> '' THEN
          lv_filter = :iv_filter || ' AND ( ';
        END IF ;
        lv_filter = :lv_filter || 'GUID_H ='''|| :it_rpz_guids.guid[ :i ] || '''';
      END for;
      IF lv_filter = '' AND iv_filter <> '' THEN
        lv_filter = iv_filter;
      ELSEIF lv_filter <> '' AND iv_filter <> '' THEN
        lv_filter = lv_filter || ' ) ';
      END if;
      lt_rpz = apply_filter( zvsrm2_c_rbrpz, :lv_filter );
    ELSEIF lv_filter_count > 100 and :iv_filter <> '' THEN
      lt_rpz = apply_filter( zvsrm2_c_rbrpz, :iv_filter );
      lt_rpz = SELECT *
                FROM :lt_rpz as rpz
                WHERE EXISTS ( SELECT rpz_guid AS guid FROM :lt_rpz_links
                                WHERE rpz_guid = rpz.guid_h
                               UNION
                               SELECT guid FROM :it_rpz_guids
                                WHERE guid = rpz.guid_h
                               );
    ELSEIF lv_filter_count > 100 THEN
      lt_rpz = SELECT *
                FROM zvsrm2_c_rbrpz
                WHERE EXISTS ( SELECT rpz_guid AS guid FROM :lt_rpz_links
                                WHERE rpz_guid = zvsrm2_c_rbrpz.guid_h
                               UNION
                               SELECT guid FROM :it_rpz_guids
                                WHERE guid = zvsrm2_c_rbrpz.guid_h
                               );
    END if;
*   clean the variable
    lt_rpz_links = SELECT * FROM :lt_rpz_links WHERE 1 = 2;
*   leave only relevant data
    lt_c_rbrpz_rank = SELECT rpz.*,
                        rank() over (partition BY rpz.guid_i order by  rpz.valid_from desc ) as rank_valid_from
                        FROM :lt_rpz AS rpz
                        WHERE rpz.valid_from <= to_nvarchar( current_timestamp, 'YYYYMMDDHH24MISS' ) AND
                              rpz.valid_to >= to_nvarchar( current_timestamp, 'YYYYMMDDHH24MISS' );
    lt_rpz = SELECT rpz.*
              FROM :lt_rpz as rpz
              INNER JOIN :lt_c_rbrpz_rank as rbrpz_rank
                ON rpz.guid_i = rbrpz_rank.guid_i AND
                   rpz.valid_from = rbrpz_rank.valid_from AND
                   rbrpz_rank.rank_valid_from = 1;

    lt_c_rbrpz_rank = SELECT * FROM :lt_c_rbrpz_rank WHERE 1 = 2;

    IF is_empty ( :lt_rpz ) THEN
      return;
    END IF ;

    lt_base = SELECT rpz.*
      from :lt_rpz as rpz
      where EXISTS
        ( select objnr from crm_jest as jest
            WHERE jest.stat = 'I1141' AND
                  jest.inact = '' AND
                  jest.mandt = :iv_client AND
                  NOT EXISTS (
                    SELECT objnr
                      FROM zvsrm2_icrmjest AS b
                      WHERE b.stat = 'I9903' AND
                            b.inact = '' AND
                            b.mandt = :iv_client AND
                            b.objnr = jest.objnr
                     ) AND
                   jest.objnr = rpz.guid_h
            );
    lt_rpz = SELECT * FROM :lt_rpz WHERE 1 = 2;
    CALL "ZCLSRM2_REP_BASE_AMDP=>FILTER_MAX_ROWS"( iv_max_rows => :iv_max_rows, iv_rep_type => :iv_rep_type,
      it_rpz => :lt_base, et_rpz => :lt_base );

    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_KSM"( iv_client => :iv_client, it_rpz => :lt_base, iv_langu => :iv_langu,
                                           et_ksm => :lt_ksm );

    IF is_empty ( :it_rpz_links ) THEN
*     get zp ilot links
      CALL "ZCLSRM2_REP_BASE_AMDP=>GET_ZP_ILOT_LINKS"( iv_client => :iv_client, it_rpz => :lt_base,
                                             et_links => :lt_zp_ilot_links );
    ELSE
      lt_zp_ilot_links = SELECT * FROM :it_rpz_links;
    END if;

**    find ppl docs
*     join all data
    lt_count_pos =  SELECT guid_h, COUNT ( base.guid_i ) AS rpz_pos_count
                        FROM :lt_base as base
                        GROUP BY guid_h;

    et_base = SELECT base.*, ksm.ksmk, ksm.kschl AS ksmk_txt, ksm.ksmk2, ksm.kschl2 AS ksmk_txt2,
                     zp_ilot_links.ilot_guid, zp_ilot_links.ilot_pos_guid,
                     zp_ilot_links.zp_guid, LEFT ( aedat_sv, 4 ) AS zzsrm2_nmc_year,
                     krzpz.zzsrm2_sogl_krspz,
                     krzpz.objectid AS krzpz_object_id,
                     COALESCE( rpz_rel_ppl.object_id_ppl, zp_ilot_links.slpp_h_object_id ) AS object_id_ppl,
                     ilot_pos.number_int as zzsrm2_pos_no,
                     ilot_pos.quantity as ilot_quantity,
                     ilot_pos.unit as ilot_unit,
                     count_pos.rpz_pos_count AS rpz_pos_count,
                     slpp_h_guid,
                     slpp_h_object_id,
                     slpp_i_guid,
                     slpp_i_ps_ipt,
                     slpp_agr_guid,
*                     NULL AS notreas_txt,
*                     NULL AS bidi_free_reason_id_txt,
*                     NULL AS zp_msp_object_id,
*                     " //transfer comm for MSP
                     scon_rsnt_notreas.reason_txt AS notreas_txt,
                     scon_rsnt_bidifree.reason_txt AS bidi_free_reason_id_txt,
                     orderadm_h_zp_msp.object_id AS zp_msp_object_id
*                     "//transfer
                FROM :lt_base as base
                  left join :lt_ksm as ksm
                    on base.zz0011 = ksm.CLASS
                  LEFT JOIN :lt_zp_ilot_links as zp_ilot_links
                    ON base.guid_i = zp_ilot_links.rpz_pos_guid
*                   ***********slt tables***************
*                   rpz form year zzsrm2_nmc_year
                  LEFT ONE TO ONE JOIN ( SELECT numtxt, MAX( aedat_sv ) AS aedat_sv
                                FROM ztz0029 WHERE client = :iv_client GROUP BY numtxt  ) AS _ztz0029
                    ON base.erp_slot = _ztz0029.numtxt
*                   ZZSRM2_SOGL_KRSPZ
                  LEFT ONE TO ONE JOIN ( SELECT MAX( udate ) AS zzsrm2_sogl_krspz,
                                     tender_rq.znum_crdtnd AS objectid
                                FROM ztcard_tender_rq as tender_rq
                                LEFT ONE TO MANY JOIN cdpos
                                  ON cdpos.objectid = tender_rq.znum_crdtnd AND
                                     cdpos.objectclas = 'ZCRDTND' AND
                                     cdpos.fname = 'STATUS' AND
                                     cdpos.value_new IN ( '2', '6' ) AND
                                     cdpos.mandant  = tender_rq.client
                                LEFT ONE TO MANY JOIN cdhdr
                                  ON cdhdr.objectid = cdpos.objectid AND
                                     cdhdr.objectclas = cdpos.objectclas AND
                                     cdhdr.changenr = cdpos.changenr and
                                     cdhdr.mandant = tender_rq.client
                                  WHERE status IN ( '2', '6' ) AND
                                        tender_rq.client = :iv_client
                                GROUP BY tender_rq.znum_crdtnd
                                    ) AS krzpz
                     ON base.zzsrm2_id_krspz = krzpz.objectid
*                   PPL LINKS
                    LEFT JOIN zddl_rpz_rel_ppl AS rpz_rel_ppl
                      ON base.guid_h = rpz_rel_ppl.guid_ppr
                    LEFT JOIN zvsrm2_busp as ilot_pos
                      ON zp_ilot_links.ilot_pos_guid = ilot_pos.guid
                    LEFT JOIN :lt_count_pos as count_pos
                      ON base.guid_h = count_pos.guid_h
*                   transfer
                    LEFT MANY TO ONE JOIN ztsrm2_scon_rsnt AS scon_rsnt_notreas
                      ON base.zzsrm2_notreas = scon_rsnt_notreas.reason_id AND
                         scon_rsnt_notreas.reason_type = '2' AND
                         scon_rsnt_notreas.langu = 'R' AND
                         scon_rsnt_notreas.mandt = :iv_client
                    LEFT MANY TO ONE JOIN ztsrm2_scon_rsnt AS scon_rsnt_bidifree
                      ON base.zzsrm2_bidi_free_reason_id = scon_rsnt_bidifree.reason_id AND
                         scon_rsnt_bidifree.reason_type = '4' AND
                         scon_rsnt_bidifree.langu = 'R' AND
                         scon_rsnt_bidifree.mandt = :iv_client
                    LEFT ONE TO ONE JOIN crmd_orderadm_h AS orderadm_h_zp_msp
                        ON base.zzsrm2_zp_msp = orderadm_h_zp_msp.guid
                    ;
*   authority
    et_base = SELECT * FROM :et_base
                WHERE EXISTS ( SELECT guid
                                FROM :it_auth_guids AS auth_guids
                                WHERE guid_h = auth_guids.guid OR zp_guid = auth_guids.guid );

  ENDMETHOD.


  METHOD zifsrm2_rep_base_amdp~get_closed_hpur_sz
    BY DATABASE PROCEDURE FOR HDB
    LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
    USING zvsrm2_icrmjest crmd_orderadm_h bbp_pdhsc.

*   find closed hpur
    lt_closed_hpur = SELECT guid
                        FROM crmd_orderadm_h AS orderadm_h
                        INNER JOIN zvsrm2_icrmjest AS crmjest
                          ON orderadm_h.guid = crmjest.objnr AND
                             orderadm_h.client = crmjest.mandt AND
                             crmjest.stat = 'I1023' AND
                             crmjest.inact = ''
                        WHERE guid IN ( SELECT guid FROM :it_hpur_guids ) AND
                              client = :iv_client;
    IF is_empty(:lt_closed_hpur) THEN
      return;
    END if;

*   find not deleted linked sz
    lt_linked_sz = SELECT hpur.guid AS hpur_guid, orderadm_h.created_at, sz_pdhsc.zzsrm2_prot_date,
                          rank() over (partition BY hpur.guid order by orderadm_h.created_at desc ) as rank
                    FROM bbp_pdhsc as sz_pdhsc
                      INNER JOIN :lt_closed_hpur as hpur
                        ON sz_pdhsc.guid = hpur.guid
                      INNER JOIN crmd_orderadm_h AS orderadm_h
                        ON sz_pdhsc.guid = orderadm_h.guid AND
                           orderadm_h.client = :iv_client
                   WHERE sz_pdhsc.client = :iv_client AND
                         NOT EXISTS ( SELECT objnr
                                        FROM zvsrm2_icrmjest
                                        WHERE zvsrm2_icrmjest.mandt = :iv_client AND
                                              stat = 'I1040' AND
                                              objnr = sz_pdhsc.guid
                                              );

    et_result = SELECT hpur_guid, created_at AS zzsrm2_date_sing_prot_zo
                  FROM :lt_linked_sz
                  WHERE rank = 1;


  ENDMETHOD.


  METHOD zifsrm2_rep_base_amdp~get_krspz_udate
    BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
       USING ztcard_tender_rq cdpos cdhdr.

    lt_tender_rq = select znum_crdtnd
                       FROM ztcard_tender_rq
                       WHERE
                               ztcard_tender_rq.client = :iv_client AND
                               ztcard_tender_rq.status in ( '2', '6' ) and
                               znum_crdtnd in ( select zzsrm2_id_krspz
                            from :it_krspz );
    lt_cdhdr = SELECT cdhdr.objectid as zzsrm2_id_krspz
                 from cdhdr
                 inner join :lt_tender_rq as tender_rq
                   on cdhdr.objectid = tender_rq.znum_crdtnd;

    et_krspz_udate = select cdhdr.objectid as zzsrm2_id_krspz, udate
                        from cdhdr
                        inner join ztcard_tender_rq
                            on cdhdr.objectid = ztcard_tender_rq.znum_crdtnd and
                               ztcard_tender_rq.client = :iv_client AND
                               ztcard_tender_rq.status in ( '2', '6' ) and
                               znum_crdtnd in ( select zzsrm2_id_krspz
                            from :it_krspz )
                        inner join cdpos
                            on cdhdr.changenr = cdpos.changenr and
                               cdpos.mandant = :iv_client
                     WHERE client = :iv_client;


  ENDMETHOD.


  METHOD zifsrm2_rep_base_amdp~get_quot_data
    BY DATABASE PROCEDURE FOR HDB
    LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
    USING crmd_orderadm_i bbp_pdhsc crmd_link crmd_partner .

    et_result = SELECT rpz_orderadm_i.header AS rpz_h_guid, rpz_orderadm_i.guid AS rpz_i_guid,
                       quot_orderadm_i.guid AS quot_i_guid, quot_pdhsc.zzsrm2_com_submit_dt AS zzsrm2_com_submit_dt,
                       quot_pdhsc.zzsrm2_qual_submit_dt, quot_pdhsc.zzsrm2_tech_submit_dt,
                       quot_orderadm_i.header AS quot_h, partner_18.partner_no AS partner_no_18
                  FROM :it_quot_links as quot_links
                    INNER JOIN crmd_orderadm_i AS rpz_orderadm_i
                      ON quot_links.guid = rpz_orderadm_i.guid AND
                         rpz_orderadm_i.client = :iv_client
                    INNER JOIN crmd_orderadm_i AS quot_orderadm_i
                      ON quot_links.source_guid = quot_orderadm_i.guid AND
                         quot_orderadm_i.client = :iv_client
                    INNER JOIN bbp_pdhsc AS quot_pdhsc
                      ON quot_orderadm_i.header = quot_pdhsc.guid AND
                         quot_pdhsc.client = :iv_client
                    INNER join crmd_link as lk_part
                          on lk_part.guid_hi = quot_pdhsc.guid
                         and lk_part.objtype_hi = '05'
                         AND lk_part.objtype_set = '07'
                         AND lk_part.client = :iv_client
                    INNER JOIN crmd_partner AS partner_18
                          ON partner_18.guid = lk_part.guid_set
                         and partner_fct = '00000018'
                         and partner_18.client = :iv_client
                         ;

  ENDMETHOD.


  METHOD zifsrm2_rep_base_amdp~get_resolvers
      BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
       USING ztsrm_resolver.
    IF is_empty(:it_object_id) THEN
      return;
    END if;
    lt_resolvers = apply_filter( ztsrm_resolver, :iv_filter );

    et_resolvers = SELECT res.object_id,
                         res.resolver,
                         res.date_first_entry,
                         res.date_last_entry,
                         res.count_revision
                    from :lt_resolvers as res
                   where res.object_id in
                      ( select object_id from :it_object_id ) and
                         res.mandt = :iv_client;

  ENDMETHOD.


  METHOD zifsrm2_rep_base_amdp~get_rpz_data
       BY DATABASE PROCEDURE FOR HDB
       LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
       USING zclsrm2_rep_base_amdp=>select_rpz_data.

    CALL "ZCLSRM2_REP_BASE_AMDP=>SELECT_RPZ_DATA"( iv_filter => :iv_filter, iv_client => :iv_client, iv_langu => :iv_langu,
      iv_date => :iv_date, it_rpz_guids => :it_rpz_guids,
      it_rpz_links => :it_rpz_links,
      iv_max_rows => :iv_max_rows, iv_rep_type => :iv_rep_type, it_auth_guids => :it_auth_guids,
      et_base => :et_base );

  ENDMETHOD.


  METHOD zifsrm2_rep_base_amdp~get_rpz_data_from_hpur
     BY DATABASE PROCEDURE FOR HDB
           LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
           USING zvsrm2_busp zsrm2_ibush
*                zvsrm2_icrmjest
                 zclsrm2_rep_base_amdp=>select_rpz_data
                 zvsrm2_crpbshpr zvsrm2_icrmjest
                 bbp_pdhgp crmd_orderadm_h bbp_pdigp zddl_rbslpptab  crmd_orderadm_i
                 bbp_pdhss bbp_pdhsc zsrm2_ibush
                 .
*   select hpur data

    lt_guids = SELECT * FROM :it_auth_guids;
    IF NOT is_empty(:it_zp_guids) THEN
        lt_guids = SELECT * FROM :lt_guids AS guids
                    WHERE EXISTS ( SELECT guid FROM :it_zp_guids AS zp_guids
                                    WHERE zp_guids.guid = guids.guid );
    END if;
    lt_hpur_data = SELECT guid as zp_guid,
                          CASE doc_closed
                            WHEN ''
                              THEN 2
                            WHEN 'X' THEN 1
                          END AS rank_closed
                      FROM zsrm2_ibush AS hpur_hdr
                      WHERE version_type in ('', 'A') AND
*                            hpur_hdr.doc_closed = '' AND
                            client = :iv_client AND
                            process_type = 'HPUR' AND
                            EXISTS ( SELECT guid FROM :lt_guids AS auth_guids
                                        WHERE auth_guids.guid = hpur_hdr.guid ) ;


    lt_hpur_full_data = SELECT crpbshpr.client,
                               crpbshpr.zp_guid,
                               crpbshpr.hpur_object_id,
                               crpbshpr.hpur_subtype,
                               crpbshpr.created_at,
                               crpbshpr.created_at_date,
                               crpbshpr.zzsrm2_tru,
                               crpbshpr.zzsrm_manag_code,
                               hpur_data.rank_closed
                          FROM :lt_hpur_data as hpur_data
                            INNER JOIN zvsrm2_crpbshpr as crpbshpr
                              ON hpur_data.zp_guid = crpbshpr.zp_guid;
    lt_hpur_data = SELECT * FROM :lt_hpur_data WHERE 1 = 2;

    lt_hpur_full_data = apply_filter( :lt_hpur_full_data, :iv_hpur_filter );

    IF is_empty(:lt_hpur_full_data) THEN
          return;
    END if;

    lt_links = SELECT DISTINCT
*           ilot
            ilot_hdr.guid as ilot_guid, ilot_pos.guid as ilot_pos_guid,
*           zp
            ilot_hdr.src_guid as zp_guid,
            hpur_hdr.hpur_object_id,
            hpur_hdr.rank_closed,
            hpur_hdr.created_at,
*           rpz
            rpz_pos.guid as rpz_pos_guid,
            rpz_hdr.guid as rpz_guid,
            rpz_hdr.object_id as object_id
*            ,
*            rank() over (partition BY rpz_hdr.guid order by hpur_hdr.rank_closed desc, hpur_hdr.created_at  desc ) as rank_src_last

      from  zvsrm2_busp as ilot_pos
        INNER JOIN zsrm2_ibush AS ilot_hdr ON
              ilot_hdr.guid = ilot_pos.header
          and ilot_hdr.object_type  = 'BUS2200'
          AND ilot_hdr.process_type = 'ILOT'
          AND ilot_hdr.version_type in ('', 'A')
          and ilot_hdr.client = :iv_client
*       zp links
        INNER JOIN :lt_hpur_full_data AS hpur_hdr
          ON hpur_hdr.zp_guid = ilot_hdr.src_guid
*       rpz links
        INNER JOIN zvsrm2_busp as rpz_pos
          on ilot_pos.src_guid = rpz_pos.guid AND
             ilot_pos.src_object_type = 'BUS2211001'
        INNER JOIN zsrm2_ibush as rpz_hdr
          ON rpz_pos.header = rpz_hdr.guid AND
             rpz_hdr.process_type = 'PPR'
        WHERE
            ilot_pos.del_ind  = ''   and
            ilot_pos.client = :iv_client AND
            NOT EXISTS ( select  objnr
                          FROM zvsrm2_icrmjest
                          WHERE objnr = hpur_hdr.zp_guid and
                                stat = 'I1040' and
                                inact = '' ) AND

            NOT EXISTS ( select  objnr
                          FROM zvsrm2_icrmjest
                          WHERE objnr = ilot_hdr.guid and
                                stat = 'I1040' and
                                inact = '' ) AND
            EXISTS ( SELECT guid
                      FROM :lt_guids
                      WHERE guid = rpz_hdr.guid or
                            guid = ilot_hdr.src_guid )

          ;

   lt_rpz_links =  select slpp_tab.ppr_h_guid AS rpz_guid,
                           slpp_tab.ppr_i_guid AS rpz_pos_guid,
                           ilot.ilot_guid, ilot.ilot_pos_guid,
                           slpp_tab.hpur_guid AS zp_guid,
                           slpp_tab.slpp_h_guid,
                           slpp_tab.slpp_h_object_id,
                           slpp_tab.slpp_i_guid,
                           slpp_tab.slpp_i_ps_ipt,
                           slpp_tab.slpp_agr_guid
                FROM zddl_rbslpptab AS slpp_tab
                 LEFT JOIN
                 ( SELECT ilot_igp.guid AS ilot_pos_guid, ilot_adm_h.guid AS ilot_guid,
                        ilot_igp.src_guid,zzsrm2_hpur_guid
                    FROM bbp_pdigp       as ilot_igp
                      INNER join crmd_orderadm_i as ilot_adm_i on ilot_adm_i.guid   = ilot_igp.guid
                      INNER join crmd_orderadm_h as ilot_adm_h on ilot_adm_h.guid   = ilot_adm_i.header
                      INNER join bbp_pdhgp       as ilot_hgp   on ilot_hgp.guid     = ilot_adm_h.guid AND
                        ilot_hgp.version_type in ('', 'A')
                      INNER JOIN bbp_pdhsc AS ilot_pdhsc ON ilot_pdhsc.guid = ilot_adm_h.guid
                  WHERE ilot_igp.del_ind = ''
                    ) AS ilot
                 ON ilot.src_guid = slpp_tab.slpp_guid_src_for_ilot AND
                    slpp_tab.hpur_guid = ilot.zzsrm2_hpur_guid
                WHERE EXISTS
                   ( SELECT zp_guid FROM :lt_hpur_full_data as zp_guids
                        WHERE NOT EXISTS
                      ( select zp_guid from :lt_links as a
                            WHERE a.zp_guid = zp_guids.zp_guid )
                       AND
                       zp_guid = slpp_tab.hpur_guid
                     ) AND
*                exclude deleted slpp pos
                   NOT EXISTS ( SELECT guid
                    FROM bbp_pdigp AS slpp_igp
                        WHERE slpp_igp.guid = slpp_tab.slpp_i_guid AND
                              slpp_igp.del_ind = 'X'
                   )
                   AND
*                   slpp_tab.pr_igp_src_guid <> '00000000000000000000000000000000' AND
                  NOT EXISTS ( select  objnr
                               from zvsrm2_icrmjest
                               where objnr = slpp_tab.slpp_h_guid and
                                     stat = 'I1040' and
                                     inact = '' )

                     ;
    lt_hpur_full_data = SELECT * FROM :lt_hpur_full_data WHERE 1 = 2;


    lt_rpz_links = SELECT rpz_guid, rpz_pos_guid, ilot_guid,
                         ilot_pos_guid, zp_guid,
                         slpp_h_guid,
                         slpp_h_object_id,
                         slpp_i_guid,
                         slpp_i_ps_ipt,
                         slpp_agr_guid
                    FROM :lt_rpz_links
                    UNION
                    SELECT DISTINCT rpz_guid, rpz_pos_guid, ilot_guid,
                         ilot_pos_guid, zp_guid,
                         NULL AS slpp_h_guid,
                         NULL AS slpp_h_object_id,
                         NULL AS slpp_i_guid,
                         NULL AS slpp_i_ps_ipt,
                         NULL AS slpp_agr_guid
                    FROM :lt_links
*                    WHERE rank_src_last = 1
                                ;
    lt_links = SELECT * FROM :lt_links WHERE 1 = 2;
*    EXCLIDE CLOSED ZP
    lt_rpz_links1 = SELECT links.*,
                     rank() over (partition BY links.rpz_pos_guid order by ( case hpur_hdr.doc_closed
                        when 'X' then 2
                        else 1
                      end ) asc ) as rank_hpur
                     FROM :lt_rpz_links AS links
                     left join zsrm2_ibush as hpur_hdr on
                        hpur_hdr.guid = links.zp_guid
                        and hpur_hdr.object_type  = 'BUS2200'
                        AND hpur_hdr.process_type = 'HPUR'
                        AND hpur_hdr.version_type in ('', 'A')
                        and hpur_hdr.client = :iv_client;

     lt_rpz_links = SELECT rpz_guid, rpz_pos_guid,ilot_guid, ilot_pos_guid, zp_guid, slpp_h_guid,
                           slpp_h_object_id, slpp_i_guid,slpp_i_ps_ipt,slpp_agr_guid
                    FROM :lt_rpz_links1
                    WHERE rank_hpur = 1;
     lt_rpz_links1 = SELECT * FROM :lt_rpz_links1 WHERE 1 = 2;
*    lt_slpp_links = SELECT * FROM :lt_slpp_links WHERE 1 = 2;


    IF NOT is_empty(:it_rpz_guids) THEN
      lt_rpz_links = SELECT *
                      FROM :lt_rpz_links
                      WHERE rpz_guid IN
                        ( SELECT guid FROM :it_rpz_guids ) OR
                        slpp_h_guid IN ( SELECT guid FROM :it_rpz_guids )
                        ;
      IF is_empty(:lt_rpz_links) THEN
        return;
      END IF ;
    END IF ;

*   filter by plng year
    lt_rpz_links_year = SELECT rpz_guid, pdhss.plng_year AS plng_year
                            FROM :lt_rpz_links AS rpz_links
                             INNER JOIN bbp_pdhss AS pdhss
                                ON rpz_links.rpz_guid = pdhss.guid;
    lt_rpz_links_year = apply_filter( :lt_rpz_links_year, :iv_plng_year_filter );


    lt_rpz_links = SELECT *
                    FROM :lt_rpz_links as rpz_links
                        WHERE EXISTS ( SELECT rpz_guid FROM :lt_rpz_links_year as links_year
                                        WHERE links_year.rpz_guid = rpz_links.rpz_guid );

    lt_rpz_links_year = SELECT * FROM :lt_rpz_links_year WHERE 1 = 2;

    IF is_empty(:lt_rpz_links) THEN
      return;
    END IF ;

*   filter by maximum rows
    IF :iv_max_rows > 0 THEN
      lt_rpz_links = SELECT DISTINCT rpz_guid, rpz_pos_guid, ilot_guid,
                           ilot_pos_guid, zp_guid,
                           slpp_h_guid,
                           slpp_h_object_id,
                           slpp_i_guid,
                           slpp_i_ps_ipt,
                           slpp_agr_guid
                      FROM :lt_rpz_links
                      WHERE zp_guid IN (
                        SELECT TOP :iv_max_rows DISTINCT zp_guid
                          FROM :lt_rpz_links );
    END if;

    CALL "ZCLSRM2_REP_BASE_AMDP=>SELECT_RPZ_DATA"( iv_filter => iv_rpz_filter, iv_client => :iv_client, iv_langu => :iv_langu,
      iv_date => :iv_date, it_rpz_guids => :it_rpz_guids,
      it_rpz_links => :lt_rpz_links,iv_max_rows => 0, iv_rep_type => '03', it_auth_guids => :it_auth_guids,
      et_base => :et_base );


  ENDMETHOD.


  METHOD zifsrm2_rep_base_amdp~get_sc_data
    BY DATABASE PROCEDURE FOR HDB
    LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
    USING bbp_pdisc bbp_pdigp crmd_orderadm_i ztz0007 ztz0025 ztz0006 ztztypejobs crmd_orderadm_h bbp_pdbei.


*   ZZSRM2_NPPNUM ZZSRM2_NPPPOS
*   Определяем значение BBP_PDIGP-SRC_GUID (GUID позиции корзины покупок), где BBP_PDIGP-SRC_GUID = GUID позиции СРПЗ.
*1.1 Определяем в CRMD_ORDERADM_I-HEADER (GUID корзины покупок), где GUID=BBP_PDIGP-SRC_GUID(GUID позиции корзины покупок)
*1.2 Определяем в CRMD_ORDERADM_H-OBJECT_ID (номер корзины), где GUID=CRMD_ORDERADM_I-HEADER (GUID корзины покупок)
*1.3 определяем и выводим в ZTZ0007-NPPNUM, где ZSRM2_OBJECT_ID=CRMD_ORDERADM_H-OBJECT_ID (номер корзины), ARHIV=пусто,
*    если номер определить не удалось, выполняем п.2
*    2) Выводим BBP_PDISC-ZZSRM2_NPPNUM, где BBP_PDISC-GUID = GUID позиции корзины покупок (п.1)


    et_sc_data =
    SELECT links.des_guid AS rpz_i_guid,
           sc_pdisc.zzsrm2_docum_ext AS zzsrm2_docum_ext,
           sc_orderadm_i.number_ext AS zzsrm2_poszaj,
           COALESCE( ztz0007.nppnum, sc_pdisc.zzsrm2_nppnum ) AS zzsrm2_nppnum,
           COALESCE( ztz0007.npppos, sc_pdisc.zzsrm2_npppos ) AS zzsrm2_npppos,
           _direc_fin.name AS zzsrm2_direc_fin_txt,
           sc_orderadm_h.object_id AS sc_object_id, sc_orderadm_h.guid AS sc_guid,
           pdbei.be_co_code AS bukrs
      FROM :it_links AS links
        INNER JOIN bbp_pdisc AS sc_pdisc
          ON links.src_guid = sc_pdisc.guid AND
             sc_pdisc.client = :iv_client
        INNER JOIN bbp_pdigp AS sc_pdigp
          ON sc_pdigp.guid = sc_pdisc.guid AND
             sc_pdigp.client = :iv_client AND
             sc_pdigp.del_ind = ''
        INNER JOIN crmd_orderadm_i AS sc_orderadm_i
          ON sc_orderadm_i.guid = sc_pdisc.guid AND
             sc_orderadm_i.client = :iv_client
        INNER JOIN crmd_orderadm_h AS sc_orderadm_h
          ON sc_orderadm_h.guid = sc_orderadm_i.header AND
             sc_orderadm_h.client = :iv_client
        INNER JOIN bbp_pdbei AS pdbei
          ON sc_orderadm_i.guid = pdbei.guid AND
             pdbei.client = :iv_client
        LEFT JOIN ( select numzaj , MAX ( name ) AS name
                    FROM ztz0006
                      INNER JOIN ztztypejobs
                        ON ztz0006.typejob = ztztypejobs.typejob
                         AND
                           ztz0006.client  = ztztypejobs.mandt
                        where arhiv = '000' AND
                              ztz0006.client = :iv_client
                        GROUP BY numzaj ) AS _direc_fin
          ON sc_pdisc.zzsrm2_docum_ext = _direc_fin.numzaj
         LEFT JOIN ztz0007
            ON ztz0007.nppnum = sc_orderadm_h.object_id AND
               ztz0007.arhiv = '000'
          ;
    IF is_empty(:et_sc_data) THEN
      return;
    END if;

*   ZZSRM2_NPP_DATE
*   Выводим значение с самой ранней датой ZTZ0025 - AEDAT, где BUKRS = значению BURKS,
*   которое определили в поле отчета ZZSRM2_DATEPOST, NUMZAJ = Номер НПП
*   (поле отчета ZZSRM2_NPPNUM), STATUS=79

    et_sc_lot1 = SELECT DISTINCT zzsrm2_docum_ext, zzsrm2_poszaj, zzsrm2_nppnum, zzsrm2_npppos,
                       ztz0007.datepost AS zzsrm2_datepost,
                       ztz0007.brtwr AS zzsrm2_netwr_nmc,
                       ztz0025.aedat AS zzsrm2_npp_date,
                       ztz0007.arhiv,
                       rank( ) over (partition BY zzsrm2_docum_ext, sc_data.sc_object_id, ztz0007.bukrs  order by ztz0007.arhiv desc ) as rank
                    FROM :et_sc_data AS sc_data
                      INNER JOIN ztz0007
                        ON sc_data.sc_object_id = ztz0007.zsrm2_object_id AND
                           ztz0007.bukrs = sc_data.bukrs AND
*                           zzsrm2_docum_ext = ztz0007.numzaj AND
*                           RIGHT( sc_data.zzsrm2_poszaj, 4) = RIGHT( ztz0007.poszaj, 4 ) AND
*                           sc_data.zzsrm2_nppnum = ztz0007.nppnum AND
*                           sc_data.zzsrm2_npppos = ztz0007.npppos AND
                           ztz0007.client = :iv_client
*                           ztz0007.arhiv IN ( '000', '999' )
                      LEFT JOIN
                        ( SELECT bukrs, client, numzaj, arhiv, aedat,
                            rank( ) over (partition BY bukrs,numzaj order by aedat asc ) as rank
                            FROM ztz0025 AS ztz0025
                            WHERE ztz0025.status = '79' AND
                                  ztz0025.client = :iv_client
                           ) AS ztz0025
                        ON ztz0025.bukrs = ztz0007.bukrs AND
                           ztz0025.client = :iv_client AND
                           ztz0025.numzaj = sc_data.zzsrm2_nppnum AND
                           ztz0025.rank = 1
                           ;

    et_sc_lot2 = SELECT DISTINCT zzsrm2_docum_ext, zzsrm2_poszaj, zzsrm2_nppnum, zzsrm2_npppos,
                       ztz0007.datepost  AS zzsrm2_datepost,
                       ztz0007.brtwr AS zzsrm2_netwr_nmc,
                       ztz0025.aedat AS zzsrm2_npp_date,
                       ztz0007.arhiv,
                       rank( ) over (partition BY zzsrm2_docum_ext, RIGHT( sc_data.zzsrm2_poszaj, 4), zzsrm2_nppnum, zzsrm2_npppos  order by ztz0007.arhiv desc ) as rank
                    FROM :et_sc_data AS sc_data
                      INNER JOIN ztz0007 AS ztz0007
                        ON  zzsrm2_docum_ext = ztz0007.numzaj AND
                           RIGHT( sc_data.zzsrm2_poszaj, 4) = RIGHT( ztz0007.poszaj, 4 ) AND
                           sc_data.zzsrm2_nppnum = ztz0007.nppnum AND
                           sc_data.zzsrm2_npppos = ztz0007.npppos AND
                           ztz0007.client = :iv_client AND
*                           ztz0007.arhiv IN ( '000', '999' ) AND
                           ztz0007.bukrs = sc_data.bukrs AND
                           NOT EXISTS ( SELECT *
                            FROM :et_sc_lot AS a
                            WHERE a.zzsrm2_docum_ext = ztz0007.numzaj AND
                                  RIGHT( a.zzsrm2_poszaj, 4) = RIGHT( ztz0007.poszaj, 4 ) AND
                                  a.zzsrm2_nppnum = ztz0007.nppnum )
                      LEFT JOIN
                        ( SELECT bukrs, client, numzaj, arhiv, aedat,
                            rank( ) over (partition BY bukrs,numzaj order by aedat asc ) as rank
                            FROM ztz0025 AS ztz0025
                            WHERE ztz0025.status = '79' AND
                                  ztz0025.client = :iv_client
                           ) AS ztz0025
                        ON ztz0025.bukrs = ztz0007.bukrs AND
                           ztz0025.client = :iv_client AND
                           ztz0025.numzaj = sc_data.zzsrm2_nppnum AND
                           ztz0025.rank = 1
                           ;

*   filter by archive



*    zzsrm2_docum_ext = is_sc_data-zzsrm2_docum_ext AND
*            zzsrm2_poszaj = is_sc_data-zzsrm2_poszaj AND
*            zzsrm2_nppnum = is_sc_data-zzsrm2_nppnum

    et_sc_lot = SELECT zzsrm2_docum_ext,zzsrm2_poszaj,zzsrm2_nppnum, zzsrm2_npppos,zzsrm2_datepost,zzsrm2_netwr_nmc,zzsrm2_npp_date
                    FROM :et_sc_lot1
                    WHERE arhiv IN ( '000', '999' ) OR
                          ( zzsrm2_netwr_nmc = 0 AND rank = 1 )
                UNION
                SELECT zzsrm2_docum_ext,zzsrm2_poszaj,zzsrm2_nppnum, zzsrm2_npppos,zzsrm2_datepost,zzsrm2_netwr_nmc,zzsrm2_npp_date
                FROM :et_sc_lot2
                WHERE arhiv IN ( '000', '999' ) OR
                          ( zzsrm2_netwr_nmc = 0 AND rank = 1 );


  ENDMETHOD.


  METHOD zifsrm2_rep_base_amdp~get_zpmm_data
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING zvsrm2_crepzmpp zvsrm2_icrmjest
*           zvsmr2_crbfinsz crmd_link bbp_pdhcf crmd_partner
           crmd_orderadm_h
           zvsrm2_icrmjest
           ztsrm2_prot_publ
           ztsrm2_rsn_datah
           ztsrm2_etp_datah
*           bbp_pdhsc
           zclsrm2_rep_base_amdp=>get_reng_ind_no
           zclsrm2_rep_base_amdp=>get_reng_ind_yes_rpz_pos
           zclsrm2_rep_base_amdp=>get_rrs_contr_txt
           zclsrm2_rep_base_amdp=>get_reng_retr_data
*           zclsrm2_rep_base_amdp=>get_rpz_rows_fr_src_guids
           zclsrm2_rep_base_amdp=>get_zmpp_pdhcf_rpz
           zclsrm2_rep_base_amdp=>get_zmpp_protocol
           zclsrm2_rep_base_amdp=>fill_from_last_zmpp
           zclsrm2_rep_base_amdp=>fill_from_final_zmpp
           zclsrm2_rep_base_amdp=>fill_rpf_reason_txt
*           zclsrm2_rep_base_amdp=>get_quot_data
           zclsrm2_rep_base_amdp=>get_final_sz
           zclsrm2_rep_base_amdp=>get_rpz_pos_sz
           zclsrm2_rep_base_amdp=>get_sz_stages
           zclsrm2_rep_base_amdp=>get_last_fin_sz
           zclsrm2_rep_base_amdp=>get_data_sing_pp
           .

    declare d char;

*   leave only for approved ilot
    lt_links = select *
                from :it_links as links
                where exists ( select  objnr
                                  from zvsrm2_icrmjest
                                  where objnr = links.src_guid and
                                        stat = 'I1011' and
                                        inact = '' ) and
                      not exists ( select  objnr
                                  from zvsrm2_icrmjest
                                  where objnr = links.src_guid and
                                        stat in ( 'I1023', 'I1040' ) and
                                        inact = '' )
                                        ;

*   retrieve header data
    et_zmpp_data = select links.src_guid, links.con_guid,
                    zvsrm2_crepzmpp.*,
                    case orderadm_h_con.process_type
                      when 'RETR'
                      then zzsrm2_zomeet_date
                    end as zzsrm2_zomeet_date_retr,
*>>> DSOSTROVSKI1 25.03.2021 17894
                    rsn_datah.created_at as zzsrm2_sitern_prot_pp,
                    etp_datah.created_at as zzsrm2_etp_prot_pp
*<<< DSOSTROVSKI1 25.03.2021 17894
            from zvsrm2_crepzmpp
            inner join :lt_links as links
              on guid = des_guid
            inner join crmd_orderadm_h as orderadm_h_con
              on links.con_guid = orderadm_h_con.guid and
                 orderadm_h_con.client = :iv_client
*>>> DSOSTROVSKI1 25.03.2021 17894
            left join ztsrm2_prot_publ as prot_publ
              on prot_publ.guid_scon = zvsrm2_crepzmpp.guid
            left join ztsrm2_rsn_datah as rsn_datah
              on rsn_datah.object_guid = prot_publ.guid_prot
             and rsn_datah.created_at = (
                select min( created_at )
                    from ztsrm2_rsn_datah
                    where object_guid = prot_publ.guid_prot
                      and rsn_active_version <> '00000000000000000000000000000000'
                      and rsn_change_version = '00000000000000000000000000000000'
                      and object_type = 'PROTOCOL' )
            left join ztsrm2_etp_datah as etp_datah
              on etp_datah.object_guid = prot_publ.guid_prot
             and etp_datah.created_at = (
                select min( created_at )
                    from ztsrm2_etp_datah
                    where object_guid = prot_publ.guid_prot
                      and reg_number <> ''
                      and published_at <> 0
                      and object_type = 'PROTOCOL' )
*<<< DSOSTROVSKI1 25.03.2021 17894
            where zvsrm2_crepzmpp.client = :iv_client and
                  not zvsrm2_crepzmpp.process_type in ( 'HPUR', 'ILOT' ) and
                  zvsrm2_crepzmpp.guid in (
                    select des_guid
                      from :lt_links
                      where not des_type in ( 'RENG', 'RETR' )
                    )  and
                  zvsrm2_crepzmpp.guid in (
                    select objnr
                      from zvsrm2_icrmjest
                      where stat in ( 'I1011', 'I9915', 'I9914' ) and
                            inact = '' and
                            objnr = zvsrm2_crepzmpp.guid
                  );

*   status
    et_status = SELECT
                      objnr,
                      stat
                      FROM zvsrm2_icrmjest
                      WHERE objnr IN
                        ( SELECT guid
                          FROM :et_zmpp_data ) AND
                        inact = '' AND
                        mandt = :iv_client;

*   get information regarding pdhcf connected with rpz rows
    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_ZMPP_PDHCF_RPZ"( iv_client => :iv_client, it_zmpp_data => :et_zmpp_data,
                                                      it_rpz_i_links =>:it_rpz_i_links,
                                                      et_pdhcf_rpz => :lt_pdhcf_rpz );
*   ROWS
*   information from the final sz
    CALL "ZCLSRM2_REP_BASE_AMDP=>FILL_FROM_FINAL_ZMPP"( iv_client => :iv_client, it_pdhcf_rpz => :lt_pdhcf_rpz,
        iv_rep_type => :iv_rep_type, et_final_sz_data => et_final_sz_data );


    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RENG_IND_YES_RPZ_POS"( iv_client => :iv_client, it_zmpp_data => :et_zmpp_data,
                                                 it_pdhcf_rpz => :lt_pdhcf_rpz, it_links => :lt_links,
                                                 it_final_sz_data => :et_final_sz_data,
                                         et_reng_ind => :et_reng_ind_pos_yes
                                          );

    IF :iv_rep_type = '02' THEN
        CALL "ZCLSRM2_REP_BASE_AMDP=>GET_DATA_SING_PP"( iv_client => :iv_client,it_pdhcf_rpz => :lt_pdhcf_rpz,
            it_reng_ind => :et_reng_ind_pos_yes, et_data_sing_pp => :et_data_sing_pp
        );

    ELSE
      CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RENG_IND_NO"( iv_client => :iv_client, it_zmpp_data => :et_zmpp_data,
                                                     it_pdhcf_rpz => :lt_pdhcf_rpz,
                                             et_reng_ind => :et_reng_ind_no,
                                             et_last_zmpp => :et_last_zmpp );
    END if;
*    lt_reng_ind = SELECT rpz_i_guid AS guid
*                    FROM :et_reng_ind_pos_yes
*                  UNION
*                  SELECT rpz_i_guid
*                    FROM :et_reng_ind_no;

    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RRS_CONTR_TXT"( iv_client => :iv_client, it_zmpp_data => :et_zmpp_data,
      it_rpz_i_links => :it_rpz_i_links, et_rrs_contr_txt => et_rrs_contr_txt );


    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RENG_RETR_DATA"( iv_client => :iv_client, it_links => :lt_links,
        iv_rep_type => :iv_rep_type, et_data => et_retr_count, it_rpz_i_links=> :it_rpz_i_links );

    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_ZMPP_PROTOCOL"( iv_client => :iv_client, it_pdhcf_rpz => :lt_pdhcf_rpz,
        et_protocol => :et_zmpp_protocol );

*   information from the last zmpp in rpz and rpz_i dimensions
    CALL "ZCLSRM2_REP_BASE_AMDP=>FILL_FROM_LAST_ZMPP"( iv_client => :iv_client, it_pdhcf_rpz => :lt_pdhcf_rpz,
        iv_rep_type => :iv_rep_type, et_last_zmpp => et_last_zmpp_data );


    CALL "ZCLSRM2_REP_BASE_AMDP=>FILL_RPF_REASON_TXT"( iv_client => :iv_client, it_pdhcf_rpz => :lt_pdhcf_rpz,
        iv_rep_type => :iv_rep_type, et_rpf_reason => et_rpf_reason );


    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_FINAL_SZ"( iv_client => :iv_client, it_pdhcf_rpz => :lt_pdhcf_rpz,
        iv_rep_type => :iv_rep_type, et_final_sz => :et_final_sz );

**   quot data
*    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_QUOT_DATA"( iv_client => :iv_client,it_pdhcf_rpz => :lt_pdhcf_rpz,
*      it_links => :it_links, it_zp_ilot => :it_zp_ilot, et_quot_data => :et_quot_data  );

    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RPZ_POS_SZ"( iv_client => :iv_client,it_pdhcf_rpz => :lt_pdhcf_rpz,
      et_rpz_pos_sz => :et_rpz_pos_sz );
*   zp
    IF :iv_rep_type = '03' THEN
      CALL "ZCLSRM2_REP_BASE_AMDP=>GET_SZ_STAGES"( iv_client => :iv_client,it_pdhcf_rpz => :lt_pdhcf_rpz, et_sz_stages => et_sz_stages );
    end if;

    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_LAST_FIN_SZ"( iv_client => :iv_client,it_pdhcf_rpz => :lt_pdhcf_rpz,
      et_last_fin_sz => :et_last_fin_sz );

  ENDMETHOD.


  METHOD zifsrm2_rep_base_amdp~get_zp_data
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING zvsrm2_crepbaszp zvsrm2_icrmjest
           zvsrm2_i_pdhcf zvsrm2_crepbalot
*           ztsrm_resolver
           zvsrm2_rberqevt zclsrm2_rep_base_amdp=>get_zp_wf_dates
           zclsrm2_rep_base_amdp=>get_zp_act_regdata
           zclsrm2_rep_base_amdp=>get_zp_pl_regdata
           zclsrm2_rep_base_amdp=>get_eish
           zclsrm2_rep_base_amdp=>get_rsnh.

    et_base =
      select DISTINCT zvsrm2_crepbaszp.*, '' as dummy
*      , eis_datah.created_at AS eis_created_at
        from zvsrm2_crepbaszp
        where zvsrm2_crepbaszp.guid in ( select distinct zp_guid  from :it_zp_ilot ) and
              client = :iv_client and
*             "exclude docs with the deleted status
              zvsrm2_crepbaszp.guid not in ( select objnr
                        from zvsrm2_icrmjest
                        where objnr = zvsrm2_crepbaszp.guid and
                              stat = 'I1040' and
                              inact = '' and
                              mandt = :iv_client  )
                              ;

    if is_empty(:et_base) THEN
      return;
    END if;
*   statuses
    et_status = SELECT
                      objnr,
                      stat
                      from zvsrm2_icrmjest
                      where objnr in
                        ( select guid
                          from :et_base ) and
                        inact = '' and
                        mandt = :iv_client;
*   consideration order
    et_cons_order = select guid_hi as header, guid,
                           zzsrm2_subtype
                    from zvsrm2_i_pdhcf
                    where guid_hi in
                        ( select guid
                          from :et_base ) and
                        objtype_hi = '05' and
                        objtype_set = '78' and
                        table_type = 'THZCP' and
                        client = :iv_client;


*   wf dates
    call "ZCLSRM2_REP_BASE_AMDP=>GET_ZP_WF_DATES"( iv_client => :iv_client, it_zp => :et_base,
                                           et_wf_dates => :et_zp_wf );

*   ilot data
    et_ilot_data = SELECT zvsrm2_crepbalot.*, rberqevt.zzsrm2_asses_date_appr,
                          ilot_guid.zp_guid
                    from zvsrm2_crepbalot
                    left join zvsrm2_rberqevt as rberqevt
                      on zvsrm2_crepbalot.eval_guid = rberqevt.eval_guid and
                         client = rberqevt.mandt
                    inner join :it_zp_ilot as ilot_guid
                      on zvsrm2_crepbalot.guid = ilot_guid.ilot_guid
                    where client = :iv_client;

*   act regdata
    call "ZCLSRM2_REP_BASE_AMDP=>GET_ZP_ACT_REGDATA"( iv_client => :iv_client, it_zp => :et_base,
                                           et_act_regdata => :et_act_regdata );

*   pl regdata
    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_ZP_PL_REGDATA"( iv_client => :iv_client, it_zp => :et_base,
                                           et_pl_regdata => :et_pl_regdata );

    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_EISH"( iv_client => :iv_client, it_zp => :et_base,
      et_eish => :et_eish );

    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RSNH"( iv_client => :iv_client, it_zp => :et_base,
      et_eish => :et_rsnh );

  ENDMETHOD.

  METHOD get_date_zo_o
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING bbp_pdhgp tvarvc crmd_orderadm_h
           zclsrm2_andev_model_amdp=>get_subtype
           zclsrm2_rep_base_amdp=>select_zo_dates
           zclsrm2_andev_model_amdp=>get_subtype
           bbp_pdhsc zvsrm2_i_pdhcf zclsrm2_rep_base_amdp=>get_rpz_rows_fr_src_guids
           zclsrm2_rep_base_amdp=>get_date_prot_zo crmd_orderadm_i.

    declare la_stages nvarchar( 3 ) array;

*   Если константа ZSRM2_SUBTYPE_UNCOMP не содержит значение, равное BBP_PDHGP–SUBTYPE,
*   где BBP_PDHGP–GUID = GUID ЗП, то
    lt_hpur_guid = SELECT DISTINCT hpur_guid
                        FROM :it_links AS links;
    lt_zp = SELECT guid
                FROM bbp_pdhgp AS pdhgp
                WHERE pdhgp.client = :iv_client AND
                      pdhgp.subtype NOT IN (
                        SELECT low
                            FROM tvarvc
                            WHERE name = 'ZSRM2_SUBTYPE_UNCOMP' AND
                                  mandt = :iv_client
                      ) AND
                      EXISTS ( SELECT hpur_guid
                        FROM :lt_hpur_guid AS links
*                        INNER JOIN crmd_orderadm_h AS orderadm_h
*                            ON links.hpur_guid = orderadm_h.guid AND
*                               orderadm_h.client = :iv_client
                        WHERE links.hpur_guid = pdhgp.guid );
    lt_hpur_guid = SELECT * FROM :lt_hpur_guid WHERE 1 = 2;
    if is_empty(:lt_zp) THEN
      return;
    END if;


    lt_sz =
        SELECT links.des_guid AS sz_guid,hpur_guid
            FROM :it_links AS links
                INNER JOIN :lt_zp AS zp_guid
                    ON links.hpur_guid = zp_guid.guid
        WHERE des_type = 'ZMPP' AND
            EXISTS ( SELECT guid FROM bbp_pdhsc AS pdhsc
                        WHERE links.des_guid = pdhsc.guid AND
                               pdhsc.client = :iv_client AND
                               pdhsc.zzsrm2_nd_x = 'X' );

*    if is_empty(:lt_sz) THEN
*      return;
*    END if;

**   find rpz_i_guid and sz
    lt_pdhcf = SELECT DISTINCT pdhcf.guid, pdhcf.zzsrm2_bitem_guid, sz.sz_guid
                FROM :lt_sz AS sz
                    INNER JOIN zvsrm2_i_pdhcf AS pdhcf
                      ON sz.sz_guid = pdhcf.guid_hi AND
                         ( pdhcf.table_type IN ( 'THZCI', 'THZSI', 'THZSB', 'THZWP', 'THZWQ' )
                         ) AND
                         pdhcf.client = :iv_client
                WHERE pdhcf.zzsrm2_bitem_guid <> '00000000000000000000000000000000' OR
                      pdhcf.zzsrm2_bitem_guid <> '';

**   find rpz rows
    lt_guids = SELECT DISTINCT zzsrm2_bitem_guid AS guid
                FROM :lt_pdhcf;
*
    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RPZ_ROWS_FR_SRC_GUIDS"( iv_client => :iv_client, it_guids => :lt_guids, et_guids => :lt_rpz_links,
        it_rpz_i_links => :it_rpz_i_links );

    lt_guids = SELECT * FROM :lt_guids WHERE 1 = 2;

*   join sz with rpz_i_guid
    lt_sz_rpz_i = SELECT DISTINCT rpz_links.guid AS rpz_i_guid, pdhcf.sz_guid
                    FROM :lt_rpz_links AS rpz_links
                        INNER JOIN :lt_pdhcf AS pdhcf
                            ON rpz_links.source_guid = pdhcf.zzsrm2_bitem_guid;
    lt_pdhcf = SELECT * FROM :lt_pdhcf WHERE 1 = 2;

*   .1 Для каждого лота ЗП определяем связанные СЗ с BBP_PDHSC-ZZSRM2_ND_X="X"
*   Среди найденных СЗ определяем BBP_PDHGP-SUBTYPE
    lt_sz_subtype =
        SELECT sz_rpz_i.rpz_i_guid, pdhgp.subtype, zzsrm2_nd_boc, zzsrm2_nd_eoc,
               created_at,
               rank( ) over (partition BY rpz_i_guid order by created_at desc ) as rank,
               sz_guid
            FROM :lt_sz_rpz_i AS sz_rpz_i
                INNER JOIN bbp_pdhgp AS pdhgp
                    ON sz_rpz_i.sz_guid = pdhgp.guid AND
                       pdhgp.client = :iv_client
                INNER JOIN bbp_pdhsc AS pdhsc
                    ON pdhgp.guid = pdhsc.guid AND
                       pdhsc.client = :iv_client AND
                       pdhsc.zzsrm2_nd_x = 'X'
                INNER JOIN crmd_orderadm_h AS orderadm_h
                    ON pdhsc.guid = orderadm_h.guid AND
                       orderadm_h.client = :iv_client
                       ;
    lt_sz_rpz_i = SELECT * FROM :lt_sz_rpz_i WHERE 1 = 2;

*   ZZSRM2_CONSID_QUAL_ZO
*   280 или =236 или =130 или =140 или =117 или =121 или 120 280 или =236 или =130 или =140 или =117 или =121 или 120
    la_stages[ 1 ] = '285'; la_stages[ 2 ] = '241'; la_stages[ 3 ] = '160';
    la_stages[ 4 ] = '170'; la_stages[ 5 ] = '117'; la_stages[ 6 ] = '151';
    la_stages[ 7 ] = '150';
    lt_stages = unnest(:la_stages) AS ( stage );
*   "QUALIF_SEL=  ‘12’.
    CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>GET_SUBTYPE"( iv_client => :iv_client, iv_type => 1, et_subtype => :lt_subtype );
    CALL "ZCLSRM2_REP_BASE_AMDP=>SELECT_ZO_DATES"(
     iv_client => :iv_client, it_links=> :it_links, iv_rep_type => :iv_rep_type,
        it_zp_guid =>:lt_zp, it_stage => :lt_stages, it_subtype => :lt_subtype, it_hpur_rpz_i => :it_hpur_rpz_i,
        it_sz_subtypes => :lt_sz_subtype,
        et_dates => :lt_qs12
        );

*   ZZSRM2_CONSID_TECH_ZO
    la_stages = trim_array(:la_stages, 0);
    la_stages[ 1 ] = '123'; la_stages[ 2 ] = '162';la_stages[ 3 ] = '174';
    la_stages[ 4 ] = '232'; la_stages[ 5 ] = '170';la_stages[ 6 ] = '117';
    la_stages[ 7 ] = '230'; la_stages[ 8 ] = '151';la_stages[ 9 ] = '150';
    la_stages[ 10 ] = '231';
    lt_stages = unnest(:la_stages) AS ( stage );
    CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>GET_SUBTYPE"( iv_client => :iv_client, iv_type => 2, et_subtype => :lt_subtype );
    CALL "ZCLSRM2_REP_BASE_AMDP=>SELECT_ZO_DATES"(
     iv_client => :iv_client, it_links=> :it_links, iv_rep_type => :iv_rep_type,
        it_zp_guid =>:lt_zp, it_stage => :lt_stages, it_subtype => :lt_subtype, it_hpur_rpz_i => :it_hpur_rpz_i,
        it_sz_subtypes => :lt_sz_subtype,
        et_dates => :lt_ts22
        );

*  ZZSRM2_CONSID_COMM_SEL_ZO
*   STAGE =260=261 или =211=230 или =121=151 или =212 =231 или =269=272 или =271=272 или =120=150 или =221=272 или =330=350
    la_stages = trim_array(:la_stages, 0);
    la_stages[ 1 ] = '261'; la_stages[ 2 ] = '230';la_stages[ 3 ] = '151';
    la_stages[ 4 ] = '231'; la_stages[ 5 ] = '272';
    la_stages[ 7 ] = '150'; la_stages[ 9 ] = '350';
    lt_stages = unnest(:la_stages) AS ( stage );
    CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>GET_SUBTYPE"( iv_client => :iv_client, iv_type => 3, et_subtype => :lt_subtype );
    CALL "ZCLSRM2_REP_BASE_AMDP=>SELECT_ZO_DATES"(
     iv_client => :iv_client, it_links=> :it_links, iv_rep_type => :iv_rep_type,
        it_zp_guid =>:lt_zp, it_stage => :lt_stages, it_subtype => :lt_subtype, it_hpur_rpz_i => :it_hpur_rpz_i,
        it_sz_subtypes => :lt_sz_subtype,
        et_dates => :lt_sel23
        );

*   ZZSRM2_CONSID_COMM_EVAL_ZO
    la_stages = trim_array(:la_stages, 0);
    la_stages[ 1 ] = '295'; la_stages[ 2 ] = '270';la_stages[ 3 ] = '350';
    la_stages[ 4 ] = '150'; la_stages[ 5 ] = '231';la_stages[ 6 ] = '272';
    la_stages[ 7 ] = '270'; la_stages[ 8 ] = '272';
    lt_stages = unnest(:la_stages) AS ( stage );
    CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>GET_SUBTYPE"( iv_client => :iv_client, iv_type => 4, et_subtype => :lt_subtype );
    CALL "ZCLSRM2_REP_BASE_AMDP=>SELECT_ZO_DATES"(
     iv_client => :iv_client, it_links=> :it_links, iv_rep_type => :iv_rep_type,
        it_zp_guid =>:lt_zp, it_stage => :lt_stages, it_subtype => :lt_subtype, it_hpur_rpz_i => :it_hpur_rpz_i,
        it_sz_subtypes => :lt_sz_subtype,
        et_dates => :lt_ce24
        );

*  ZZSRM2_DATE_PROT_ZO
    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_DATE_PROT_ZO"(
     iv_client => :iv_client, it_sz_subtypes=> :lt_sz_subtype, it_hpur_rpz_i => :it_hpur_rpz_i,
        it_zp_guid =>:lt_zp, et_dates => :lt_prot_zo
        );

    lt_date_zo =
        SELECT rpz_i_guid, datum AS zzsrm2_consid_qual_zo,
            NULL AS zzsrm2_consid_tech_zo, NULL AS zzsrm2_consid_comm_sel_zo,
            NULL AS zzsrm2_consid_comm_eval_zo, NULL AS zzsrm2_date_prot_zo
            from :lt_qs12
        UNION
        SELECT rpz_i_guid, NULL, datum,NULL,NULL,NULL
            FROM :lt_ts22
        UNION
        SELECT rpz_i_guid, NULL, NULL,datum,NULL,NULL
            FROM :lt_sel23
        UNION
        SELECT rpz_i_guid, NULL, NULL, NULL, datum,NULL
            FROM :lt_ce24
        UNION
        SELECT rpz_i_guid, NULL, NULL, NULL, NULL, datum
            FROM :lt_prot_zo
            ;
    lt_qs12 = SELECT * FROM :lt_qs12 WHERE 1 = 2;
    lt_ts22 = SELECT * FROM :lt_ts22 WHERE 1 = 2;
    lt_sel23 = SELECT * FROM :lt_sel23 WHERE 1 = 2;
    lt_ce24 = SELECT * FROM :lt_ce24 WHERE 1 = 2;
    lt_prot_zo = SELECT * FROM :lt_prot_zo WHERE 1 = 2;

    lt_date_zo = SELECT rpz_i_guid,
                    MAX ( zzsrm2_consid_qual_zo ) AS zzsrm2_consid_qual_zo,
                    MAX ( zzsrm2_consid_tech_zo ) AS zzsrm2_consid_tech_zo,
                    MAX ( zzsrm2_consid_comm_sel_zo ) AS zzsrm2_consid_comm_sel_zo,
                    MAX ( zzsrm2_consid_comm_eval_zo ) AS zzsrm2_consid_comm_eval_zo,
                    MAX ( zzsrm2_date_prot_zo ) AS zzsrm2_date_prot_zo
                 FROM :lt_date_zo
                 GROUP BY rpz_i_guid;

    rt_date_zo = SELECT date_zo.rpz_i_guid, rpz_orderadm_i.header AS rpz_guid, hpur_rpz_i.zp_guid AS hpur_guid,
                     zzsrm2_consid_qual_zo, zzsrm2_consid_tech_zo,
                     zzsrm2_consid_comm_sel_zo, zzsrm2_consid_comm_eval_zo,
                     zzsrm2_date_prot_zo
                    FROM :lt_date_zo AS date_zo
                    INNER JOIN :it_hpur_rpz_i AS hpur_rpz_i
                        ON date_zo.rpz_i_guid = hpur_rpz_i.guid_i
                    INNER JOIN crmd_orderadm_i AS rpz_orderadm_i
                        ON hpur_rpz_i.guid_i = rpz_orderadm_i.guid AND
                           rpz_orderadm_i.client = :iv_client
                    ;


  ENDMETHOD.


  METHOD zifsrm2_rep_base_amdp~get_date_zo
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING bbp_pdhgp tvarvc crmd_orderadm_h
           zclsrm2_andev_model_amdp=>get_subtype
           zclsrm2_rep_base_amdp=>select_zo_dates
           zclsrm2_andev_model_amdp=>get_subtype
           bbp_pdhsc zvsrm2_i_pdhcf zclsrm2_rep_base_amdp=>get_rpz_rows_fr_src_guids
           zclsrm2_rep_base_amdp=>get_date_prot_zo crmd_orderadm_i.

    declare la_stages nvarchar( 3 ) array;

*   Если константа ZSRM2_SUBTYPE_UNCOMP не содержит значение, равное BBP_PDHGP–SUBTYPE,
*   где BBP_PDHGP–GUID = GUID ЗП, то
    lt_zp = SELECT hpur_guid AS guid
                FROM bbp_pdhgp AS pdhgp
                INNER JOIN
                    ( SELECT DISTINCT hpur_guid
                        FROM :it_links ) AS links
                    ON pdhgp.guid = links.hpur_guid
                INNER JOIN crmd_orderadm_h AS orderadm_h
                    ON links.hpur_guid = orderadm_h.guid AND
                       orderadm_h.client = :iv_client
                WHERE pdhgp.client = :iv_client AND
                      pdhgp.subtype NOT IN (
                        SELECT low
                            FROM tvarvc
                            WHERE name = 'ZSRM2_SUBTYPE_UNCOMP' AND
                                  mandt = :iv_client
                      )
                      ;
    if is_empty(:lt_zp) THEN
      return;
    END if;


    lt_sz =
        SELECT links.des_guid AS sz_guid,hpur_guid
            FROM :it_links AS links
                INNER JOIN :lt_zp AS zp_guid
                    ON links.hpur_guid = zp_guid.guid
                INNER JOIN bbp_pdhsc AS pdhsc
                    ON links.des_guid = pdhsc.guid AND
                       pdhsc.client = :iv_client AND
                       pdhsc.zzsrm2_nd_x = 'X'
                INNER JOIN bbp_pdhgp AS pdhgp
                    ON pdhsc.guid = pdhgp.guid AND
                       pdhsc.client = pdhgp.client
        WHERE des_type = 'ZMPP';

*    if is_empty(:lt_sz) THEN
*      return;
*    END if;

**   find rpz_i_guid and sz
    lt_pdhcf = SELECT DISTINCT pdhcf.guid, pdhcf.zzsrm2_bitem_guid, sz.sz_guid
                FROM :lt_sz AS sz
                    INNER JOIN zvsrm2_i_pdhcf AS pdhcf
                      ON sz.sz_guid = pdhcf.guid_hi AND
                         ( pdhcf.table_type IN ( 'THZCI', 'THZSI', 'THZSB', 'THZWP', 'THZWQ' )
                         ) AND
                         pdhcf.client = :iv_client
                           ;
**   find rpz rows
    lt_guids = SELECT DISTINCT zzsrm2_bitem_guid AS guid
                FROM :lt_pdhcf;
*
    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RPZ_ROWS_FR_SRC_GUIDS"( iv_client => :iv_client, it_guids => :lt_guids, et_guids => :lt_rpz_links,
        it_rpz_i_links => :it_rpz_i_links );

*   join sz with rpz_i_guid
    lt_sz_rpz_i = SELECT DISTINCT rpz_links.guid AS rpz_i_guid, pdhcf.sz_guid
                    FROM :lt_rpz_links AS rpz_links
                        INNER JOIN :lt_pdhcf AS pdhcf
                            ON rpz_links.source_guid = pdhcf.zzsrm2_bitem_guid;

*   .1 Для каждого лота ЗП определяем связанные СЗ с BBP_PDHSC-ZZSRM2_ND_X="X"
*   Среди найденных СЗ определяем BBP_PDHGP-SUBTYPE
    lt_sz_subtype =
        SELECT sz_rpz_i.rpz_i_guid, pdhgp.subtype, zzsrm2_nd_boc, zzsrm2_nd_eoc,
               created_at,
               rank( ) over (partition BY rpz_i_guid order by created_at desc ) as rank,
               sz_guid
            FROM :lt_sz_rpz_i AS sz_rpz_i
                INNER JOIN bbp_pdhgp AS pdhgp
                    ON sz_rpz_i.sz_guid = pdhgp.guid AND
                       pdhgp.client = :iv_client
                INNER JOIN bbp_pdhsc AS pdhsc
                    ON pdhgp.guid = pdhsc.guid AND
                       pdhsc.client = :iv_client AND
                       pdhsc.zzsrm2_nd_x = 'X'
                INNER JOIN crmd_orderadm_h AS orderadm_h
                    ON pdhsc.guid = orderadm_h.guid AND
                       orderadm_h.client = :iv_client
                       ;



*   ZZSRM2_CONSID_QUAL_ZO
*   STAGE =280=285 или =236=241 или =130 =160 или =140=170 или =117 или =121=151 или =120 =150
    la_stages[ 1 ] = '285'; la_stages[ 2 ] = '241'; la_stages[ 3 ] = '160';
    la_stages[ 4 ] = '170'; la_stages[ 5 ] = '117'; la_stages[ 6 ] = '151';
    la_stages[ 7 ] = '150';
    lt_stages = unnest(:la_stages) AS ( stage );
*   "QUALIF_SEL=  ‘12’.
    CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>GET_SUBTYPE"( iv_client => :iv_client, iv_type => 1, et_subtype => :lt_subtype );
    CALL "ZCLSRM2_REP_BASE_AMDP=>SELECT_ZO_DATES"(
     iv_client => :iv_client, it_links=> :it_links, iv_rep_type => :iv_rep_type,
        it_zp_guid =>:lt_zp, it_stage => :lt_stages, it_subtype => :lt_subtype, it_hpur_rpz_i => :it_hpur_rpz_i,
        it_sz_subtypes => :lt_sz_subtype,
        et_dates => :lt_qs12
        );

*   ZZSRM2_CONSID_TECH_ZO
*   STAGE =122=123 или =161=162 или =173=174 или =220 = 232 или =140=170 или =117 или =211=230 или =121=151 или =120=150 или =212=231

    la_stages = trim_array(:la_stages, 0);
    la_stages[ 1 ] = '123'; la_stages[ 2 ] = '162';la_stages[ 3 ] = '174';
    la_stages[ 4 ] = '232'; la_stages[ 5 ] = '170';la_stages[ 6 ] = '117';
    la_stages[ 7 ] = '230'; la_stages[ 8 ] = '151';la_stages[ 9 ] = '150';
    la_stages[ 10 ] = '231';
    lt_stages = unnest(:la_stages) AS ( stage );
    CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>GET_SUBTYPE"( iv_client => :iv_client, iv_type => 2, et_subtype => :lt_subtype );
    CALL "ZCLSRM2_REP_BASE_AMDP=>SELECT_ZO_DATES"(
     iv_client => :iv_client, it_links=> :it_links, iv_rep_type => :iv_rep_type,
        it_zp_guid =>:lt_zp, it_stage => :lt_stages, it_subtype => :lt_subtype, it_hpur_rpz_i => :it_hpur_rpz_i,
        it_sz_subtypes => :lt_sz_subtype,
        et_dates => :lt_ts22
        );

*  ZZSRM2_CONSID_COMM_SEL_ZO

*   STAGE =260=261 или =211=230 или =121=151 или =212 =231 или =269=272 или =271=272 или =120=150 или =221=272 или =330=350
    la_stages = trim_array(:la_stages, 0);
    la_stages[ 1 ] = '261'; la_stages[ 2 ] = '230';la_stages[ 3 ] = '151';
    la_stages[ 4 ] = '272'; la_stages[ 5 ] = '150';la_stages[ 6 ] = '272';
    la_stages[ 7 ] = '350'; la_stages[ 8 ] = '231';
    lt_stages = unnest(:la_stages) AS ( stage );
    CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>GET_SUBTYPE"( iv_client => :iv_client, iv_type => 3, et_subtype => :lt_subtype );
    CALL "ZCLSRM2_REP_BASE_AMDP=>SELECT_ZO_DATES"(
     iv_client => :iv_client, it_links=> :it_links, iv_rep_type => :iv_rep_type,
        it_zp_guid =>:lt_zp, it_stage => :lt_stages, it_subtype => :lt_subtype, it_hpur_rpz_i => :it_hpur_rpz_i,
        it_sz_subtypes => :lt_sz_subtype,
        et_dates => :lt_sel23
        );

*   ZZSRM2_CONSID_COMM_EVAL_ZO
*   STAGE =290=295 или =270 или =230 или =261 или =330=350  или =120=150 или =212=231 или =221=272 или =262=270 или =269=272 или =271=272
    la_stages = trim_array(:la_stages, 0);
    la_stages[ 1 ] = '295'; la_stages[ 2 ] = '270';la_stages[ 3 ] = '230';
    la_stages[ 4 ] = '261'; la_stages[ 5 ] = '350';la_stages[ 6 ] = '150';
    la_stages[ 7 ] = '231'; la_stages[ 8 ] = '272';
    lt_stages = unnest(:la_stages) AS ( stage );
    CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>GET_SUBTYPE"( iv_client => :iv_client, iv_type => 4, et_subtype => :lt_subtype );
    CALL "ZCLSRM2_REP_BASE_AMDP=>SELECT_ZO_DATES"(
     iv_client => :iv_client, it_links=> :it_links, iv_rep_type => :iv_rep_type,
        it_zp_guid =>:lt_zp, it_stage => :lt_stages, it_subtype => :lt_subtype, it_hpur_rpz_i => :it_hpur_rpz_i,
        it_sz_subtypes => :lt_sz_subtype,
        et_dates => :lt_ce24
        );

*  ZZSRM2_DATE_PROT_ZO
    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_DATE_PROT_ZO"(
     iv_client => :iv_client, it_sz_subtypes=> :lt_sz_subtype, it_hpur_rpz_i => :it_hpur_rpz_i,
        it_zp_guid =>:lt_zp, et_dates => :lt_prot_zo
        );

    lt_date_zo =
        SELECT rpz_i_guid, datum AS zzsrm2_consid_qual_zo,
            NULL AS zzsrm2_consid_tech_zo, NULL AS zzsrm2_consid_comm_sel_zo,
            NULL AS zzsrm2_consid_comm_eval_zo, NULL AS zzsrm2_date_prot_zo
            from :lt_qs12
        UNION
        SELECT rpz_i_guid, NULL, datum,NULL,NULL,NULL
            FROM :lt_ts22
        UNION
        SELECT rpz_i_guid, NULL, NULL,datum,NULL,NULL
            FROM :lt_sel23
        UNION
        SELECT rpz_i_guid, NULL, NULL, NULL, datum,NULL
            FROM :lt_ce24
        UNION
        SELECT rpz_i_guid, NULL, NULL, NULL, NULL, datum
            FROM :lt_prot_zo
            ;

    lt_date_zo = SELECT rpz_i_guid,
                    MAX ( zzsrm2_consid_qual_zo ) AS zzsrm2_consid_qual_zo,
                    MAX ( zzsrm2_consid_tech_zo ) AS zzsrm2_consid_tech_zo,
                    MAX ( zzsrm2_consid_comm_sel_zo ) AS zzsrm2_consid_comm_sel_zo,
                    MAX ( zzsrm2_consid_comm_eval_zo ) AS zzsrm2_consid_comm_eval_zo,
                    MAX ( zzsrm2_date_prot_zo ) AS zzsrm2_date_prot_zo
                 FROM :lt_date_zo
                 GROUP BY rpz_i_guid;

    rt_date_zo = SELECT date_zo.rpz_i_guid, rpz_orderadm_i.header AS rpz_guid, hpur_rpz_i.zp_guid AS hpur_guid,
                     zzsrm2_consid_qual_zo, zzsrm2_consid_tech_zo,
                     zzsrm2_consid_comm_sel_zo, zzsrm2_consid_comm_eval_zo,
                     zzsrm2_date_prot_zo
                    FROM :lt_date_zo AS date_zo
                    INNER JOIN :it_hpur_rpz_i AS hpur_rpz_i
                        ON date_zo.rpz_i_guid = hpur_rpz_i.guid_i
                    INNER JOIN crmd_orderadm_i AS rpz_orderadm_i
                        ON hpur_rpz_i.guid_i = rpz_orderadm_i.guid AND
                           rpz_orderadm_i.client = :iv_client
                    ;


  ENDMETHOD.

  METHOD select_zo_dates
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING  zvsrm2_reg_dat.


    lt_sz_subtype_not_sl =
       SELECT rpz_i_guid, zzsrm2_nd_boc
           FROM (
               SELECT rpz_i_guid, zzsrm2_nd_boc,
                      rank( ) over (partition BY rpz_i_guid order by created_at desc ) as rank
                   FROM :it_sz_subtypes
                   WHERE subtype <> 'SL' AND
                         subtype IN ( SELECT subtype FROM :it_subtype ) )
       WHERE rank = 1
                 ;

    lt_sz_subtype_sl =
       SELECT sl_rank_1.rpz_i_guid, sl_rank_1.zzsrm2_nd_boc
           FROM :it_sz_subtypes AS sz_subtype
           INNER JOIN
               ( SELECT rpz_i_guid, zzsrm2_nd_boc, rank
                   FROM :it_sz_subtypes
                   WHERE subtype = 'SL' ) AS sl_rank_1
           ON sz_subtype.rpz_i_guid = sl_rank_1.rpz_i_guid AND
              sz_subtype.rank = ( sl_rank_1.rank + 1 ) AND
              sz_subtype.subtype IN ( SELECT subtype FROM :it_subtype )

                         ;

*   REGDATA
   lt_zp_regdata =
       SELECT p_guid AS zp_guid,hpur_rpz_i.guid_i AS rpz_i_guid, actual_endda
           FROM zvsrm2_reg_dat AS reg_dat
               INNER JOIN :it_hpur_rpz_i AS hpur_rpz_i
                   ON reg_dat.p_guid = hpur_rpz_i.zp_guid
           WHERE EXISTS (
                SELECT guid
                   FROM :it_zp_guid AS zp_guid
                   WHERE reg_dat.p_guid = zp_guid.guid ) AND
                 reg_dat.stage IN (
                   SELECT stage FROM :it_stage  )
                 ;
   et_dates =
       SELECT rpz_i_guid, MAX ( max_date ) AS datum
           FROM (
               SELECT rpz_i_guid, zzsrm2_nd_boc AS max_date
                   FROM :lt_sz_subtype_not_sl
               UNION
               SELECT rpz_i_guid, zzsrm2_nd_boc
                   FROM :lt_sz_subtype_sl
               UNION
               SELECT rpz_i_guid, actual_endda
                   FROM :lt_zp_regdata
            )
       GROUP BY rpz_i_guid;

  ENDMETHOD.

  METHOD get_date_prot_zo
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING  zvsrm2_reg_dat.

*   REGDATA
*   STAGE =290=295 или =270 или =330=350  или =120=150 или =212=231 или =221=272 или =262=270 или =269=272 или =271=272
    lt_zp_regdata =
        SELECT p_guid AS zp_guid,hpur_rpz_i.guid_i AS rpz_i_guid, actual_endda
            FROM zvsrm2_reg_dat AS reg_dat
                INNER JOIN :it_hpur_rpz_i AS hpur_rpz_i
                    ON reg_dat.p_guid = hpur_rpz_i.zp_guid
            WHERE EXISTS (
                SELECT guid
                    FROM :it_zp_guid AS zp_guid
                    WHERE zp_guid.guid = reg_dat.p_guid ) AND
                  reg_dat.stage IN ( '295', '270', '350', '150', '231', '272', '270', '272'  );
    et_dates =
        SELECT rpz_i_guid, MAX ( max_date ) AS datum
            FROM (
                SELECT rpz_i_guid, zzsrm2_nd_eoc AS max_date
                    FROM :it_sz_subtypes
                UNION
                SELECT rpz_i_guid, actual_endda
                    FROM :lt_zp_regdata
             )
        GROUP BY rpz_i_guid;

  ENDMETHOD.

  METHOD zifsrm2_rep_base_amdp~get_date_dir_est
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING zclsrm2_rep_base_amdp=>get_date_dir_est_p
           zclsrm2_andev_model_amdp=>read_pp_docpropval.
    declare la_eval_stage nvarchar( 2 ) array;
    IF iv_rep_type = '01' or iv_rep_type = '02' THEN
*        "rpz rpz rows
        CALL "ZCLSRM2_REP_BASE_AMDP=>GET_DATE_DIR_EST_P"(
         iv_client => :iv_client, it_bukrs_guid=> :it_bukrs_guid, et_date_dir_est => :et_date_dir_est
            );
    ELSEIF iv_rep_type = '03' THEN

*       date_dir_est_1
        la_eval_stage = trim_array(:la_eval_stage, 0);
        la_eval_stage[ 1 ] = '12';
        la_eval_stage[ 2 ] = '1';
        lt_stages = unnest(:la_eval_stage) AS ( eval_stage );
        lt_stages2 = SELECT null as eval_stage FROM dummy;
        CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>READ_PP_DOCPROPVAL"( iv_client => :iv_client, it_bukrs => :it_bukrs_guid, it_eval_stage => :lt_stages,
                                            it_eval_stage2 => :lt_stages2, et_docpropval => :lt_date_dir_est_1 );
*       date_dir_est_2
        la_eval_stage = trim_array(:la_eval_stage, 0);
        la_eval_stage[ 1 ] = '22';
        la_eval_stage[ 2 ] = '1';
        lt_stages = unnest(:la_eval_stage) AS ( eval_stage );
        CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>READ_PP_DOCPROPVAL"( iv_client => :iv_client, it_bukrs => :it_bukrs_guid, it_eval_stage => :lt_stages,
                                           it_eval_stage2 => :lt_stages2, et_docpropval => :lt_date_dir_est_2 );
*       date_dir_est_3
        la_eval_stage = trim_array(:la_eval_stage, 0);
        la_eval_stage[ 1 ] = '2';
        la_eval_stage[ 2 ] = '23';
        lt_stages = unnest(:la_eval_stage) AS ( eval_stage );
        CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>READ_PP_DOCPROPVAL"( iv_client => :iv_client, it_bukrs => :it_bukrs_guid, it_eval_stage => :lt_stages,
                                           it_eval_stage2 => :lt_stages2, et_docpropval => :lt_date_dir_est_3 );
*       date_dir_est_4
        la_eval_stage = trim_array(:la_eval_stage, 0);
        la_eval_stage[ 1 ] = '2';
        la_eval_stage[ 2 ] = '24';
        lt_stages = unnest(:la_eval_stage) AS ( eval_stage );
        CALL "ZCLSRM2_ANDEV_MODEL_AMDP=>READ_PP_DOCPROPVAL"( iv_client => :iv_client, it_bukrs => :it_bukrs_guid, it_eval_stage => :lt_stages,
                                           it_eval_stage2 => :lt_stages2, et_docpropval => :lt_date_dir_est_4 );
        et_date_dir_est =
            SELECT pp_guid as guid, NULL AS zzsrm2_z010_bukrs, create_date AS zzsrm2_date_dir_est_1, NULL AS zzsrm2_date_dir_est_2, NULL AS zzsrm2_date_dir_est_3, NULL as zzsrm2_date_dir_est_4
                FROM  :lt_date_dir_est_1
            UNION
             SELECT pp_guid as guid,NULL, NULL, create_date, NULL , NULL
                FROM  :lt_date_dir_est_2
            UNION
             SELECT pp_guid as guid,NULL, NULL, NULL, create_date, NULL
                FROM  :lt_date_dir_est_3
            UNION
             SELECT pp_guid as guid,NULL, NULL, NULL, NULL, create_date
                FROM  :lt_date_dir_est_4;
       et_date_dir_est =
        SELECT guid, zzsrm2_z010_bukrs,  MAX ( zzsrm2_date_dir_est_1 ) AS zzsrm2_date_dir_est_1, MAX ( zzsrm2_date_dir_est_2 ) AS zzsrm2_date_dir_est_2,
                MAX ( zzsrm2_date_dir_est_3 ) AS zzsrm2_date_dir_est_3, MAX ( zzsrm2_date_dir_est_4 ) AS zzsrm2_date_dir_est_4
            FROM :et_date_dir_est
            GROUP BY guid,zzsrm2_z010_bukrs;

    END if;
  ENDMETHOD.

  METHOD get_date_dir_est_p_ind
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING ztsrm2_erqevt_c zsglobject zsgldocpropval.

*    1. Производим выборку ZTSRM2_ERQEVT_C- ZZSRM2_OBJECT_ID, где ZTSRM2_ERQEVT_C-ZZSRM2_Z010_BUKRS =
*        ZZSRM2_BUKRS (поле позиционного отчета),
*       ZTSRM2_ERQEVT_C- EVAL_STAGE = 12 или 1, ZTSRM2_ERQEVT_C- EVAL_GUID = BBP_PDHSS - EVAL_GUID, где
*       BBP_PDHSS – GUID = GUID Лота, ZZSRM2_STATUS=I1015/I1011/I9904.
*    2. Определяем ZSGLOBJECT-OBJECT_ID,
*       по OBJECT_KEY = ZTSRM2_ERQEVT_C- ZZSRM2_OBJECT_ID
*    3. Определяем наибольший ZSGLDOCPROPVAL - DOC_ID по OBJECT_ID= ZSGLOBJECT-OBJECT_ID, DOC_TYPE=LIST.
*    4. Выводим наиболее раннюю дату  ZSGLDOCPROPVAL-CREATE_DATE по OBJECT_ID= ZSGLOBJECT-OBJECT_ID,
*       DOC_ID (п.3), ZSGLDOCPROPVAL-PROPERTY_ID = АКТИВ
    lt_erqevt_c = SELECT DISTINCT zzsrm2_object_id, bukrs_guid.guid AS eval_guid, zzsrm2_z010_bukrs
                    FROM ztsrm2_erqevt_c AS erqevt_c
                        INNER JOIN :it_bukrs_guid AS bukrs_guid
                            ON erqevt_c.eval_guid = bukrs_guid.guid AND
                               erqevt_c.zzsrm2_z010_bukrs = bukrs_guid.zzsrm2_bukrs
                    WHERE eval_stage IN ( SELECT eval_stage FROM :it_eval_stage ) AND
                          erqevt_c.mandt = :iv_client AND
                          zzsrm2_status IN ( 'I1015', 'I1011', 'I9904' );
    IF is_empty( :lt_erqevt_c ) THEN
        return;
    END if;

    lt_docpropval_m = SELECT DISTINCT zsgldocpropval.doc_id, zsgldocpropval.object_id, eval_guid,zzsrm2_z010_bukrs,
                             rank( ) over (partition BY zsgldocpropval.object_id order by zsgldocpropval.doc_id desc ) as rank
                        FROM zsglobject
                        INNER JOIN :lt_erqevt_c AS erqevt_c
                            ON zsglobject.object_key = erqevt_c.zzsrm2_object_id
                        INNER JOIN zsgldocpropval
                            ON zsglobject.object_id = zsgldocpropval.object_id AND
                               zsgldocpropval.mandt = zsglobject.client AND
                               doc_type = 'LIST'
                        WHERE client = :iv_client;


    et_result = SELECT eval_guid as guid, MIN (zsgldocpropval.create_date) AS date, zzsrm2_z010_bukrs
                        FROM :lt_docpropval_m AS docpropval_m
                            INNER JOIN zsgldocpropval
                                ON docpropval_m.object_id = zsgldocpropval.object_id AND
                                   docpropval_m.doc_id = zsgldocpropval.doc_id AND
                                   zsgldocpropval.mandt = :iv_client AND
                                   property_id = 'АКТИВ'
                        WHERE docpropval_m.rank = 1
                      GROUP BY eval_guid, zzsrm2_z010_bukrs;

  ENDMETHOD.

  METHOD get_date_dir_est_p
    BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING zclsrm2_rep_base_amdp=>get_date_dir_est_p_ind.
    declare la_eval_stage nvarchar( 2 ) array;

*   date_dir_est_1
    la_eval_stage = trim_array(:la_eval_stage, 0);
    la_eval_stage[ 1 ] = '12'; la_eval_stage[ 2 ] = '1';
    lt_stages = unnest(:la_eval_stage) AS ( eval_stage );
    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_DATE_DIR_EST_P_IND"(
     iv_client => :iv_client, it_bukrs_guid=> :it_bukrs_guid, it_eval_stage=> :lt_stages,
     et_result => :lt_date_dir_est_1 );

*   date_dir_est_2
    la_eval_stage = trim_array(:la_eval_stage, 0);
    la_eval_stage[ 1 ] = '22'; la_eval_stage[ 2 ] = '1';
    lt_stages = unnest(:la_eval_stage) AS ( eval_stage );
    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_DATE_DIR_EST_P_IND"(
     iv_client => :iv_client, it_bukrs_guid=> :it_bukrs_guid, it_eval_stage=> :lt_stages,
     et_result => :lt_date_dir_est_2 );

*   date_dir_est_3
    la_eval_stage = trim_array(:la_eval_stage, 0);
    la_eval_stage[ 1 ] = '2'; la_eval_stage[ 2 ] = '23';
    lt_stages = unnest(:la_eval_stage) AS ( eval_stage );
    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_DATE_DIR_EST_P_IND"(
     iv_client => :iv_client, it_bukrs_guid=> :it_bukrs_guid, it_eval_stage=> :lt_stages,
     et_result => :lt_date_dir_est_3 );

*   date_dir_est_4
    la_eval_stage = trim_array(:la_eval_stage, 0);
    la_eval_stage[ 1 ] = '2'; la_eval_stage[ 2 ] = '24';
    lt_stages = unnest(:la_eval_stage) AS ( eval_stage );
    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_DATE_DIR_EST_P_IND"(
     iv_client => :iv_client, it_bukrs_guid=> :it_bukrs_guid, it_eval_stage=> :lt_stages,
     et_result => :lt_date_dir_est_4 );

    et_date_dir_est = SELECT date_dir_est_1.guid, zzsrm2_z010_bukrs, date_dir_est_1.date AS zzsrm2_date_dir_est_1, NULL AS zzsrm2_date_dir_est_2,
                         NULL AS zzsrm2_date_dir_est_3, NULL AS zzsrm2_date_dir_est_4
                       FROM :lt_date_dir_est_1 AS date_dir_est_1
                      UNION
                      SELECT guid,zzsrm2_z010_bukrs, NULL,date, NULL,NULL
                       FROM :lt_date_dir_est_2
                      UNION
                      SELECT guid,zzsrm2_z010_bukrs, NULL,NULL,date, NULL
                       FROM :lt_date_dir_est_3
                      UNION
                      SELECT guid,zzsrm2_z010_bukrs, NULL,NULL, NULL,date
                       FROM :lt_date_dir_est_4
                       ;

    et_date_dir_est = SELECT guid,zzsrm2_z010_bukrs, MAX ( zzsrm2_date_dir_est_1 ) AS zzsrm2_date_dir_est_1,
                            MAX ( zzsrm2_date_dir_est_2 ) AS zzsrm2_date_dir_est_2,
                            MAX ( zzsrm2_date_dir_est_3 ) AS zzsrm2_date_dir_est_3,
                            MAX ( zzsrm2_date_dir_est_4 ) AS zzsrm2_date_dir_est_4
                      FROM :et_date_dir_est
                      GROUP BY guid,zzsrm2_z010_bukrs;

  ENDMETHOD.

  METHOD fill_zmpp_data
     BY DATABASE PROCEDURE FOR HDB
     LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
     USING zvsrm2_crepzmpp crmd_orderadm_h zvsrm2_icrmjest ztsrm2_prot_publ ztsrm2_rsn_datah ztsrm2_etp_datah.

    et_zmpp_data = select links.src_guid, links.con_guid,
                    zvsrm2_crepzmpp.*,
                    case orderadm_h_con.process_type
                      when 'RETR'
                      then zzsrm2_zomeet_date
                    end as zzsrm2_zomeet_date_retr,
*>>> DSOSTROVSKI1 25.03.2021 17894
                    rsn_datah.created_at as zzsrm2_sitern_prot_pp,
                    etp_datah.created_at as zzsrm2_etp_prot_pp
*<<< DSOSTROVSKI1 25.03.2021 17894
            from zvsrm2_crepzmpp
            inner join :it_links as links
              on guid = des_guid
            inner join crmd_orderadm_h as orderadm_h_con
              on links.con_guid = orderadm_h_con.guid and
                 orderadm_h_con.client = :iv_client
*>>> DSOSTROVSKI1 25.03.2021 17894
            left join ztsrm2_prot_publ as prot_publ
              on prot_publ.guid_scon = zvsrm2_crepzmpp.guid
            left join ztsrm2_etp_datah as etp_datah
              on etp_datah.object_guid = prot_publ.guid_prot
             and etp_datah.created_at = (
                select min( created_at )
                    from ztsrm2_etp_datah
                    where object_guid = prot_publ.guid_prot
                      and reg_number <> ''
                      and published_at <> 0
                      and object_type = 'PROTOCOL' )
            left join ztsrm2_rsn_datah as rsn_datah
              on rsn_datah.object_guid = prot_publ.guid_prot
             and rsn_datah.created_at = (
                select min( created_at )
                    from ztsrm2_rsn_datah
                    where object_guid = prot_publ.guid_prot
                      and rsn_active_version <> '00000000000000000000000000000000'
                      and rsn_change_version = '00000000000000000000000000000000'
                      and object_type = 'PROTOCOL' )
*<<< DSOSTROVSKI1 25.03.2021 17894
            where zvsrm2_crepzmpp.client = :iv_client and
                  not zvsrm2_crepzmpp.process_type in ( 'HPUR', 'ILOT' ) and
                  EXISTS (
                    select des_guid
                      from :it_links
                      where not des_type in ( 'RENG', 'RETR' ) AND
                            des_guid = zvsrm2_crepzmpp.guid
                    )  and
                  EXISTS (
                    select objnr
                      from zvsrm2_icrmjest
                      where stat in ( 'I1011', 'I9915', 'I9914' ) and
                            inact = '' and
                            objnr = zvsrm2_crepzmpp.guid
                  );

  ENDMETHOD.

  METHOD get_hpur_sz_data
    .

*    проверяем статус ЗП, если = I1023 (Закрыто), ищем связанное с ЗП СЗ по BBP_PDHSC - ZZSRM2_SRC_BID
*    с самой ранней датой создания. Выводим BBP_PDHSC- ZZSRM2_ZOMEET_DATE, где BBP_PDHSC= GUID СЗ
*     SELECT hpur_guids.guid, sz_pdhsc.guid, zzsrm2_zomeet_date,
*        FROM :it_hpur_guids as hpur_guids
*            INNER ONE TO MANY JOIN bbp_pdhsc AS sz_pdhsc
*                ON hpur_guids.guid = sz_pdhsc.zzsrm2_src_bid
*        WHERE EXISTS ( SELECT * FROM zvsrm2_icrmjest WHERE stat = 'I1023' AND inact = '' AND objnr = hpur_guids.guid )

  ENDMETHOD.

  METHOD get_zmpp_links
       BY DATABASE PROCEDURE FOR HDB
           LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
           USING zvsrm2_i_pdhcf
                zclsrm2_rep_base_amdp=>get_rpz_rows_fr_src_guids
                crmd_orderadm_i.

*   prepare pdhcf
    lt_pdhcf = SELECT DISTINCT zmpp_data.src_guid, con_guid, pdhcf.zzsrm2_bitem_guid, zmpp_data.zzsrm2_src_hpur, zmpp_data.guid
                FROM :it_zmpp_data AS zmpp_data
                            INNER JOIN zvsrm2_i_pdhcf AS pdhcf
                              ON zmpp_data.guid = pdhcf.guid_hi AND
                                 ( pdhcf.table_type IN ( 'THZCI', 'THZSI', 'THZSB', 'THZWQ', 'THZWP' )
                                 ) AND
                                 pdhcf.client = :iv_client
                WHERE zzsrm2_bitem_guid <> '00000000000000000000000000000000' ;
*   find rpz rows
    lt_guids = SELECT DISTINCT zzsrm2_bitem_guid AS guid
                FROM :lt_pdhcf
                WHERE zzsrm2_bitem_guid <> '00000000000000000000000000000000' ;

    CALL "ZCLSRM2_REP_BASE_AMDP=>GET_RPZ_ROWS_FR_SRC_GUIDS"( iv_client => :iv_client, it_guids => :lt_guids, it_rpz_i_links => :it_rpz_i_links,
             et_guids => :lt_rpz_links );

    et_zmpp_links = SELECT DISTINCT orderadm_i.header as rpz_header, rpz_links.guid as rpz_i_guid,
                          orderadm_i_lot.header as ilot_guid,
                          rpz_links.ilot_i_guid as ilot_i_guid,
                          rpz_links.slpp_agr_guid,
                          pdhcf.zzsrm2_bitem_guid, pdhcf. guid AS zmpp_guid,
                          pdhcf.zzsrm2_src_hpur AS hpur_guid
                      from :lt_pdhcf as pdhcf
                        left join :lt_rpz_links as rpz_links
                          on pdhcf.zzsrm2_bitem_guid = rpz_links.source_guid
                        left JOIN crmd_orderadm_i as orderadm_i
                          ON rpz_links.guid = orderadm_i.guid
                        left JOIN crmd_orderadm_i  as orderadm_i_lot
                          ON rpz_links.ilot_i_guid = orderadm_i_lot.guid
                          ;


  ENDMETHOD.

  METHOD get_doc_i_hierachy
   BY DATABASE PROCEDURE FOR HDB
   LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
   USING crmd_orderadm_i bbp_pdigp crmd_orderadm_h crm_jest srrelroles bbp_pdbinrel.

*    et_result =
*    SELECT node_id AS guid,
*           parent_id AS p_guid,
*           process_type,
*           object_type,
*           header,
*           p_process_type,
*           hierarchy_tree_size AS tree_size,
*           hierarchy_parent_rank AS parent_rank
*     FROM hierarchy (
*     SOURCE ( SELECT orderadm_i.guid AS node_id, pdigp.src_guid AS parent_id, orderadm_i.object_type,orderadm_h.process_type,
*                     orderadm_i.header, orderadm_h_p.process_type AS p_process_type
*                 FROM crmd_orderadm_i AS orderadm_i
*                    INNER ONE TO ONE JOIN bbp_pdigp  AS pdigp
*                        ON orderadm_i.guid = pdigp.guid AND
*                           orderadm_i.client = pdigp.client
*                    INNER MANY TO ONE JOIN crmd_orderadm_h AS orderadm_h
*                        ON orderadm_i.header = orderadm_h.guid
*                    LEFT ONE TO ONE JOIN crmd_orderadm_i AS orderadm_i_p
*                        ON pdigp.src_guid = orderadm_i_p.guid AND
*                           pdigp.client = orderadm_i_p.client
*                    LEFT ONE TO ONE JOIN crmd_orderadm_h AS orderadm_h_p
*                        ON orderadm_h_p.guid = orderadm_i_p.header AND
*                           orderadm_i_p.client = orderadm_h_p.client
*                 WHERE pdigp.del_ind = '' AND
*                       orderadm_i.client = :iv_client AND
*                       (
*                         ( orderadm_h.process_type IN ( 'PPR', 'SLPP' ) AND EXISTS ( SELECT objnr FROM crm_jest
*                            WHERE crm_jest.mandt = :iv_client AND crm_jest.inact = ''
*                              AND crm_jest.stat IN ( 'I1009', 'I9907', 'I1015', 'I9904', 'I1141', 'I9902' )
*                              AND crm_jest.objnr = orderadm_h.guid  ) ) OR
*                         ( orderadm_h.process_type IN ( 'ILOT' ) AND NOT EXISTS ( SELECT objnr FROM crm_jest
*                            WHERE crm_jest.mandt = :iv_client AND crm_jest.inact = ''
*                              AND crm_jest.stat IN ( 'I1040' ) AND crm_jest.objnr = orderadm_h.guid ) ) OR
*                         ( orderadm_h.process_type IN ( 'RETR', 'RENG' ) AND EXISTS ( SELECT objnr FROM crm_jest
*                            WHERE crm_jest.mandt = :iv_client AND crm_jest.inact = ''
*                              AND crm_jest.stat IN ( 'I1011' ) AND crm_jest.objnr = orderadm_h.guid ) ) OR
*                         ( orderadm_h.process_type IN ( 'QAPO' ) AND EXISTS ( SELECT objnr FROM crm_jest
*                            WHERE crm_jest.mandt = :iv_client AND crm_jest.inact = ''
*                              AND crm_jest.stat IN ( 'I1012', 'I9926' ) AND crm_jest.objnr = orderadm_h.guid ) )
*
*                       )
*                    )
*     START WHERE orderadm_i.guid IN ( SELECT guid FROM :it_guids )
*     depth 15
*     orphan IGNORE
*     )
*     ORDER BY hierarchy_rank;

    lt_result =
    SELECT node_id,
           parent_id,
           hierarchy_tree_size AS tree_size,
           hierarchy_parent_rank AS parent_rank,
           hierarchy_rank
     FROM hierarchy (
     SOURCE ( SELECT rel_b.objkey AS node_id, rel_a.objkey AS parent_id
                 FROM srrelroles AS rel_a
                    INNER JOIN bbp_pdbinrel
                        ON bbp_pdbinrel.role_a = rel_a.roleid AND
                           bbp_pdbinrel.breltyp = 'PDIL' AND
                           bbp_pdbinrel.client = :iv_client
                    INNER JOIN srrelroles AS rel_b
                        ON rel_b.roleid = bbp_pdbinrel.role_b AND
                           rel_b.roletype = 'BBP_TRITM' AND
                           rel_b.client = :iv_client
                    )
     START WHERE rel_b.objkey IN ( SELECT guid FROM :it_guids )
     depth 15
     orphan IGNORE
     cache 'on'
     )
     ;


    et_result =
    SELECT orderadm_i.guid AS guid,
           orderadm_i_p.guid AS p_guid,
           orderadm_h.process_type AS process_type,
           orderadm_i.object_type AS object_type,
           orderadm_i.header AS header,
           orderadm_h_p.process_type AS p_process_type,
           tree_size,
           parent_rank
     FROM :lt_result AS hierachy
*      srrelroles AS rel_a
*        INNER JOIN bbp_pdbinrel
*            ON bbp_pdbinrel.role_a = rel_a.roleid AND
*               bbp_pdbinrel.breltyp = 'PDIL' AND
*               bbp_pdbinrel.client = :iv_client
*        INNER JOIN srrelroles AS rel_b
*            ON rel_b.roleid = bbp_pdbinrel.role_b AND
*               rel_b.roletype = 'BBP_TRITM' AND
*               rel_b.client = :iv_client
        INNER JOIN crmd_orderadm_i AS orderadm_i
            ON orderadm_i.guid = hierachy.node_id AND
               orderadm_i.client = :iv_client
        INNER ONE TO ONE JOIN bbp_pdigp  AS pdigp
            ON orderadm_i.guid = pdigp.guid AND
               orderadm_i.client = pdigp.client
        INNER MANY TO ONE JOIN crmd_orderadm_h AS orderadm_h
            ON orderadm_i.header = orderadm_h.guid
        LEFT ONE TO ONE JOIN crmd_orderadm_i AS orderadm_i_p
            ON pdigp.src_guid = orderadm_i_p.guid AND
               pdigp.client = orderadm_i_p.client
        LEFT ONE TO ONE JOIN crmd_orderadm_h AS orderadm_h_p
            ON orderadm_h_p.guid = orderadm_i_p.header AND
               orderadm_i_p.client = orderadm_h_p.client
     WHERE pdigp.del_ind = '' AND
           orderadm_i.client = :iv_client AND
           (
             ( orderadm_h.process_type IN ( 'PPR', 'SLPP' ) AND EXISTS ( SELECT objnr FROM crm_jest
                WHERE crm_jest.mandt = :iv_client AND crm_jest.inact = ''
                  AND crm_jest.stat IN ( 'I1009', 'I9907', 'I1015', 'I9904', 'I1141', 'I9902' )
                  AND crm_jest.objnr = orderadm_h.guid  ) ) OR
             ( orderadm_h.process_type IN ( 'ILOT' ) AND NOT EXISTS ( SELECT objnr FROM crm_jest
                WHERE crm_jest.mandt = :iv_client AND crm_jest.inact = ''
                  AND crm_jest.stat IN ( 'I1040' ) AND crm_jest.objnr = orderadm_h.guid ) ) OR
             ( orderadm_h.process_type IN ( 'RETR', 'RENG' ) AND EXISTS ( SELECT objnr FROM crm_jest
                WHERE crm_jest.mandt = :iv_client AND crm_jest.inact = ''
                  AND crm_jest.stat IN ( 'I1011' ) AND crm_jest.objnr = orderadm_h.guid ) ) OR
             ( orderadm_h.process_type IN ( 'QAPO' ) AND EXISTS ( SELECT objnr FROM crm_jest
                WHERE crm_jest.mandt = :iv_client AND crm_jest.inact = ''
                  AND crm_jest.stat IN ( 'I1012', 'I9926' ) AND crm_jest.objnr = orderadm_h.guid ) ) )
      ORDER BY hierarchy_rank;

  ENDMETHOD.

  METHOD get_quot_data_o
    BY DATABASE PROCEDURE FOR HDB
    LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
    USING crmd_orderadm_i bbp_pdhsc crmd_link crmd_partner bbp_pdhgp.

    lt = SELECT ilot_i_links.ilot_i_guid AS ilot_i_guid, partner_18.partner_no AS partner_no_18,
                       CASE WHEN quot_pdhsc.zzsrm2_com_submit_dt > 0 THEN quot_pdhsc.zzsrm2_com_submit_dt END AS zzsrm2_com_submit_dt,
                       CASE WHEN quot_pdhsc.zzsrm2_qual_submit_dt > 0 THEN quot_pdhsc.zzsrm2_qual_submit_dt END AS zzsrm2_qual_submit_dt,
                       CASE WHEN quot_pdhsc.zzsrm2_tech_submit_dt > 0 THEN quot_pdhsc.zzsrm2_tech_submit_dt END AS zzsrm2_tech_submit_dt
                  FROM :it_ilot_i_links as ilot_i_links
                    INNER JOIN crmd_orderadm_i AS quot_orderadm_i
                      ON ilot_i_links.des_guid = quot_orderadm_i.guid AND
                         quot_orderadm_i.client = :iv_client
                    INNER JOIN bbp_pdhsc AS quot_pdhsc
                      ON quot_orderadm_i.header = quot_pdhsc.guid AND
                         quot_pdhsc.client = :iv_client
                    INNER join crmd_link as lk_part
                          on lk_part.guid_hi = quot_pdhsc.guid
                         and lk_part.objtype_hi = '05'
                         AND lk_part.objtype_set = '07'
                         AND lk_part.client = :iv_client
                    INNER JOIN crmd_partner AS partner_18
                          ON partner_18.guid = lk_part.guid_set
                         and partner_fct = '00000018'
                         and partner_18.client = :iv_client
                    WHERE  EXISTS ( SELECT guid FROM  bbp_pdhgp WHERE
                                       quot_pdhsc.guid = bbp_pdhgp.guid AND
                                       bbp_pdhgp.client = :iv_client AND
                                       bbp_pdhgp.version_type = '' AND
                                       bbp_pdhgp.doc_closed = '' )
                         ;


    lt_result = SELECT ilot_i_guid AS ilot_i_guid,
                       MIN(zzsrm2_com_submit_dt) AS zzsrm2_com_submit_dt,
                       MIN(zzsrm2_qual_submit_dt) AS zzsrm2_qual_submit_dt,
                       MIN(zzsrm2_tech_submit_dt) AS zzsrm2_tech_submit_dt, partner_no_18
*                       ,
*                       rank() over (partition BY ilot_i_guid order by zzsrm2_com_submit_dt ASC ) as zzsrm2_com_submit_dt_r,
*                       rank() over (partition BY ilot_i_guid order by zzsrm2_qual_submit_dt ASC ) as zzsrm2_qual_submit_dt_r,
*                       rank() over (partition BY ilot_i_guid order by zzsrm2_tech_submit_dt ASC ) as zzsrm2_tech_submit_dt_r
                  FROM :lt
                  GROUP BY ilot_i_guid, partner_no_18
                         ;
     et_result = SELECT ilot_i_guid,zzsrm2_com_submit_dt,zzsrm2_qual_submit_dt,zzsrm2_tech_submit_dt,partner_no_18
                    FROM :lt_result;
*                    WHERE zzsrm2_com_submit_dt_r = 1 AND
*                          zzsrm2_qual_submit_dt_r = 1 AND
*                          zzsrm2_tech_submit_dt_r = 1;

  ENDMETHOD.


  METHOD get_sgldoc
    BY DATABASE PROCEDURE FOR HDB
    LANGUAGE SQLSCRIPT OPTIONS READ-ONLY
    USING zsgldoc.

    lt_sgldoc = SELECT zsgldoc.object_id, concat( zsgldoc.object_id, zsgldoc.doc_id ) as node_id,
                        concat( zsgldoc.object_id, zsgldoc.parent_doc_id ) as parent_id
                 FROM zsgldoc
                 INNER JOIN :it_docpropval AS docpropval
                    ON  zsgldoc.object_id = docpropval.object_id
                 WHERE zsgldoc.mandt = :iv_client AND
                       parent_doc_id <> '0000';

    lt_sgldoc_b = SELECT concat( object_id, doc_id ) AS node_id
                    FROM  :it_docpropval;

    lt_result =
    SELECT node_id,
           parent_id,
           hierarchy_tree_size AS tree_size,
           hierarchy_parent_rank AS parent_rank,
           hierarchy_rank,
           object_id
     FROM HIERARCHY (
     SOURCE ( SELECT * FROM :lt_sgldoc
                    )
     START WHERE node_id IN ( SELECT node_id FROM :lt_sgldoc_b )

     )
     ;

     et_result =  SELECT DISTINCT object_id, node_id AS doc_id, parent_id AS parent_doc_id
        FROM :lt_result;


  ENDMETHOD.

ENDCLASS.